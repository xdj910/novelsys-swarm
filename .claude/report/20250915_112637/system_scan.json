{
  "scan_metadata": {
    "timestamp": "20250915_112637",
    "version": "5.0",
    "scanner": "system_check_v5.py",
    "claude_md_version": "6.6",
    "total_files_scanned": 145,
    "scan_type": "complete_semantic_extraction_with_enhanced_orphan_detection",
    "extraction_modules": [
      "YAMLExtractor",
      "IOPatternExtractor",
      "PromptExtractor",
      "ExecutionExtractor",
      "BusinessLogicExtractor",
      "ViolationDetector",
      "DivisionOfLaborAnalyzer",
      "ModelHintExtractor",
      "EnhancedOrphanDetector",
      "CoordinatorPlanExtractor"
    ]
  },
  "commands": {
    "architecture-test": {
      "file": ".claude\\commands\\architecture-test.md",
      "name": "architecture-test",
      "type": "command",
      "lines": 163,
      "description": "Execute Claude Code architecture standardization validation tests for system stability and compliance",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 163,
          "limit": 120,
          "message": "Command exceeds 120 lines (163 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "execute each phase in the returned plan",
          "coordinator collaboration",
          "recursion protection, architecture patterns, I/O flows, and standardization compliance",
          "execute the complete workflow as follows:",
          "the NOVELSYS-SWARM system's Claude Code architecture implementation against 2024-2025 standards",
          "be created first before running the test",
          "complete before proceeding to next phase"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "multi_coordinator"
        ],
        "dependencies": [
          "Main",
          "the"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Get Execution Plan**",
          "2: Execute Plan**",
          "3: Complete Workflow**",
          "1: Coordinator returns complete JSON execution plan",
          "2: Main Claude executes ALL phases in the plan (not just gets the plan)",
          "1: Call the coordinator to get the execution plan",
          "2: Execute each phase of the returned plan sequentially",
          "3: Complete all phases for full architecture validation",
          "1: Recursion safety validation results",
          "2: Parallel execution test results",
          "3: I/O isolation validation results",
          "4: Standards compliance check results",
          "5: Improvement recommendations"
        ],
        "decision_points": [
          "these components are not available, they must be created first before running the test.",
          "`.claude/testing/reports/final_report.md` for detailed analysis",
          "any issues found, address Task tool violations in affected files"
        ],
        "validation_logic": [
          "recursion protection, architecture patterns, I/O flows, and standardization compliance.",
          "the NOVELSYS-SWARM system's Claude Code architecture implementation against 2024-2025 standards. Tests run in complete isolation without affecting the existing system, with automatic cleanup of temporary test files upon completion.",
          "results",
          "correctly",
          "`.claude/testing/reports/final_report.md` for detailed analysis"
        ],
        "business_rules": [
          "*Complete Execution Requirements:**",
          "[ ] Phase 1: Coordinator returns complete JSON execution plan",
          "[ ] Phase 2: Main Claude executes ALL phases in the plan (not just gets the plan)",
          "[ ] All 6-7 phases complete successfully in sequence",
          "[ ] Environment setup, tests, parallel execution, I/O patterns, validation, results, cleanup",
          "*",
          "[ ] All 17+ tests pass with 100% success rate",
          "[ ] Zero recursion violations detected (no Task in subagents)",
          "[ ] Parallel execution efficiency > 50%",
          "[ ] All I/O patterns validate correctly",
          "[ ] Safe cleanup completes without touching production files",
          "[ ] Final test report generated in .claude/testing/reports/"
        ],
        "success_criteria": [
          "**Complete Execution Requirements:**"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 832,
      "line_count": 163
    },
    "human-in-loop-test": {
      "file": ".claude\\commands\\human-in-loop-test.md",
      "name": "human-in-loop-test",
      "type": "command",
      "lines": 82,
      "description": "Test human-in-the-loop workflow with sequential agent execution and approval points",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow state"
        ],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [
          "different response branches"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Initial Content Generation**",
          "2: Content Enhancement** (if approved)",
          "3: Final Processing** (if approved)"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [
          "[ ] Sequential agent execution works correctly",
          "[ ] Human approval points function properly",
          "[ ] Different responses trigger correct actions",
          "[ ] State maintained across interactions",
          "[ ] 5-layer architecture preserved",
          "[ ] File system tracks workflow state",
          "[ ] Revision loops work correctly",
          "[ ] Rejection terminates gracefully"
        ],
        "success_criteria": [
          "- [ ] Sequential agent execution works correctly"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 345,
      "line_count": 82
    },
    "multi-coordinator-test": {
      "file": ".claude\\commands\\multi-coordinator-test.md",
      "name": "multi-coordinator-test",
      "type": "command",
      "lines": 117,
      "description": "Test multi-coordinator collaboration in complex scenarios",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "that Phase 2 agents successfully consumed Phase 1 results",
          "Phase 1 deliverables are created",
          "Phase 2 deliverables are created",
          "phase dependencies**: Check `",
          "be created first before running the multi-coordinator test"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "multi_coordinator"
        ],
        "dependencies": [
          "the"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Analysis**",
          "2: Content Generation**",
          "1: results",
          "3: Result Integration**",
          "1: Data Analysis Coordination**",
          "1: deliverables are created",
          "2: Content Generation Coordination**",
          "1: results)",
          "2: deliverables are created",
          "3: Collaboration Validation**",
          "2: agents successfully consumed Phase 1 results",
          "1: Success Criteria:**",
          "1: deliverables created: parsed_data.json, analysis_results.json",
          "2: Success Criteria:**",
          "1: completion",
          "2: deliverables created: test_report.md, executive_summary.json",
          "2: agents consumed real results from Phase 1 agents",
          "1: data was used in Phase 2",
          "1: Use Task to call test-data-analysis-coordinator",
          "2: Receive JSON plan specifying agents to execute",
          "3: Execute the plan by calling agents with Task:",
          "4: Verify Phase 1 deliverables are created",
          "5: Use Task to call test-content-generation-coordinator (with Phase 1 results)",
          "6: Receive JSON plan specifying content generation agents",
          "7: Execute the plan by calling agents with Task:",
          "8: Verify Phase 2 deliverables are created",
          "9: Verify that Phase 2 agents successfully consumed Phase 1 results",
          "10: Confirm that real work was performed by agents under coordinator management",
          "11: Generate final multi-coordinator collaboration assessment"
        ],
        "decision_points": [
          "`.claude/testing/multi_coordinator_test/` for phase outputs"
        ],
        "validation_logic": [
          "Phase 1 deliverables are created",
          "Phase 2 deliverables are created",
          "that Phase 2 agents successfully consumed Phase 1 results",
          "phase dependencies**: Check `.claude/testing/multi_coordinator_test/` for phase outputs"
        ],
        "business_rules": [
          "Outputs: phase1_analysis_plan.json",
          "*Phase 1 Success Criteria:**",
          "[ ] test-data-analysis-coordinator returns agent execution plan",
          "[ ] test-data-parser-agent successfully processes input data",
          "[ ] test-data-analyzer-agent generates statistical insights",
          "[ ] Phase 1 deliverables created: parsed_data.json, analysis_results.json",
          "*",
          "[ ] test-content-generation-coordinator validates Phase 1 completion",
          "[ ] test-report-generator-agent creates comprehensive report from real analysis",
          "[ ] test-summary-generator-agent generates executive summary",
          "[ ] Phase 2 deliverables created: test_report.md, executive_summary.json"
        ],
        "success_criteria": [
          "**Phase 1 Success Criteria:**",
          "**"
        ],
        "failure_modes": []
      },
      "coordinator": "test-data-analysis-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 564,
      "line_count": 117
    },
    "parallel-test": {
      "file": ".claude\\commands\\parallel-test.md",
      "name": "parallel-test",
      "type": "command",
      "lines": 70,
      "description": "Execute real parallel execution test to validate Claude Code concurrent capabilities",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "that Main Claude can successfully coordinate multiple agents running concurrently through the Task tool",
          "Claude Code concurrent capabilities"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Test environment setup with shared data",
          "2: Serial baseline execution (agents run one by one)",
          "3: Parallel execution (agents run simultaneously via Task calls)",
          "4: Performance analysis and efficiency calculation"
        ],
        "decision_points": [],
        "validation_logic": [
          "Claude Code concurrent capabilities",
          "that Main Claude can successfully coordinate multiple agents running concurrently through the Task tool. Unlike simulation-based tests, this performs actual parallel agent execution and measures true performance improvements."
        ],
        "business_rules": [
          "[x] Serial baseline completes successfully",
          "[x] Parallel execution shows overlapping timestamps",
          "[x] Performance efficiency gain >50%",
          "[x] No file corruption during concurrent access",
          "[x] All agents complete independently"
        ],
        "success_criteria": [
          "- [x] Serial baseline completes successfully"
        ],
        "failure_modes": []
      },
      "coordinator": "test-parallel-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 322,
      "line_count": 70
    },
    "python-pipeline-test": {
      "file": ".claude\\commands\\python-pipeline-test.md",
      "name": "python-pipeline-test",
      "type": "command",
      "lines": 86,
      "description": "Test Python script pipeline through multiple agents with data transformation",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "output files exist using Bash"
        ]
      },
      "execution": {
        "patterns": [
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "and stop"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Generation**",
          "2: Data Transformation**",
          "3: Data Analysis**",
          "4: Result Presentation**",
          "1: Execute each agent in sequence",
          "2: After each agent, verify output files exist using Bash",
          "3: Only proceed to next agent if files are confirmed",
          "4: If any verification fails, report the error and stop"
        ],
        "decision_points": [
          "files are confirmed",
          "any verification fails, report the error and stop"
        ],
        "validation_logic": [
          "output files exist using Bash"
        ],
        "business_rules": [
          "[ ] Agent 1 Python script generates data successfully",
          "[ ] Agent 2 Python script reads and transforms data",
          "[ ] Agent 3 Python script analyzes transformed data",
          "[ ] Data flows correctly through pipeline",
          "[ ] No data loss between stages",
          "[ ] Final output readable by Main Claude"
        ],
        "success_criteria": [
          "- [ ] Agent 1 Python script generates data successfully"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 403,
      "line_count": 86
    },
    "bible-create": {
      "file": ".claude\\commands\\novel\\bible-create.md",
      "name": "bible-create",
      "type": "command",
      "lines": 94,
      "description": "Create new series Bible with brainstorming",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/bible.yaml",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/bible.yaml",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/bible.yaml",
          "{project}/bible_backup.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "95+ quality score",
          "status**: `/novel:status` to see project overview",
          "completeness of essential elements"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Loading:",
          "2: Guided Brainstorming:",
          "3: Bible Generation:",
          "4: Requirements:",
          "5: File Management:",
          "6: Validation:"
        ],
        "decision_points": [],
        "validation_logic": [
          "completeness of essential elements",
          "95+ quality score",
          "status**: `/novel:status` to see project overview"
        ],
        "business_rules": [
          "Conduct interactive brainstorming for all Bible components",
          "Generate detailed character profiles with depth",
          "Build consistent world with clear rules",
          "Design compelling central mystery/conflict",
          "Score the Bible quality (target: 95+)",
          "Include genre specification for context-aware generation",
          "Initialize entity tracking for consistent naming"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 413,
      "line_count": 94
    },
    "bible-view": {
      "file": ".claude\\commands\\novel\\bible-view.md",
      "name": "bible-view",
      "type": "command",
      "lines": 108,
      "description": "View and analyze project Bible content",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/bible.yaml",
          "{project}/bible_backup.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "Bible file exists and has proper YAML structure",
          "for required sections and content completeness",
          "project exists",
          "of Bible completeness and quality"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Handling**: Graceful failure with recovery suggestions",
          "missing file scenarios with clear error messages",
          "Recovery",
          "Resilience**: Clear error messages with recovery guidance"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Identify Current Project",
          "2: Orchestrate Bible Display",
          "3: Error Recovery",
          "1: Bible Loading and Validation**",
          "2: Content Formatting and Display**",
          "3: Related Commands and Next Steps**",
          "1: Load current project configuration from `.claude/data/context/current_project.json`",
          "2: Extract project name and validate project exists",
          "3: Determine current book number from project metadata",
          "4: Construct Bible file path: `.claude/data/projects/{project}/book_{N}/bible.yaml`"
        ],
        "decision_points": [
          "current book number from project metadata",
          "for required sections and content completeness",
          "Bible not found",
          "project not set",
          "of Bible completeness and quality"
        ],
        "validation_logic": [
          "project exists",
          "Bible file exists and has proper YAML structure",
          "for required sections and content completeness",
          "of Bible completeness and quality"
        ],
        "business_rules": [
          "**Bible Loading**: Validates file existence and structure",
          "**Bilingual Display**: English content with Chinese section headers",
          "**Completeness Analysis**: Identifies missing elements and quality issues",
          "**Navigation Support**: Related commands and next steps recommendations",
          "**Error Handling**: Graceful failure with recovery suggestions"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "bible-view-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 490,
      "line_count": 108
    },
    "book-complete": {
      "file": ".claude\\commands\\novel\\book-complete.md",
      "name": "book-complete",
      "type": "command",
      "lines": 63,
      "description": "Complete and archive the current book",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/archives/book_{N}/"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [],
        "validation_logic": [
          "- All chapters are complete"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "book-complete-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 189,
      "line_count": 63
    },
    "chapter-start": {
      "file": ".claude\\commands\\novel\\chapter-start.md",
      "name": "chapter-start",
      "type": "command",
      "lines": 70,
      "description": "Generate new chapter with quality validation",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/",
          "{project}/book_{N}/chapters/ch{NNN}/outline.json",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/content.md",
          "{project}/book_{N}/chapters/ch{NNN}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "progress**: `/novel:status` for overall statistics"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "handling and retry logic"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "quality >=95**",
          "quality 90-94**",
          "quality <90**"
        ],
        "validation_logic": [
          "- 95+ quality score achieved",
          "progress**: `/novel:status` for overall statistics"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "chapter-start-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 240,
      "line_count": 70
    },
    "context-sync": {
      "file": ".claude\\commands\\novel\\context-sync.md",
      "name": "context-sync",
      "type": "command",
      "lines": 109,
      "description": "Synchronize context with quality-gated learning",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "project and entity dictionary",
          "impact**: `/novel:status` to see updated statistics",
          "all chapter scores"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate project and entity dictionary",
          "2: Scan quality reports for all chapters",
          "3: Identify eligible chapters (score >=95)",
          "4: Block if any chapter <90",
          "5: Extract entities from eligible chapters",
          "6: Update entity dictionary",
          "7: Synchronize specified context dimensions",
          "8: Generate learning report"
        ],
        "decision_points": [
          "any chapter scores < 90 (quality risk).",
          "any chapter <90",
          "any chapter scores <90",
          "all chapter scores",
          "entities added**"
        ],
        "validation_logic": [
          "project and entity dictionary",
          "all chapter scores",
          "impact**: `/novel:status` to see updated statistics"
        ],
        "business_rules": [
          "Quality score >= 95",
          "Bible compliance = 100%",
          "No critical issues",
          "Entity consistency validated",
          "Only learn from chapters scoring >=95",
          "Halt if any chapter scores <90",
          "Need minimum 3 eligible chapters"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "context-sync-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 426,
      "line_count": 109
    },
    "extend-series": {
      "file": ".claude\\commands\\novel\\extend-series.md",
      "name": "extend-series",
      "type": "command",
      "lines": 92,
      "description": "Extend novel series beyond original planned length while maintaining consistency",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "seamless integration with existing series structure",
          "consistency with completed books and established patterns",
          "extension maintains series quality standards",
          "extended structure supports additional book generation",
          "extension maintains established quality standards",
          "extension maintains series quality and reader engagement"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "careful"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Series Extension Analysis",
          "2: Comprehensive Series Extension",
          "3: Extension Implementation",
          "1: Analyze current series completion state and narrative opportunities",
          "2: Assess extension viability and identify natural continuation points",
          "3: Plan extension scope and additional book requirements"
        ],
        "decision_points": [],
        "validation_logic": [
          "extension maintains series quality standards",
          "seamless integration with existing series structure",
          "extended structure supports additional book generation",
          "consistency with completed books and established patterns",
          "extension maintains series quality and reader engagement"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "extend-series-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 440,
      "line_count": 92
    },
    "flow-mapping": {
      "file": ".claude\\commands\\novel\\flow-mapping.md",
      "name": "flow-mapping",
      "type": "command",
      "lines": 97,
      "description": "Map system execution flows and dependencies",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: System Flow Analysis",
          "2: Comprehensive Flow Generation",
          "3: Report Generation",
          "1: Command Discovery and Analysis**",
          "2: Flow Mapping and Visualization**",
          "3: Analysis and Optimization**",
          "1: Scan all novel commands in `.claude/commands/novel/`",
          "2: Analyze each command's coordinator and agent dependencies",
          "3: Map execution patterns and call trees",
          "4: Identify parallel vs sequential execution opportunities"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 459,
      "line_count": 97
    },
    "github-sync": {
      "file": ".claude\\commands\\novel\\github-sync.md",
      "name": "github-sync",
      "type": "command",
      "lines": 100,
      "description": "Sync novel content to GitHub Issues",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": [
          "database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "if Issue exists",
          "GitHub CLI auth and repository",
          "sync success"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "batch operations efficiently",
          "handling and recovery"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Validate GitHub CLI auth and repository",
          "2: Load current project and chapter content",
          "3: Determine sync mode (incremental vs full)",
          "4: Create/update GitHub Issues",
          "5: Format content with metadata",
          "6: Handle batch operations efficiently",
          "7: Manage API rate limits",
          "8: Verify sync success"
        ],
        "decision_points": [
          "sync mode (incremental vs full)",
          "if Issue exists"
        ],
        "validation_logic": [
          "GitHub CLI auth and repository",
          "sync success",
          "if Issue exists"
        ],
        "business_rules": [
          "GitHub CLI installed and authenticated",
          "Repository with Issues enabled"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "github-sync-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 392,
      "line_count": 100
    },
    "next-book": {
      "file": ".claude\\commands\\novel\\next-book.md",
      "name": "next-book",
      "type": "command",
      "lines": 99,
      "description": "Generate next book in series",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "series state and prerequisites",
          "95+ bible score",
          "quality via bible-reviewer (95+ required)",
          "series bible exists and is complete",
          "previous book completion status",
          "series progress: `/novel:standup`"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "resolution"
        ],
        "error_handling": [
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate series state and prerequisites",
          "2: Plan book transition",
          "3: Generate book-specific bible",
          "4: Initialize book structure",
          "1: Review new book bible: `/novel:bible-view`",
          "2: Start first chapter: `/novel:chapter-start 1`",
          "3: Check series progress: `/novel:standup`"
        ],
        "decision_points": [
          "next number",
          "previous book completion status",
          "series progress"
        ],
        "validation_logic": [
          "series state and prerequisites",
          "series bible exists and is complete",
          "previous book completion status",
          "quality via bible-reviewer (95+ required)",
          "- Full series continuity maintained"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "next-book-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 359,
      "line_count": 99
    },
    "next-chapter": {
      "file": ".claude\\commands\\novel\\next-chapter.md",
      "name": "next-chapter",
      "type": "command",
      "lines": 59,
      "description": "Write the next chapter in sequence",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/outline.json",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/content.md",
          "{project}/book_{N}/chapters/ch{NNN}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "the next chapter number and orchestrate its generation."
        ],
        "validation_logic": [
          "- Correct sequential numbering"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "next-chapter-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 178,
      "line_count": 59
    },
    "next": {
      "file": ".claude\\commands\\novel\\next.md",
      "name": "next",
      "type": "command",
      "lines": 85,
      "description": "Recommend optimal next tasks for novel project",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "unicode_character",
          "line": 62,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 62"
        },
        {
          "type": "unicode_character",
          "line": 64,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 64"
        },
        {
          "type": "unicode_character",
          "line": 65,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 65"
        },
        {
          "type": "unicode_character",
          "line": 66,
          "char": "💡",
          "ord": 128161,
          "message": "Unicode character '💡' found at line 66"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "🎯 Top priority action with command",
          "ALERT: Parallel execution opportunities",
          "🚨 Critical blockers to resolve",
          "📊 Project health metrics",
          "💡 Strategic optimization advice"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "be immediately actionable with clear next steps"
        ]
      },
      "execution": {
        "patterns": [
          "parallel"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Assess current project state (Bible, chapters, quality)",
          "2: Map task dependencies and identify blockers",
          "3: Find parallel execution opportunities",
          "4: Calculate priority scores using weighted matrix",
          "5: Generate actionable recommendations"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "next-recommendation-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 338,
      "line_count": 85
    },
    "project-list": {
      "file": ".claude\\commands\\novel\\project-list.md",
      "name": "project-list",
      "type": "command",
      "lines": 94,
      "description": "List all novel projects and status",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Project Discovery and Analysis",
          "2: Status Analysis and Display",
          "3: System Summary",
          "1: Scanning `.claude/data/projects/` directory for project folders",
          "2: Loading project metadata and progress information",
          "3: Analyzing current status and completion metrics for each project",
          "4: Identifying active project from current context"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 432,
      "line_count": 94
    },
    "project-new": {
      "file": ".claude\\commands\\novel\\project-new.md",
      "name": "project-new",
      "type": "command",
      "lines": 75,
      "description": "Create new novel project with comprehensive Bible",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "project status: `/novel:status`",
          "the project is fully configured and ready for chapter generation"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Project format (series/standalone/trilogy)",
          "2: Language variant and style preferences",
          "3: Genre, subgenre, and market positioning",
          "4: Character and world architecture",
          "5: Series planning (if applicable)",
          "1: Review Bible: `/novel:bible-view`",
          "2: Generate first chapter: `/novel:chapter-start 1`",
          "3: Check project status: `/novel:status`"
        ],
        "decision_points": [
          "not provided)",
          "project name (if not provided)",
          "project name is empty or 'TBD'",
          "the project concept",
          "applicable)"
        ],
        "validation_logic": [
          "the project is fully configured and ready for chapter generation.",
          "project status: `/novel:status`"
        ],
        "business_rules": [
          "Bible created with 95+ quality score",
          "Project structure initialized correctly",
          "Entity dictionary created",
          "Project registered in system",
          "User receives clear next steps"
        ],
        "success_criteria": [
          "- Bible created with 95+ quality score"
        ],
        "failure_modes": []
      },
      "coordinator": "project-new-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 319,
      "line_count": 75
    },
    "project-switch": {
      "file": ".claude\\commands\\novel\\project-switch.md",
      "name": "project-switch",
      "type": "command",
      "lines": 108,
      "description": "Switch to different novel project",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "target project health",
          "project exists",
          "status: `/novel:status`",
          "project structure",
          "target project",
          "essential files (project"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate target project",
          "2: Save current context",
          "3: Clean transition",
          "4: Activate target project",
          "5: Generate status report",
          "1: Check status: `/novel:status`",
          "2: View Bible: `/novel:bible-view`",
          "3: Resume work: `/novel:next`",
          "4: Generate chapter: `/novel:chapter-start N`"
        ],
        "decision_points": [
          "essential files (project.json)",
          "Bible missing",
          "project not found, list available projects.",
          "Bible missing, warn but allow switch."
        ],
        "validation_logic": [
          "target project",
          "project exists",
          "essential files (project.json)",
          "project structure",
          "- No data loss during switch"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "project-switch-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 368,
      "line_count": 108
    },
    "quality-check-cross": {
      "file": ".claude\\commands\\novel\\quality-check-cross.md",
      "name": "quality-check-cross",
      "type": "command",
      "lines": 81,
      "description": "Validate cross-chapter consistency",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/*/content.md",
          "{project}/book_{N}/quality_scores.json",
          "{project}/book_{N}/quality_report.json",
          "{project}/book_{N}/quality_scores.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "Validating cross-chapter consistency for: **$ARGUMENTS**",
          "chapters exist",
          "score >=90 in quality-check-individual before running cross-chapter validation",
          "narrative continuity, plot consistency, and quality maintenance across your specified chapter range",
          "individual quality scores",
          "cross-chapter consistency"
        ]
      },
      "execution": {
        "patterns": [
          "parallel"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Parse chapter range",
          "2: Launch parallel validators",
          "3: Aggregate findings",
          "4: Generate recommendations"
        ],
        "decision_points": [
          "Validating cross-chapter consistency for",
          "individual quality scores"
        ],
        "validation_logic": [
          "cross-chapter consistency",
          "Validating cross-chapter consistency for: **$ARGUMENTS**",
          "narrative continuity, plot consistency, and quality maintenance across your specified chapter range.",
          "chapters exist",
          "individual quality scores"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "quality-check-cross-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 269,
      "line_count": 81
    },
    "quality-check-individual": {
      "file": ".claude\\commands\\novel\\quality-check-individual.md",
      "name": "quality-check-individual",
      "type": "command",
      "lines": 86,
      "description": "Check individual chapter quality",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/*/content.md",
          "{project}/book_{N}/quality_scores.json",
          "{project}/book_{N}/quality_report.json",
          "{project}/book_{N}/quality_scores.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "prerequisites",
          "entity dictionary",
          "individual chapter quality",
          "Validating quality for chapter: **$ARGUMENTS**",
          "chapter content exists",
          "Bible exists"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "pipeline"
        ],
        "dependencies": [
          "rewrite"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate prerequisites",
          "2: Launch parallel validators (ALL AT ONCE)",
          "3: Aggregate results",
          "4: Generate recommendations"
        ],
        "decision_points": [
          "individual chapter quality",
          "Validating quality for chapter",
          "entity dictionary"
        ],
        "validation_logic": [
          "individual chapter quality",
          "Validating quality for chapter: **$ARGUMENTS**",
          "prerequisites",
          "chapter content exists",
          "Bible exists"
        ],
        "business_rules": [
          "quality-scorer (comprehensive scoring)"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "quality-check-individual-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 299,
      "line_count": 86
    },
    "smart-fix-cross": {
      "file": ".claude\\commands\\novel\\smart-fix-cross.md",
      "name": "smart-fix-cross",
      "type": "command",
      "lines": 92,
      "description": "Fix cross-chapter consistency issues with intelligent analysis",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "fixes maintain overall narrative coherence",
          "comprehensive consistency through:",
          "timeline and world-building coherence throughout",
          "consistency improvements across all affected chapters",
          "overall narrative coherence and flow"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Cross-Chapter Consistency Analysis",
          "2: Intelligent Fix Orchestration",
          "3: Consistency Validation",
          "1: Analyze all completed chapters for consistency issues",
          "2: Identify character, plot, and world-building inconsistencies",
          "3: Map dependency relationships between consistency fixes"
        ],
        "decision_points": [],
        "validation_logic": [
          "fixes maintain overall narrative coherence",
          "timeline and world-building coherence throughout",
          "consistency improvements across all affected chapters",
          "overall narrative coherence and flow",
          "comprehensive consistency through:"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "smart-fix-cross-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 400,
      "line_count": 92
    },
    "smart-fix": {
      "file": ".claude\\commands\\novel\\smart-fix.md",
      "name": "smart-fix",
      "type": "command",
      "lines": 93,
      "description": "Intelligently fix chapter quality issues to achieve 95+ score",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "95+ quality score achievement after fixes",
          "improvement success through:",
          "95+ quality achievement"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Quality Assessment",
          "2: Intelligent Fix Application",
          "3: Success Validation",
          "1: Load current chapter and associated quality report",
          "2: Analyze specific quality deficiencies and improvement opportunities",
          "3: Plan targeted fix strategy based on identified issues"
        ],
        "decision_points": [],
        "validation_logic": [
          "95+ quality score achievement after fixes",
          "95+ quality achievement",
          "improvement success through:"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "smart-fix-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 415,
      "line_count": 93
    },
    "standup": {
      "file": ".claude\\commands\\novel\\standup.md",
      "name": "standup",
      "type": "command",
      "lines": 93,
      "description": "Generate project status report",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "unicode_character",
          "line": 67,
          "char": "📈",
          "ord": 128200,
          "message": "Unicode character '📈' found at line 67"
        },
        {
          "type": "unicode_character",
          "line": 68,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 68"
        },
        {
          "type": "unicode_character",
          "line": 69,
          "char": "🔍",
          "ord": 128269,
          "message": "Unicode character '🔍' found at line 69"
        },
        {
          "type": "unicode_character",
          "line": 70,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 70"
        },
        {
          "type": "unicode_character",
          "line": 71,
          "char": "💡",
          "ord": 128161,
          "message": "Unicode character '💡' found at line 71"
        },
        {
          "type": "unicode_character",
          "line": 72,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 72"
        },
        {
          "type": "unicode_character",
          "line": 73,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 73"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Project progress (Bible, chapters, quality)",
          "2: System health and agent status",
          "3: Quality metrics and trends",
          "4: Blocking issues and risks",
          "5: Optimization opportunities"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "standup-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 345,
      "line_count": 93
    },
    "status": {
      "file": ".claude\\commands\\novel\\status.md",
      "name": "status",
      "type": "command",
      "lines": 108,
      "description": "Show detailed status of current project",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "data source availability",
          "project exists and essential files are accessible",
          "for validation"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Handling**: Graceful handling of missing files or incomplete data",
          "missing project scenarios with clear error messages",
          "Recovery",
          "No active project. Use /novel:project-new to create a new project.",
          "Resilience**: Partial reporting when data is incomplete"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Project Context Analysis",
          "2: Comprehensive Status Generation",
          "3: Error Recovery",
          "1: Project Context Loading**",
          "2: Statistics Generation**",
          "3: Status Report Generation**",
          "1: Load current project from `.claude/data/context/current_project.json`",
          "2: Validate project exists and essential files are accessible",
          "3: Extract project metadata and current book/chapter status",
          "4: Identify data sources for comprehensive analysis"
        ],
        "decision_points": [
          "no project set",
          "project files missing",
          "for validation",
          "data is incomplete"
        ],
        "validation_logic": [
          "project exists and essential files are accessible",
          "data source availability",
          "for validation"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "status-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 504,
      "line_count": 108
    },
    "system-check": {
      "file": ".claude\\commands\\novel\\system-check.md",
      "name": "system-check",
      "type": "command",
      "lines": 49,
      "description": "Run comprehensive system health check and architecture analysis",
      "thinking": "",
      "tools": [],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "proper data flow between agents and generate reports in",
          "Performs complete system architecture analysis, compliance validation, and health assessment",
          "and architecture analysis",
          "improvements"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Deep scanning with V5 scanner - complete semantic extraction (10 modules) + enhanced orphan detection (8-pattern recognition)",
          "2: Architecture analysis with full ComponentMetadata - I/O patterns, prompts, execution context, business logic, and compliance validation",
          "3: Comprehensive report generation with accurate metrics and actionable insights"
        ],
        "decision_points": [
          "and architecture analysis",
          "Performs complete system architecture analysis, compliance validation, and health assessment.",
          "calling agents with Task tool, avoid using exact file names like \"system_scan.json\" in prompts. Use descriptive language instead (e.g., \"analyze scan data in report directory\") to prevent trigger word issues that cause false \"Prompt too long\" errors."
        ],
        "validation_logic": [
          "and architecture analysis",
          "Performs complete system architecture analysis, compliance validation, and health assessment.",
          "proper data flow between agents and generate reports in .claude/report/{timestamp}/ directory.",
          "improvements"
        ],
        "business_rules": [
          "Phase 1: Deep scanning with V5 scanner - complete semantic extraction (10 modules) + enhanced orphan detection (8-pattern recognition)",
          "Phase 2: Architecture analysis with full ComponentMetadata - I/O patterns, prompts, execution context, business logic, and compliance validation",
          "Phase 3: Comprehensive report generation with accurate metrics and actionable insights"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "system-check-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 317,
      "line_count": 49
    },
    "unified-update-pipeline": {
      "file": ".claude\\commands\\novel\\unified-update-pipeline.md",
      "name": "unified-update-pipeline",
      "type": "command",
      "lines": 98,
      "description": "Update all systems after quality approval",
      "thinking": "",
      "tools": [],
      "violations": [],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "chapter content exists",
          "quality score >= 95",
          "run IN PARALLEL for performance",
          "prerequisites"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [
          "any failures gracefully"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate prerequisites",
          "2: Launch parallel updaters (ALL AT ONCE)",
          "3: Monitor completion",
          "4: Generate summary"
        ],
        "decision_points": [
          "quality_score >= 95",
          "chapter content exists",
          "run one by one)"
        ],
        "validation_logic": [
          "prerequisites",
          "quality score >= 95",
          "chapter content exists"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": "unified-update-pipeline-coordinator",
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "command"
      },
      "word_count": 363,
      "line_count": 98
    }
  },
  "coordinators": {
    "bible-view-coordinator": {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "name": "bible-view-coordinator",
      "type": "coordinator",
      "lines": 279,
      "description": "Orchestrates Bible viewing with formatting, section filtering, and analysis features",
      "thinking": "Analyze Bible viewing requirements - determine display format (full/section), assess bilingual needs, plan formatting strategy, and coordinate analysis features. Consider user preferences, file availability, and output formatting before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 245,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 245"
        },
        {
          "type": "unicode_character",
          "line": 255,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 255"
        },
        {
          "type": "excessive_lines",
          "lines": 279,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (279 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Bible Viewing and Analysis Pipeline",
            "coordinator": "bible-view-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential",
              "estimated_duration": "10-15 seconds",
              "complexity": "moderate",
              "retry_strategy": "Retry if Bible file temporarily unavailable"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Bible Loading and Validation",
                "description": "Load Bible file and validate structure",
                "parallel": false,
                "estimated_time": "3 seconds",
                "tasks": [
                  {
                    "agent": "bible-viewer",
                    "description": "Load and validate Bible file structure",
                    "priority": "high",
                    "inputs": {
                      "bible_file": "/absolute/path/to/bible.yaml",
                      "section_filter": "[section name or 'all']",
                      "display_mode": "validation"
                    },
                    "outputs": {
                      "validation_result": "console_output"
                    },
                    "requirements": "Validate Bible exists and has proper structure",
                    "success_criteria": "Bible file loaded and structure verified"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Bible validation completed"
                ]
              },
              {
                "phase": 2,
                "name": "Content Formatting and Display",
                "description": "Format Bible content according to user preferences",
                "parallel": false,
                "estimated_time": "8 seconds",
                "tasks": [
                  {
                    "agent": "bible-viewer",
                    "description": "Format and display Bible content with bilingual support",
                    "priority": "high",
                    "inputs": {
                      "bible_file": "/absolute/path/to/bible.yaml",
                      "section_filter": "[section name or 'all']",
                      "display_mode": "formatted_display",
                      "features": {
                        "bilingual_headers": true,
                        "section_navigation": true,
                        "syntax_highlighting": true,
                        "completeness_analysis": true
                      }
                    },
                    "outputs": {
                      "formatted_display": "console_output",
                      "analysis_summary": "inline_data"
                    },
                    "requirements": "Display formatted Bible with analysis and navigation options",
                    "success_criteria": "Bible content displayed with full formatting and analysis"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Bible content formatted and displayed",
                  "Analysis completed"
                ]
              },
              {
                "phase": 3,
                "name": "Related Commands and Next Steps",
                "description": "Provide related commands and suggestions",
                "parallel": false,
                "estimated_time": "2 seconds",
                "tasks": [
                  {
                    "agent": "bible-viewer",
                    "description": "Generate related commands and improvement suggestions",
                    "priority": "medium",
                    "inputs": {
                      "analysis_data": "from_phase_2",
                      "project_context": "/absolute/path/to/project.json",
                      "display_mode": "suggestions"
                    },
                    "outputs": {
                      "related_commands": "console_output",
                      "improvement_suggestions": "console_output"
                    },
                    "requirements": "Provide contextual next steps and related commands",
                    "success_criteria": "Helpful suggestions and commands provided"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Related commands displayed",
                  "Next steps provided"
                ]
              }
            ],
            "context": {
              "project": "[project name from context]",
              "book": "[book number]",
              "section_filter": "[arguments or 'all']",
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "bible": "/absolute/path/to/bible.yaml",
                "project_json": "/absolute/path/to/project.json"
              }
            },
            "success_criteria": [
              "Bible content loaded and validated",
              "Content formatted and displayed appropriately",
              "Analysis and suggestions provided",
              "Related commands shown"
            ],
            "notes": "This plan implements comprehensive Bible viewing with bilingual support, analysis, and user guidance features while maintaining proper architecture separation."
          },
          {
            "error": true,
            "coordinator": "bible-view-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot display Bible",
            "blocking_issues": [
              "Bible file not found",
              "Invalid section filter specified",
              "Project not properly configured"
            ],
            "remediation_steps": [
              "Run /novel:bible-create to generate Bible",
              "Verify project is properly set up",
              "Check section filter spelling (characters/plot/world/themes/voice)"
            ],
            "suggested_commands": [
              "/novel:bible-create",
              "/novel:status",
              "/novel:project-switch [project_name]"
            ]
          }
        ],
        "validation_rules": [
          "project is properly set up\",",
          "Bible file structure\",",
          "Prerequisites**:",
          "structure\",",
          "section filter spelling (characters/plot/world/themes/voice)\"",
          "Bible exists and has proper structure\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex orchestration logic** (analysis, decisions, formatting strategy)",
          "handling for missing files or invalid sections",
          "Response Format",
          "error cases** and provide recovery suggestions",
          "Guidance**: Helpful error messages and recovery steps"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "display format (full/section), assess bilingual needs, plan formatting strategy, and coordinate analysis features. Consider user preferences, file availability, and output formatting before creating execution plan.",
          "invoked, perform analysis and return a structured execution plan for Bible viewing.",
          "display preferences (full Bible vs filtered section)",
          "display strategy based on section filter",
          "Bible file temporarily unavailable\""
        ],
        "validation_logic": [
          "Prerequisites**:",
          "structure\",",
          "Bible file structure\",",
          "Bible exists and has proper structure\",",
          "project is properly set up\","
        ],
        "business_rules": [
          "determine display format (full/section), assess bilingual needs, plan formatting strategy, and coordinate analysis features. Consider user preferences, file availability, and output formatting before creating execution plan.",
          "--",
          "Read current project: `.claude/data/context/current_project.json`",
          "Get project metadata: `.claude/data/projects/{project}/project.json`",
          "Identify current book number",
          "Locate Bible file: `.claude/data/projects/{project}/book_{N}/bible.yaml`"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "bible-viewer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1075,
      "line_count": 279
    },
    "book-complete-coordinator": {
      "file": ".claude\\agents\\book-complete-coordinator.md",
      "name": "book-complete-coordinator",
      "type": "coordinator",
      "lines": 471,
      "description": "Orchestrates book completion and archival process",
      "thinking": "Plan book completion process carefully - design completion verification strategy for all chapters and quality standards, plan final quality assurance validation, design book assembly and manuscript formatting, plan comprehensive archival strategy, structure series progress updates, and prepare next phase transition. Consider artifact preservation and smooth handoff.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 471,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (471 lines)"
        },
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Book Completion and Archival Pipeline",
            "coordinator": "book-complete-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_validation_assembly_archival",
              "estimated_duration": "120-180 seconds",
              "complexity": "moderate",
              "retry_strategy": "Address any quality issues before proceeding"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Completion Validation",
                "description": "Verify book is ready for completion",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "completion-validator",
                    "description": "Validate all chapters complete and quality standards met",
                    "priority": "critical",
                    "inputs": {
                      "book_path": "/absolute/path/to/book",
                      "validation_scope": {
                        "chapter_completion": true,
                        "quality_verification": true,
                        "plot_resolution": true,
                        "narrative_completeness": true
                      },
                      "quality_threshold": 95
                    },
                    "outputs": {
                      "validation_status": "book_ready_for_completion",
                      "chapter_count": "total_completed_chapters",
                      "quality_average": "overall_book_quality",
                      "completion_report": "detailed_readiness_assessment"
                    },
                    "requirements": "Book must meet all completion criteria",
                    "success_criteria": "Book validated as ready for completion"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Completion validated",
                  "Quality confirmed"
                ]
              },
              {
                "phase": 2,
                "name": "Final Quality Assurance",
                "description": "Run comprehensive final quality checks",
                "parallel": true,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "final-quality-validator",
                    "description": "Perform final comprehensive quality validation",
                    "priority": "high",
                    "inputs": {
                      "book_path": "/absolute/path/to/book",
                      "quality_checks": {
                        "cross_chapter_consistency": true,
                        "bible_compliance": true,
                        "character_arc_completion": true,
                        "plot_thread_resolution": true
                      }
                    },
                    "outputs": {
                      "final_quality_score": "comprehensive_quality_rating",
                      "consistency_report": "cross_chapter_validation",
                      "compliance_status": "bible_adherence_verification",
                      "arc_completion": "character_and_plot_closure"
                    },
                    "requirements": "Comprehensive quality validation",
                    "success_criteria": "Final quality meets or exceeds standards"
                  },
                  {
                    "agent": "continuity-final-checker",
                    "description": "Final continuity and consistency validation",
                    "priority": "high",
                    "inputs": {
                      "all_chapters": "/absolute/path/to/chapters",
                      "continuity_scope": {
                        "timeline_verification": true,
                        "character_consistency": true,
                        "world_consistency": true,
                        "narrative_flow": true
                      }
                    },
                    "outputs": {
                      "continuity_status": "final_consistency_verification",
                      "timeline_report": "temporal_coherence_check",
                      "consistency_score": "overall_continuity_rating",
                      "flow_assessment": "narrative_flow_quality"
                    },
                    "requirements": "Ensure complete narrative consistency",
                    "success_criteria": "Continuity validated across all dimensions"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Quality assured",
                  "Continuity confirmed"
                ]
              },
              {
                "phase": 3,
                "name": "Book Assembly",
                "description": "Assemble complete manuscript from chapters",
                "parallel": false,
                "estimated_time": "25 seconds",
                "tasks": [
                  {
                    "agent": "manuscript-assembler",
                    "description": "Merge all chapters into single manuscript",
                    "priority": "critical",
                    "inputs": {
                      "chapters_path": "/absolute/path/to/chapters",
                      "assembly_parameters": {
                        "include_toc": true,
                        "chapter_formatting": "standard_manuscript",
                        "front_matter": true,
                        "back_matter": true
                      },
                      "output_format": "markdown_and_docx"
                    },
                    "outputs": {
                      "manuscript_path": "/absolute/path/to/manuscript.md",
                      "docx_path": "/absolute/path/to/manuscript.docx",
                      "word_count": "total_manuscript_words",
                      "assembly_report": "manuscript_creation_summary"
                    },
                    "requirements": "Create properly formatted complete manuscript",
                    "success_criteria": "Manuscript assembled with all components"
                  },
                  {
                    "agent": "metadata-generator",
                    "description": "Generate comprehensive book metadata",
                    "priority": "high",
                    "inputs": {
                      "book_data": "from_validation_phases",
                      "metadata_scope": {
                        "publication_info": true,
                        "chapter_summaries": true,
                        "character_list": true,
                        "statistics": true
                      }
                    },
                    "outputs": {
                      "metadata_file": "/absolute/path/to/book_metadata.json",
                      "statistics": "comprehensive_book_statistics",
                      "summary_data": "chapter_and_character_summaries",
                      "publication_ready": "metadata_for_publishing"
                    },
                    "requirements": "Generate complete book metadata",
                    "success_criteria": "Metadata generated with all components"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Manuscript assembled",
                  "Metadata complete"
                ]
              },
              {
                "phase": 4,
                "name": "Archival Process",
                "description": "Create comprehensive book archive",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "archive-creator",
                    "description": "Create structured archive of all book artifacts",
                    "priority": "high",
                    "inputs": {
                      "book_path": "/absolute/path/to/book",
                      "archive_structure": {
                        "manuscripts": [
                          "markdown",
                          "docx",
                          "pdf"
                        ],
                        "chapters": "individual_chapter_files",
                        "quality_reports": "all_validation_reports",
                        "metadata": "book_and_series_metadata",
                        "context": "entity_dictionary_and_progression"
                      },
                      "archive_location": "/absolute/path/to/archives/book_{N}_{timestamp}"
                    },
                    "outputs": {
                      "archive_path": "complete_archive_location",
                      "manifest": "archive_contents_manifest",
                      "checksums": "file_integrity_verification",
                      "archive_report": "archival_process_summary"
                    },
                    "requirements": "Create comprehensive, organized archive",
                    "success_criteria": "Archive created with all artifacts preserved"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Archive created",
                  "Artifacts preserved"
                ]
              },
              {
                "phase": 5,
                "name": "Series Progress Update",
                "description": "Update series tracking and progress",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "series-progress-updater",
                    "description": "Update series progress and tracking",
                    "priority": "medium",
                    "inputs": {
                      "series_data": "/absolute/path/to/series_data",
                      "book_completion": "from_previous_phases",
                      "update_scope": {
                        "completion_status": true,
                        "series_progression": true,
                        "cumulative_statistics": true,
                        "next_book_preparation": true
                      }
                    },
                    "outputs": {
                      "progress_updated": "series_tracking_updated",
                      "series_status": "books_completed_vs_planned",
                      "cumulative_stats": "series_wide_statistics",
                      "next_book_ready": "preparation_for_continuation"
                    },
                    "requirements": "Update all series tracking data",
                    "success_criteria": "Series progress accurately updated"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Progress updated",
                  "Series tracked"
                ]
              },
              {
                "phase": 6,
                "name": "Completion Certificate and Transition",
                "description": "Generate completion certificate and prepare transition",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "completion-certifier",
                    "description": "Generate book completion certificate and summary",
                    "priority": "high",
                    "inputs": {
                      "book_data": "from_all_phases",
                      "certificate_components": {
                        "completion_timestamp": true,
                        "quality_achievement": true,
                        "statistics_summary": true,
                        "key_milestones": true
                      },
                      "output_format": "formatted_markdown"
                    },
                    "outputs": {
                      "certificate_path": "/absolute/path/to/completion_certificate.md",
                      "achievement_summary": "book_accomplishments",
                      "statistics_report": "final_book_statistics",
                      "celebration_message": "completion_announcement"
                    },
                    "requirements": "Generate comprehensive completion documentation",
                    "success_criteria": "Certificate generated with all achievements"
                  },
                  {
                    "agent": "transition-planner",
                    "description": "Generate recommendations for next phase",
                    "priority": "medium",
                    "inputs": {
                      "series_status": "from_phase_5",
                      "book_completion": "current_book_data",
                      "planning_scope": {
                        "next_book_readiness": true,
                        "series_continuation": true,
                        "marketing_preparation": true,
                        "revision_suggestions": true
                      }
                    },
                    "outputs": {
                      "transition_plan": "next_phase_recommendations",
                      "next_actions": "prioritized_next_steps",
                      "continuation_ready": "ready_for_next_book",
                      "suggestions": "improvement_and_marketing_ideas"
                    },
                    "requirements": "Provide clear transition guidance",
                    "success_criteria": "Transition plan with actionable next steps"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "Completion certified",
                  "Transition planned"
                ]
              }
            ],
            "context": {
              "book_number": "[current_book_number]",
              "operation_type": "book_completion_and_archival",
              "paths": {
                "book_root": "/absolute/path/to/book_{N}",
                "archive_root": "/absolute/path/to/archives",
                "manuscript_output": "/absolute/path/to/manuscripts"
              }
            },
            "success_criteria": [
              "Book completion fully validated",
              "Final quality assurance passed",
              "Manuscript assembled with proper formatting",
              "Comprehensive archive created",
              "Series progress updated",
              "Completion certificate generated",
              "Transition to next phase prepared"
            ],
            "notes": "This plan implements comprehensive book completion with validation, assembly, archival, and transition preparation for seamless series continuation."
          },
          {
            "error": true,
            "coordinator": "book-complete-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot complete book",
            "blocking_issues": [
              "Not all chapters written",
              "Quality below 95 threshold",
              "Critical plot threads unresolved",
              "Missing required chapters"
            ],
            "remediation_steps": [
              "Complete remaining chapters",
              "Run smart-fix on low-quality chapters",
              "Resolve open plot threads",
              "Verify chapter count matches target"
            ],
            "suggested_commands": [
              "/novel:status",
              "/novel:next-chapter",
              "/novel:smart-fix [chapter]",
              "/novel:quality-check-cross all"
            ]
          }
        ],
        "validation_rules": [
          "book is ready for completion\",",
          "Prerequisites**:",
          "meet all completion criteria\",",
          "quality scores across chapters",
          "chapter count matches target\"",
          "all chapters complete and quality standards met\",",
          "complete narrative consistency\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex completion orchestration** (validation, assembly, archival, transition)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for book completion.",
          "archival scope needs",
          "quality scores across chapters",
          "prerequisites aren't met or validation fails, return"
        ],
        "validation_logic": [
          "quality scores across chapters",
          "Prerequisites**:",
          "book is ready for completion\",",
          "all chapters complete and quality standards met\",",
          "complete narrative consistency\","
        ],
        "business_rules": [
          "Determine archival scope needs",
          "Plan transition preparation"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "completion-validator",
        "series-progress-updater",
        "transition-planner",
        "metadata-generator",
        "manuscript-assembler",
        "continuity-final-checker",
        "archive-creator",
        "final-quality-validator",
        "completion-certifier"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1452,
      "line_count": 471
    },
    "chapter-planning-coordinator": {
      "file": ".claude\\agents\\chapter-planning-coordinator.md",
      "name": "chapter-planning-coordinator",
      "type": "coordinator",
      "lines": 304,
      "description": "Orchestrates chapter planning and outline generation through structured execution planning",
      "thinking": "Analyze chapter planning requirements - validate Bible and prerequisites, review previous content for continuity, design comprehensive chapter structure with scenes and progression, plan character appearances and plot advancement, ensure Bible compliance and quality standards. Return structured JSON execution plan for Main Claude to implement outline generation.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 304,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (304 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "error": true,
            "coordinator": "chapter-planning-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot plan chapter - prerequisites not met",
            "blocking_issues": [
              "Bible not found at expected location",
              "Previous chapter incomplete",
              "Entity dictionary missing"
            ],
            "remediation_steps": [
              "Run /novel:bible-create to generate Bible",
              "Complete previous chapter first",
              "Run /novel:context-sync to update entity dictionary"
            ],
            "suggested_commands": [
              "/novel:bible-create",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "Prerequisites**:",
          "outline meets all requirements\",",
          "outline quality and Bible compliance\",",
          "previous chapters for continuity",
          "characters appear logically",
          "Bible and prerequisites, review previous content for continuity, design comprehensive chapter structure with scenes and progression, plan character appearances and plot advancement, ensure Bible compliance and quality standards",
          "Bible exists and load it",
          "outline meets all quality standards\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [
          "tension"
        ],
        "error_handling": [
          "chapter planning logic** (structure, scenes, character placement)",
          "Response Format",
          "error cases** and provide recovery paths"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for chapter planning.",
          "scope (new chapter vs revision)",
          "previous chapters for continuity",
          "not ch001) is complete",
          "character involvement"
        ],
        "validation_logic": [
          "Bible and prerequisites, review previous content for continuity, design comprehensive chapter structure with scenes and progression, plan character appearances and plot advancement, ensure Bible compliance and quality standards. Return structured JSON execution plan for Main Claude to implement outline generation.",
          "previous chapters for continuity",
          "Prerequisites**:",
          "outline meets all requirements\",",
          "outline quality and Bible compliance\","
        ],
        "business_rules": [
          "validate Bible and prerequisites, review previous content for continuity, design comprehensive chapter structure with scenes and progression, plan character appearances and plot advancement, ensure Bible compliance and quality standards. Return structured JSON execution plan for Main Claude to implement outline generation.",
          "--",
          "Determine scope (new chapter vs revision)",
          "Determine character involvement",
          "Plan scene structure and flow",
          "Design conflict and resolution points"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "continuity-analyzer",
        "outline-validator",
        "context-loader",
        "outline-generator"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1074,
      "line_count": 304
    },
    "chapter-start-coordinator": {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "name": "chapter-start-coordinator",
      "type": "coordinator",
      "lines": 311,
      "description": "Orchestrates new chapter generation with quality validation",
      "thinking": "Analyze chapter generation requirements - evaluate project state, plan optimal agent sequence, determine parallel vs sequential execution, assess quality validation needs, and create comprehensive execution plan. Consider dependencies, error handling, and quality gates before planning.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 278,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 278"
        },
        {
          "type": "unicode_character",
          "line": 288,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 288"
        },
        {
          "type": "excessive_lines",
          "lines": 311,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (311 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/book_{N}/bible.yaml",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/",
          "{NNN}/outline.json",
          "{NNN}/content.md",
          "{NNN}/quality_report.json",
          "{\n            \"validation_report\": \"/absolute/path/to/ch{NNN}/entity_validation.json",
          "{\n      \"phase\": 2,\n      \"name\": \"Content Planning\",\n      \"description\": \"Generate detailed chapter outline\",\n      \"parallel\": false,\n      \"estimated_time\": \"60 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"outline-generator\",\n          \"description\": \"Generate comprehensive chapter outline from book structure\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"book_outline\": \"/absolute/path/to/book_{N}/outline.yaml",
          "{\n            \"chapter_outline\": \"/absolute/path/to/ch{NNN}/outline.json",
          "{\n      \"phase\": 3,\n      \"name\": \"Content Generation\",\n      \"description\": \"Generate chapter content from outline\",\n      \"parallel\": false,\n      \"estimated_time\": \"90 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"scene-generator\",\n          \"description\": \"Generate complete chapter narrative from outline\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_outline\": \"/absolute/path/to/ch{NNN}/outline.json",
          "{\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md",
          "{\n      \"phase\": 4,\n      \"name\": \"Quality Validation\",\n      \"description\": \"Validate content quality and compliance\",\n      \"parallel\": true,\n      \"estimated_time\": \"60 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"quality-scorer\",\n          \"description\": \"Score chapter quality against standards\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md",
          "{\n            \"quality_score\": \"/absolute/path/to/ch{NNN}/quality_report.json",
          "{\n          \"agent\": \"bible-compliance-validator\",\n          \"description\": \"Validate Bible compliance\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md",
          "{\n            \"compliance_report\": \"/absolute/path/to/ch{NNN}/bible_compliance.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Chapter Generation Pipeline",
            "coordinator": "chapter-start-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "mixed",
              "estimated_duration": "3-5 minutes",
              "complexity": "complex",
              "retry_strategy": "Retry content generation if quality < 95, max 2 attempts"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Pre-generation Setup",
                "description": "Validate prerequisites and setup chapter structure",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "entity-validator",
                    "description": "Validate entity consistency against dictionary before generation",
                    "priority": "high",
                    "inputs": {
                      "entity_dict": "/absolute/path/to/entity_dictionary.yaml",
                      "bible": "/absolute/path/to/bible.yaml"
                    },
                    "outputs": {
                      "validation_report": "/absolute/path/to/ch{NNN}/entity_validation.json"
                    },
                    "requirements": "Ensure all entity references are consistent with dictionary",
                    "success_criteria": "No critical entity violations found"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Entity validation passed"
                ]
              },
              {
                "phase": 2,
                "name": "Content Planning",
                "description": "Generate detailed chapter outline",
                "parallel": false,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "outline-generator",
                    "description": "Generate comprehensive chapter outline from book structure",
                    "priority": "high",
                    "inputs": {
                      "book_outline": "/absolute/path/to/book_{N}/outline.yaml",
                      "bible": "/absolute/path/to/bible.yaml",
                      "previous_chapters": "/absolute/path/to/chapters/ch{NNN-1}/"
                    },
                    "outputs": {
                      "chapter_outline": "/absolute/path/to/ch{NNN}/outline.json"
                    },
                    "requirements": "Create detailed scene-by-scene outline with character arcs and plot progression",
                    "success_criteria": "Complete outline with all required scenes and transitions"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Detailed outline generated"
                ]
              },
              {
                "phase": 3,
                "name": "Content Generation",
                "description": "Generate chapter content from outline",
                "parallel": false,
                "estimated_time": "90 seconds",
                "tasks": [
                  {
                    "agent": "scene-generator",
                    "description": "Generate complete chapter narrative from outline",
                    "priority": "high",
                    "inputs": {
                      "chapter_outline": "/absolute/path/to/ch{NNN}/outline.json",
                      "bible": "/absolute/path/to/bible.yaml",
                      "entity_dict": "/absolute/path/to/entity_dictionary.yaml"
                    },
                    "outputs": {
                      "chapter_content": "/absolute/path/to/ch{NNN}/content.md"
                    },
                    "requirements": "Generate high-quality narrative meeting 95+ quality standard",
                    "success_criteria": "Complete chapter with proper pacing and character development"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Chapter content generated"
                ]
              },
              {
                "phase": 4,
                "name": "Quality Validation",
                "description": "Validate content quality and compliance",
                "parallel": true,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "quality-scorer",
                    "description": "Score chapter quality against standards",
                    "priority": "high",
                    "inputs": {
                      "chapter_content": "/absolute/path/to/ch{NNN}/content.md",
                      "bible": "/absolute/path/to/bible.yaml"
                    },
                    "outputs": {
                      "quality_score": "/absolute/path/to/ch{NNN}/quality_report.json"
                    },
                    "requirements": "Score chapter for quality, must achieve 95+ for acceptance",
                    "success_criteria": "Quality score >= 95"
                  },
                  {
                    "agent": "bible-compliance-validator",
                    "description": "Validate Bible compliance",
                    "priority": "high",
                    "inputs": {
                      "chapter_content": "/absolute/path/to/ch{NNN}/content.md",
                      "bible": "/absolute/path/to/bible.yaml",
                      "entity_dict": "/absolute/path/to/entity_dictionary.yaml"
                    },
                    "outputs": {
                      "compliance_report": "/absolute/path/to/ch{NNN}/bible_compliance.json"
                    },
                    "requirements": "Validate complete Bible compliance",
                    "success_criteria": "100% Bible compliance achieved"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Quality score >= 95",
                  "Bible compliance = 100%"
                ]
              }
            ],
            "context": {
              "project": "[project name from context]",
              "book": "[book number]",
              "chapter": "[chapter number from arguments]",
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "bible": "/absolute/path/to/bible.yaml",
                "entity_dict": "/absolute/path/to/entity_dictionary.yaml",
                "chapter_dir": "/absolute/path/to/ch{NNN}/"
              }
            },
            "success_criteria": [
              "All phases completed successfully",
              "Quality score >= 95",
              "Bible compliance = 100%",
              "Chapter content generated and validated"
            ],
            "notes": "This plan implements the 10-step chapter generation pipeline through coordinated agent execution. Quality gates ensure 95+ standard before acceptance."
          },
          {
            "error": true,
            "coordinator": "chapter-start-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot proceed with chapter generation",
            "blocking_issues": [
              "Bible missing or invalid",
              "Entity dictionary not found",
              "Chapter number out of sequence"
            ],
            "remediation_steps": [
              "Run /novel:bible-create to generate Bible",
              "Run entity-dictionary-creator to setup entity tracking",
              "Verify chapter numbering sequence"
            ],
            "suggested_commands": [
              "/novel:bible-create",
              "/novel:entity-dict-create"
            ]
          }
        ],
        "validation_rules": [
          "Bible compliance\",",
          "all entity references are consistent with dictionary\",",
          "entity dictionary: `",
          "95+ standard before acceptance",
          "Prerequisites**:",
          "prerequisites and setup chapter structure\",",
          "chapter numbering sequence\"",
          "entity consistency against dictionary before generation\",",
          "complete Bible compliance\",",
          "content quality and compliance\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "handling, and quality gates before planning.",
          "complex orchestration logic** (analysis, decisions, sequencing)",
          "Response Format",
          "edge cases and validation** for chapter generation workflow",
          "Recovery**: Retry content generation if quality < 95 (max 2 attempts)"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "parallel vs sequential execution, assess quality validation needs, and create comprehensive execution plan. Consider dependencies, error handling, and quality gates before planning.",
          "invoked, perform analysis and return a structured execution plan for chapter generation.",
          "entity dictionary",
          "not chapter 1)",
          "if entity validation needed"
        ],
        "validation_logic": [
          "chapter number format and sequence",
          "entity dictionary: `.claude/data/projects/{project}/shared/entity_dictionary.yaml`",
          "Prerequisites**:",
          "prerequisites and setup chapter structure\",",
          "entity consistency against dictionary before generation\","
        ],
        "business_rules": [
          "evaluate project state, plan optimal agent sequence, determine parallel vs sequential execution, assess quality validation needs, and create comprehensive execution plan. Consider dependencies, error handling, and quality gates before planning.",
          "--",
          "Design content generation pipeline",
          "Select quality validation agents"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "entity-validator",
        "bible-compliance-validator",
        "quality-scorer",
        "scene-generator",
        "outline-generator"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1147,
      "line_count": 311
    },
    "context-sync-coordinator": {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "name": "context-sync-coordinator",
      "type": "coordinator",
      "lines": 360,
      "description": "Orchestrates quality-gated context synchronization and entity dictionary updates",
      "thinking": "Analyze context synchronization requirements - assess chapter quality thresholds, plan entity extraction and dictionary updates, design quality-gated learning strategy, coordinate parallel context synchronization, and ensure data integrity. Consider learning criteria, blocking conditions, and rollback mechanisms before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 327,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 327"
        },
        {
          "type": "unicode_character",
          "line": 337,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 337"
        },
        {
          "type": "excessive_lines",
          "lines": 360,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (360 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/context/"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Quality-Gated Context Synchronization Pipeline",
            "coordinator": "context-sync-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_with_parallel_sync",
              "estimated_duration": "30-45 seconds",
              "complexity": "moderate",
              "retry_strategy": "Retry failed sync operations, rollback on critical failures"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Quality Validation and Eligibility Assessment",
                "description": "Validate chapter quality and determine sync eligibility",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "quality-gate-validator",
                    "description": "Validate chapter quality scores and sync eligibility",
                    "priority": "high",
                    "inputs": {
                      "project_root": "/absolute/path/to/project",
                      "validation_mode": "quality_gated_learning",
                      "quality_criteria": {
                        "minimum_score": 95,
                        "bible_compliance": 100,
                        "critical_issues": 0,
                        "entity_consistency": "required"
                      }
                    },
                    "outputs": {
                      "eligible_chapters": "list_of_qualifying_chapters",
                      "blocking_issues": "quality_problems_found",
                      "eligibility_report": "detailed_assessment"
                    },
                    "requirements": "Identify chapters meeting quality criteria for learning",
                    "success_criteria": "Quality validation completed with eligible chapter identification"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Quality validation completed",
                  "Eligible chapters identified"
                ]
              },
              {
                "phase": 2,
                "name": "Entity Extraction and Dictionary Updates",
                "description": "Extract entities from eligible chapters and update dictionary",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "entity-dictionary-updater",
                    "description": "Extract entities from eligible chapters and update dictionary",
                    "priority": "high",
                    "inputs": {
                      "eligible_chapters": "from_phase_1",
                      "dictionary_path": "/absolute/path/to/entity_dictionary.yaml",
                      "extraction_mode": "incremental_update",
                      "safety_features": {
                        "backup_dictionary": true,
                        "atomic_updates": true,
                        "validation_checks": true
                      }
                    },
                    "outputs": {
                      "updated_dictionary": "enhanced_entity_dictionary",
                      "new_entities": "list_of_discovered_entities",
                      "update_report": "dictionary_change_summary"
                    },
                    "requirements": "Update entity dictionary with new/evolved entities",
                    "success_criteria": "Dictionary updated with validated entity information"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Entity dictionary updated",
                  "New entities integrated"
                ]
              },
              {
                "phase": 3,
                "name": "Context Synchronization",
                "description": "Synchronize specified context dimensions based on sync target",
                "parallel": true,
                "estimated_time": "12 seconds",
                "tasks": [
                  {
                    "agent": "characters-context-updater",
                    "description": "Update character development context from eligible chapters",
                    "priority": "high",
                    "inputs": {
                      "eligible_chapters": "from_phase_1",
                      "sync_target": "[arguments_filter]",
                      "context_type": "characters",
                      "update_mode": "incremental_learning"
                    },
                    "outputs": {
                      "character_context": "updated_character_development",
                      "relationship_map": "character_relationships",
                      "evolution_tracking": "character_progression"
                    },
                    "requirements": "Update character context if target includes characters",
                    "success_criteria": "Character context synchronized with eligible content",
                    "conditional": "sync_target includes 'characters' or 'all'"
                  },
                  {
                    "agent": "world-context-updater",
                    "description": "Update world-building context from eligible chapters",
                    "priority": "high",
                    "inputs": {
                      "eligible_chapters": "from_phase_1",
                      "sync_target": "[arguments_filter]",
                      "context_type": "world",
                      "update_mode": "incremental_learning"
                    },
                    "outputs": {
                      "world_context": "updated_world_building",
                      "location_details": "enhanced_locations",
                      "cultural_elements": "world_culture_info"
                    },
                    "requirements": "Update world context if target includes world",
                    "success_criteria": "World-building context synchronized with eligible content",
                    "conditional": "sync_target includes 'world' or 'all'"
                  },
                  {
                    "agent": "plot-context-updater",
                    "description": "Update plot progression context from eligible chapters",
                    "priority": "high",
                    "inputs": {
                      "eligible_chapters": "from_phase_1",
                      "sync_target": "[arguments_filter]",
                      "context_type": "plot",
                      "update_mode": "incremental_learning"
                    },
                    "outputs": {
                      "plot_context": "updated_plot_progression",
                      "thread_tracking": "active_plot_threads",
                      "pacing_analysis": "narrative_pacing_data"
                    },
                    "requirements": "Update plot context if target includes plot",
                    "success_criteria": "Plot progression context synchronized with eligible content",
                    "conditional": "sync_target includes 'plot' or 'all'"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Targeted context dimensions updated",
                  "Learning integration completed"
                ]
              },
              {
                "phase": 4,
                "name": "Sync Report Generation",
                "description": "Generate comprehensive synchronization report with metrics",
                "parallel": false,
                "estimated_time": "8 seconds",
                "tasks": [
                  {
                    "agent": "sync-reporter",
                    "description": "Generate comprehensive sync report with learning metrics",
                    "priority": "medium",
                    "inputs": {
                      "sync_results": "from_all_phases",
                      "report_mode": "comprehensive_sync_summary",
                      "metrics": {
                        "chapters_processed": "from_phase_1",
                        "entities_updated": "from_phase_2",
                        "contexts_synchronized": "from_phase_3"
                      }
                    },
                    "outputs": {
                      "sync_report": "comprehensive_learning_report",
                      "quality_summary": "quality_gate_results",
                      "recommendations": "next_steps_suggestions"
                    },
                    "requirements": "Generate detailed sync report with learning metrics",
                    "success_criteria": "Comprehensive sync report generated with actionable insights"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Sync report generated",
                  "Recommendations provided"
                ]
              }
            ],
            "context": {
              "project": "[project name from context]",
              "sync_target": "[arguments or 'all']",
              "operation_type": "quality_gated_context_sync",
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "entity_dictionary": "/absolute/path/to/entity_dictionary.yaml",
                "context_directory": "/absolute/path/to/context/"
              }
            },
            "success_criteria": [
              "Chapter quality validated against learning criteria",
              "Entity dictionary updated with new discoveries",
              "Context dimensions synchronized per target specification",
              "Comprehensive sync report generated with metrics",
              "Learning integration completed successfully"
            ],
            "notes": "This plan implements quality-gated context synchronization ensuring only high-quality content (>=95 score) contributes to system learning, with parallel context updates and comprehensive reporting."
          },
          {
            "error": true,
            "coordinator": "context-sync-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot synchronize context",
            "blocking_issues": [
              "No eligible chapters found (all below quality threshold)",
              "Entity dictionary not accessible",
              "Insufficient quality reports available"
            ],
            "remediation_steps": [
              "Run quality checks on chapters to improve scores",
              "Ensure entity dictionary exists and is writable",
              "Generate quality reports for all chapters"
            ],
            "suggested_commands": [
              "/novel:quality-check-individual",
              "/novel:smart-fix [chapter_number]",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "data integrity",
          "chapter quality scores and sync eligibility\",",
          "Prerequisites**:",
          "entity dictionary exists and is writable\",",
          "chapter quality and determine sync eligibility\",",
          "entity dictionary status"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "complex orchestration logic** (quality validation, entity extraction, learning coordination)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for context synchronization.",
          "sync scope and validation needs",
          "entity dictionary status",
          "sync eligibility\",",
          "target includes characters\","
        ],
        "validation_logic": [
          "data integrity. Consider learning criteria, blocking conditions, and rollback mechanisms before creating execution plan.",
          "entity dictionary status",
          "Prerequisites**:",
          "chapter quality and determine sync eligibility\",",
          "chapter quality scores and sync eligibility\","
        ],
        "business_rules": [
          "assess chapter quality thresholds, plan entity extraction and dictionary updates, design quality-gated learning strategy, coordinate parallel context synchronization, and ensure data integrity. Consider learning criteria, blocking conditions, and rollback mechanisms before creating execution plan.",
          "--",
          "Determine sync scope and validation needs"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "world-context-updater",
        "characters-context-updater",
        "sync-reporter",
        "quality-gate-validator",
        "entity-dictionary-updater",
        "plot-context-updater"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1336,
      "line_count": 360
    },
    "extend-series-coordinator": {
      "file": ".claude\\agents\\extend-series-coordinator.md",
      "name": "extend-series-coordinator",
      "type": "coordinator",
      "lines": 498,
      "description": "Orchestrates series extension beyond original planned length while maintaining consistency",
      "thinking": "Plan series extension strategy carefully - validate series readiness for expansion, design extension requirements gathering, analyze existing threads for expansion potential, plan new compelling plot threads, design organic world-building expansion, plan series bible updates with new phases, ensure consistency with existing content, and structure implementation pathway. Consider long-term series health.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 498,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (498 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Series Extension Planning Pipeline",
            "coordinator": "extend-series-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_with_interactive_planning",
              "estimated_duration": "180-240 seconds",
              "complexity": "very_high",
              "retry_strategy": "Preserve planning progress, refine as needed"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Extension Readiness Validation",
                "description": "Validate series is ready for extension",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "extension-validator",
                    "description": "Assess series readiness for expansion",
                    "priority": "critical",
                    "inputs": {
                      "series_path": "/absolute/path/to/series",
                      "validation_scope": {
                        "completion_status": true,
                        "thread_availability": true,
                        "consistency_check": true,
                        "ending_elements": true
                      },
                      "readiness_criteria": {
                        "minimum_completion": 60,
                        "active_threads_required": 3,
                        "no_series_ending_used": true
                      }
                    },
                    "outputs": {
                      "readiness_status": "extension_feasibility",
                      "completion_percentage": "original_phase_progress",
                      "available_threads": "expandable_plot_elements",
                      "extension_potential": "expansion_opportunity_assessment"
                    },
                    "requirements": "Series must be extensible without contradiction",
                    "success_criteria": "Extension validated as feasible"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Extension feasible",
                  "No blocking issues"
                ]
              },
              {
                "phase": 2,
                "name": "Extension Requirements Gathering",
                "description": "Gather detailed extension requirements",
                "parallel": false,
                "estimated_time": "25 seconds",
                "tasks": [
                  {
                    "agent": "requirements-gatherer",
                    "description": "Collect comprehensive extension requirements",
                    "priority": "high",
                    "inputs": {
                      "extension_parameters": "[from_arguments]",
                      "gathering_scope": {
                        "extension_size": "number_of_additional_books",
                        "motivation": "reason_for_extension",
                        "target_audience": "reader_expectations",
                        "market_factors": "commercial_considerations"
                      },
                      "interactive_prompts": {
                        "theme_evolution": "How should themes evolve?",
                        "character_growth": "Character development directions?",
                        "world_expansion": "New territories or concepts?",
                        "conflict_escalation": "Stakes and challenges?"
                      }
                    },
                    "outputs": {
                      "extension_scope": "detailed_expansion_parameters",
                      "creative_vision": "artistic_direction",
                      "market_alignment": "commercial_viability",
                      "requirements_doc": "comprehensive_extension_plan"
                    },
                    "requirements": "Gather complete extension requirements",
                    "success_criteria": "Requirements fully documented"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Requirements gathered",
                  "Vision clarified"
                ]
              },
              {
                "phase": 3,
                "name": "Thread Analysis and Expansion",
                "description": "Analyze existing threads and plan expansions",
                "parallel": false,
                "estimated_time": "35 seconds",
                "tasks": [
                  {
                    "agent": "thread-expansion-planner",
                    "description": "Analyze threads for expansion potential",
                    "priority": "critical",
                    "inputs": {
                      "existing_threads": "from_series_bible",
                      "analysis_scope": {
                        "unresolved_elements": true,
                        "expansion_hooks": true,
                        "character_potential": true,
                        "world_mysteries": true
                      },
                      "expansion_strategy": {
                        "thread_evolution": "natural_progression",
                        "new_complications": "fresh_challenges",
                        "deepening_mysteries": "layered_revelations"
                      }
                    },
                    "outputs": {
                      "thread_analysis": "expansion_opportunities",
                      "evolution_plan": "thread_development_roadmap",
                      "new_threads": "additional_plot_elements",
                      "integration_strategy": "weaving_old_and_new"
                    },
                    "requirements": "Identify all expansion opportunities",
                    "success_criteria": "Thread expansion strategy developed"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Threads analyzed",
                  "Expansion planned"
                ]
              },
              {
                "phase": 4,
                "name": "New Plot Thread Creation",
                "description": "Design compelling new plot threads",
                "parallel": false,
                "estimated_time": "40 seconds",
                "tasks": [
                  {
                    "agent": "plot-thread-architect",
                    "description": "Create new engaging plot threads",
                    "priority": "high",
                    "inputs": {
                      "extension_scope": "from_phase_2",
                      "thread_requirements": {
                        "compatibility": "with_existing_threads",
                        "originality": "fresh_perspectives",
                        "sustainability": "multi_book_potential",
                        "engagement": "reader_hooks"
                      },
                      "thread_types": {
                        "main_arc": "overarching_conflict",
                        "subplots": "supporting_threads",
                        "mysteries": "long_term_questions",
                        "relationships": "evolving_dynamics"
                      }
                    },
                    "outputs": {
                      "new_threads": "created_plot_elements",
                      "thread_bible": "detailed_thread_documentation",
                      "integration_map": "how_threads_connect",
                      "pacing_plan": "thread_distribution_across_books"
                    },
                    "requirements": "Create compelling, sustainable plot threads",
                    "success_criteria": "New threads designed and documented"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "New threads created",
                  "Integration mapped"
                ]
              },
              {
                "phase": 5,
                "name": "Character Arc Extension",
                "description": "Plan extended character development arcs",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "character-arc-extender",
                    "description": "Design extended character development",
                    "priority": "high",
                    "inputs": {
                      "existing_characters": "from_series_bible",
                      "extension_books": "from_phase_2",
                      "development_strategy": {
                        "growth_continuation": "natural_evolution",
                        "new_challenges": "character_tests",
                        "relationship_evolution": "dynamic_changes",
                        "revelation_planning": "backstory_reveals"
                      }
                    },
                    "outputs": {
                      "extended_arcs": "character_development_plans",
                      "new_characters": "additional_cast_members",
                      "relationship_map": "evolving_connections",
                      "arc_milestones": "key_development_points"
                    },
                    "requirements": "Plan believable character evolution",
                    "success_criteria": "Character arcs extended naturally"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Arcs extended",
                  "Development planned"
                ]
              },
              {
                "phase": 6,
                "name": "World-Building Expansion",
                "description": "Expand world organically with new elements",
                "parallel": false,
                "estimated_time": "35 seconds",
                "tasks": [
                  {
                    "agent": "world-expansion-architect",
                    "description": "Design organic world expansion",
                    "priority": "high",
                    "inputs": {
                      "existing_world": "from_series_bible",
                      "expansion_needs": "from_new_threads",
                      "world_elements": {
                        "geography": "new_locations",
                        "culture": "societies_and_customs",
                        "history": "revealed_backstory",
                        "systems": "magic_technology_politics"
                      }
                    },
                    "outputs": {
                      "expanded_world": "enhanced_world_building",
                      "location_guide": "new_settings_documentation",
                      "cultural_elements": "additional_world_details",
                      "consistency_map": "integration_with_existing"
                    },
                    "requirements": "Expand world while maintaining consistency",
                    "success_criteria": "World expanded organically"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "World expanded",
                  "Consistency maintained"
                ]
              },
              {
                "phase": 7,
                "name": "Series Bible Update",
                "description": "Update series bible with extension plans",
                "parallel": false,
                "estimated_time": "40 seconds",
                "tasks": [
                  {
                    "agent": "bible-updater",
                    "description": "Comprehensively update series bible",
                    "priority": "critical",
                    "inputs": {
                      "existing_bible": "/absolute/path/to/series_bible.yaml",
                      "extension_data": "from_all_phases",
                      "update_sections": {
                        "series_structure": "new_book_count",
                        "plot_threads": "expanded_storylines",
                        "character_arcs": "extended_development",
                        "world_building": "expanded_universe",
                        "book_summaries": "new_book_outlines"
                      }
                    },
                    "outputs": {
                      "updated_bible": "enhanced_series_bible",
                      "bible_path": "/absolute/path/to/series_bible_extended.yaml",
                      "change_log": "bible_modification_summary",
                      "validation_report": "consistency_verification"
                    },
                    "requirements": "Update bible comprehensively with all extensions",
                    "success_criteria": "Bible updated with complete extension plan"
                  }
                ],
                "dependencies": [
                  "Phase 6"
                ],
                "success_criteria": [
                  "Bible updated",
                  "Extensions documented"
                ]
              },
              {
                "phase": 8,
                "name": "Implementation Roadmap",
                "description": "Create detailed implementation plan",
                "parallel": false,
                "estimated_time": "25 seconds",
                "tasks": [
                  {
                    "agent": "implementation-planner",
                    "description": "Generate extension implementation roadmap",
                    "priority": "high",
                    "inputs": {
                      "extension_plan": "from_all_phases",
                      "roadmap_components": {
                        "book_outlines": "high_level_summaries",
                        "milestones": "key_delivery_points",
                        "dependencies": "sequential_requirements",
                        "timeline": "realistic_schedule"
                      }
                    },
                    "outputs": {
                      "implementation_roadmap": "detailed_execution_plan",
                      "roadmap_path": "/absolute/path/to/extension_roadmap.md",
                      "next_actions": "immediate_next_steps",
                      "success_metrics": "extension_success_criteria"
                    },
                    "requirements": "Create actionable implementation plan",
                    "success_criteria": "Roadmap ready for execution"
                  }
                ],
                "dependencies": [
                  "Phase 7"
                ],
                "success_criteria": [
                  "Roadmap created",
                  "Ready to implement"
                ]
              }
            ],
            "context": {
              "extension_size": "[number_of_additional_books]",
              "operation_type": "series_extension_planning",
              "paths": {
                "series_root": "/absolute/path/to/series",
                "series_bible": "/absolute/path/to/series_bible.yaml",
                "extension_docs": "/absolute/path/to/extension_plans/"
              }
            },
            "success_criteria": [
              "Extension feasibility validated",
              "Requirements comprehensively gathered",
              "Existing threads analyzed for expansion",
              "New compelling threads created",
              "Character arcs naturally extended",
              "World expanded organically",
              "Series bible updated with extensions",
              "Implementation roadmap ready"
            ],
            "notes": "This plan implements comprehensive series extension with careful consistency maintenance, organic expansion, and detailed implementation planning."
          },
          {
            "error": true,
            "coordinator": "extend-series-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot extend series",
            "blocking_issues": [
              "Project is not a series type",
              "Original phase insufficiently complete",
              "Series ending already implemented",
              "No expandable threads available"
            ],
            "remediation_steps": [
              "Verify project type is series",
              "Complete more of original plan first",
              "Review ending elements for reversal",
              "Identify expansion opportunities"
            ],
            "suggested_commands": [
              "/novel:status",
              "/novel:bible-view",
              "/novel:next-book",
              "/novel:standup"
            ]
          }
        ],
        "validation_rules": [
          "project type is \"series\"",
          "themes evolve?\",",
          "Prerequisites**:",
          "series readiness for expansion, design extension requirements gathering, analyze existing threads for expansion potential, plan new compelling plot threads, design organic world-building expansion, plan series bible updates with new phases, ensure consistency with existing content, and structure implementation pathway",
          "series bible and current progression",
          "be extensible without contradiction\",",
          "series is ready for extension\",",
          "project type is series\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex extension orchestration** (planning, consistency, expansion strategy)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for series extension.",
          "extension motivation and goals",
          "series bible and current progression",
          "prerequisites aren't met or validation fails, return"
        ],
        "validation_logic": [
          "series readiness for expansion, design extension requirements gathering, analyze existing threads for expansion potential, plan new compelling plot threads, design organic world-building expansion, plan series bible updates with new phases, ensure consistency with existing content, and structure implementation pathway. Consider long-term series health.",
          "project type is \"series\"",
          "series bible and current progression",
          "Prerequisites**:",
          "series is ready for extension\","
        ],
        "business_rules": [
          "--",
          "Comprehensive expansion planning",
          "Bible and documentation updates"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "thread-expansion-planner",
        "world-expansion-architect",
        "extension-validator",
        "character-arc-extender",
        "requirements-gatherer",
        "bible-updater",
        "plot-thread-architect",
        "implementation-planner"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1553,
      "line_count": 498
    },
    "github-sync-coordinator": {
      "file": ".claude\\agents\\github-sync-coordinator.md",
      "name": "github-sync-coordinator",
      "type": "coordinator",
      "lines": 440,
      "description": "Manages synchronization of novel content to GitHub Issues as persistent database",
      "thinking": "Plan GitHub synchronization strategy - verify authentication and repository access, determine sync mode from arguments (incremental vs full), design API rate limit management, plan content formatting with metadata, structure Issue mapping tracking, and prepare recovery instructions for failures. Consider batch efficiency and quota conservation.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 175,
          "char": "📖",
          "ord": 128214,
          "message": "Unicode character '📖' found at line 175"
        },
        {
          "type": "excessive_lines",
          "lines": 440,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (440 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "GitHub Issues Synchronization Pipeline",
            "coordinator": "github-sync-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "batched_api_operations_with_recovery",
              "estimated_duration": "60-180 seconds",
              "complexity": "moderate",
              "retry_strategy": "Resume from last successful sync point",
              "api_management": "Rate limit aware with backoff"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Environment Validation",
                "description": "Validate GitHub CLI and repository access",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "github-validator",
                    "description": "Verify GitHub CLI and authentication",
                    "priority": "critical",
                    "inputs": {
                      "validation_checks": {
                        "cli_installation": "gh --version",
                        "authentication": "gh auth status",
                        "repository_access": "gh repo view --json name,owner",
                        "permissions": "write_access_required"
                      }
                    },
                    "outputs": {
                      "github_ready": "cli_and_auth_validated",
                      "repository_info": "owner_and_repo_name",
                      "api_quota": "remaining_api_calls",
                      "access_level": "permission_verification"
                    },
                    "requirements": "GitHub CLI authenticated with write access",
                    "success_criteria": "GitHub environment ready for sync"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "GitHub validated",
                  "Repository accessible"
                ]
              },
              {
                "phase": 2,
                "name": "Sync Scope Determination",
                "description": "Determine what content to sync",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "sync-scope-analyzer",
                    "description": "Analyze sync requirements and existing state",
                    "priority": "high",
                    "inputs": {
                      "sync_arguments": "[parsed_arguments]",
                      "project_path": "/absolute/path/to/project",
                      "scope_analysis": {
                        "target_chapters": "from_arguments",
                        "sync_mode": "incremental_or_full",
                        "existing_issues": "check_current_state",
                        "diff_detection": "changed_content_only"
                      }
                    },
                    "outputs": {
                      "sync_targets": "list_of_content_to_sync",
                      "sync_strategy": "incremental_or_full_replacement",
                      "issue_mapping": "chapter_to_issue_numbers",
                      "operation_count": "estimated_api_calls"
                    },
                    "requirements": "Determine exact sync scope and strategy",
                    "success_criteria": "Sync scope defined with strategy"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Scope determined",
                  "Strategy selected"
                ]
              },
              {
                "phase": 3,
                "name": "Content Preparation",
                "description": "Prepare content for GitHub Issues format",
                "parallel": true,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "bible-formatter",
                    "description": "Format Bible content for Issue #1",
                    "priority": "high",
                    "inputs": {
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "formatting": {
                        "title": "📖 Series Bible - [Project Name]",
                        "labels": [
                          "bible",
                          "configuration",
                          "series"
                        ],
                        "metadata": true,
                        "markdown_format": true
                      }
                    },
                    "outputs": {
                      "formatted_bible": "issue_ready_bible_content",
                      "bible_metadata": "version_and_timestamp",
                      "issue_body": "complete_bible_issue_content"
                    },
                    "requirements": "Format Bible as comprehensive Issue",
                    "success_criteria": "Bible formatted for Issue #1",
                    "conditional": "bible_in_sync_scope"
                  },
                  {
                    "agent": "chapter-formatter",
                    "description": "Format chapter content for Issues",
                    "priority": "high",
                    "inputs": {
                      "chapters_to_sync": "from_phase_2",
                      "formatting_template": {
                        "title": "Chapter {N}: {Title}",
                        "labels": [
                          "chapter",
                          "content",
                          "book-{B}"
                        ],
                        "metadata_header": true,
                        "quality_scores": true,
                        "word_count": true
                      }
                    },
                    "outputs": {
                      "formatted_chapters": "issue_ready_chapter_content",
                      "chapter_metadata": "quality_and_statistics",
                      "issue_bodies": "complete_chapter_issues"
                    },
                    "requirements": "Format all chapters for Issues",
                    "success_criteria": "Chapters formatted with metadata"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Content formatted",
                  "Metadata included"
                ]
              },
              {
                "phase": 4,
                "name": "Issue Synchronization",
                "description": "Create or update GitHub Issues",
                "parallel": false,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "issue-synchronizer",
                    "description": "Sync content to GitHub Issues with batching",
                    "priority": "critical",
                    "inputs": {
                      "formatted_content": "from_phase_3",
                      "sync_strategy": "from_phase_2",
                      "batching": {
                        "batch_size": 5,
                        "rate_limit_buffer": 10,
                        "retry_on_429": true,
                        "backoff_strategy": "exponential"
                      },
                      "operations": {
                        "create_missing": true,
                        "update_existing": true,
                        "preserve_comments": true,
                        "update_labels": true
                      }
                    },
                    "outputs": {
                      "sync_results": "created_and_updated_issues",
                      "issue_numbers": "chapter_to_issue_mapping",
                      "sync_statistics": "operations_performed",
                      "api_usage": "quota_consumed"
                    },
                    "requirements": "Sync all content respecting API limits",
                    "success_criteria": "All content synchronized to Issues"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Issues synced",
                  "Mapping recorded"
                ]
              },
              {
                "phase": 5,
                "name": "Mapping and State Update",
                "description": "Update local tracking of Issue mappings",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "mapping-updater",
                    "description": "Update local Issue number mappings",
                    "priority": "high",
                    "inputs": {
                      "issue_mapping": "from_phase_4",
                      "mapping_file": ".github_sync_map.json",
                      "update_scope": {
                        "chapter_mappings": true,
                        "sync_timestamps": true,
                        "content_hashes": true,
                        "sync_history": true
                      }
                    },
                    "outputs": {
                      "mapping_updated": "issue_tracking_saved",
                      "mapping_path": "/absolute/path/to/sync_map.json",
                      "sync_state": "current_synchronization_status",
                      "next_sync_info": "incremental_sync_preparation"
                    },
                    "requirements": "Maintain accurate Issue mappings",
                    "success_criteria": "Mappings updated and persisted"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Mappings saved",
                  "State updated"
                ]
              },
              {
                "phase": 6,
                "name": "Sync Verification and Reporting",
                "description": "Verify sync success and generate report",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "sync-verifier",
                    "description": "Verify sync completion and generate report",
                    "priority": "medium",
                    "inputs": {
                      "sync_results": "from_phase_4",
                      "verification_checks": {
                        "issue_existence": true,
                        "content_integrity": true,
                        "metadata_presence": true,
                        "label_accuracy": true
                      },
                      "report_format": "detailed_markdown"
                    },
                    "outputs": {
                      "verification_status": "sync_success_validation",
                      "sync_report": "comprehensive_sync_summary",
                      "report_path": "/absolute/path/to/sync_report.md",
                      "issue_urls": "direct_links_to_issues"
                    },
                    "requirements": "Verify and document sync results",
                    "success_criteria": "Sync verified and report generated"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "Sync verified",
                  "Report generated"
                ]
              }
            ],
            "recovery_strategy": {
              "failure_points": [
                "api_rate_limit",
                "network_error",
                "auth_failure"
              ],
              "recovery_procedures": {
                "api_rate_limit": "Wait and retry with backoff",
                "network_error": "Resume from last successful Issue",
                "auth_failure": "Re-authenticate and retry"
              },
              "state_preservation": "Save progress for resume capability"
            },
            "context": {
              "sync_scope": "[chapters_from_arguments]",
              "operation_type": "github_issues_synchronization",
              "paths": {
                "project_root": "/absolute/path/to/project",
                "sync_map": "/absolute/path/to/.github_sync_map.json",
                "sync_report": "/absolute/path/to/sync_report.md"
              }
            },
            "success_criteria": [
              "GitHub environment validated and ready",
              "Sync scope determined with strategy",
              "Content formatted with complete metadata",
              "All Issues created or updated successfully",
              "API quota managed efficiently",
              "Local mappings updated for tracking",
              "Sync verified with comprehensive report"
            ],
            "notes": "This plan implements GitHub Issues synchronization with API quota management, differential sync capability, and comprehensive error recovery mechanisms."
          },
          {
            "error": true,
            "coordinator": "github-sync-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot sync to GitHub",
            "blocking_issues": [
              "GitHub CLI not installed or authenticated",
              "No repository access or permissions",
              "API rate limit exceeded",
              "No content to sync"
            ],
            "remediation_steps": [
              "Install GitHub CLI: gh auth login",
              "Verify repository permissions",
              "Wait for API quota reset",
              "Generate content before syncing"
            ],
            "suggested_commands": [
              "gh auth status",
              "gh repo view",
              "/novel:status",
              "/novel:chapter-start 1"
            ]
          }
        ],
        "validation_rules": [
          "GitHub CLI and authentication\",",
          "GitHub CLI and repository access\",",
          "existing sync state if available",
          "Prerequisites**:",
          "sync completion and generate report\",",
          "repository permissions\",",
          "and document sync results\",",
          "authentication and repository access, determine sync mode from arguments (incremental vs full), design API rate limit management, plan content formatting with metadata, structure Issue mapping tracking, and prepare recovery instructions for failures",
          "sync success and generate report\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex sync orchestration** (API management, differential sync, recovery planning)",
          "recovery and retry mechanisms",
          "logs: Failure documentation",
          "recovery mechanisms.\"",
          "Response Format"
        ],
        "retry_logic": [
          "max_retries: 2"
        ],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "sync mode from arguments (incremental vs full), design API rate limit management, plan content formatting with metadata, structure Issue mapping tracking, and prepare recovery instructions for failures. Consider batch efficiency and quota conservation.",
          "invoked, perform analysis and return a structured execution plan for GitHub synchronization.",
          "sync mode (incremental vs full replacement)",
          "existing sync state if available",
          "what content to sync\","
        ],
        "validation_logic": [
          "authentication and repository access, determine sync mode from arguments (incremental vs full), design API rate limit management, plan content formatting with metadata, structure Issue mapping tracking, and prepare recovery instructions for failures. Consider batch efficiency and quota conservation.",
          "existing sync state if available",
          "Prerequisites**:",
          "GitHub CLI and repository access\",",
          "GitHub CLI and authentication\","
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "sync-verifier",
        "mapping-updater",
        "github-validator",
        "chapter-formatter",
        "bible-formatter",
        "sync-scope-analyzer",
        "issue-synchronizer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1463,
      "line_count": 440
    },
    "next-book-coordinator": {
      "file": ".claude\\agents\\next-book-coordinator.md",
      "name": "next-book-coordinator",
      "type": "coordinator",
      "lines": 435,
      "description": "Orchestrates creation of next book in series with transition planning and continuity",
      "thinking": "Plan next book creation strategy - validate series state and progression, analyze previous book end state for continuity, design smooth transition with appropriate time gap, plan thread evolution and character development, design book-specific bible generation aligned with series, and structure initialization planning. Consider long-term series coherence.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 435,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (435 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{\n            \"book_bible\": \"complete_book_bible_yaml\",\n            \"bible_path\": \"/absolute/path/to/book_{N}/bible.yaml",
          "{\n            \"book_outline\": \"detailed_chapter_by_chapter_plan\",\n            \"outline_path\": \"/absolute/path/to/book_{N}/outline.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Next Book in Series Creation Pipeline",
            "coordinator": "next-book-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_with_continuity_preservation",
              "estimated_duration": "180-240 seconds",
              "complexity": "high",
              "retry_strategy": "Preserve completed phases, retry from failure point"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Series State Validation",
                "description": "Validate series readiness for next book",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "series-state-validator",
                    "description": "Validate series state and calculate next book number",
                    "priority": "critical",
                    "inputs": {
                      "project_path": "/absolute/path/to/project",
                      "validation_scope": {
                        "series_bible_check": true,
                        "book_count_analysis": true,
                        "previous_completion": true,
                        "series_length_check": true
                      }
                    },
                    "outputs": {
                      "series_status": "ready_for_next_book",
                      "next_book_number": "calculated_book_number",
                      "books_completed": "count_of_finished_books",
                      "series_progress": "percentage_complete"
                    },
                    "requirements": "Series must be ready for continuation",
                    "success_criteria": "Series validated, next book number determined"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Series validated",
                  "Next book number calculated"
                ]
              },
              {
                "phase": 2,
                "name": "Previous Book Analysis",
                "description": "Extract end state and unresolved threads",
                "parallel": false,
                "estimated_time": "25 seconds",
                "tasks": [
                  {
                    "agent": "book-end-state-analyzer",
                    "description": "Analyze previous book ending for continuity",
                    "priority": "critical",
                    "inputs": {
                      "previous_book_path": "/absolute/path/to/book_{N-1}",
                      "analysis_scope": {
                        "character_positions": true,
                        "unresolved_threads": true,
                        "world_state_changes": true,
                        "emotional_state": true,
                        "cliffhangers": true
                      }
                    },
                    "outputs": {
                      "end_state_summary": "comprehensive_book_ending",
                      "character_states": "character_positions_and_development",
                      "open_threads": "unresolved_plot_elements",
                      "world_evolution": "world_changes_to_carry_forward"
                    },
                    "requirements": "Complete understanding of previous book ending",
                    "success_criteria": "End state fully analyzed for continuity"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "End state extracted",
                  "Continuity points identified"
                ]
              },
              {
                "phase": 3,
                "name": "Transition Planning",
                "description": "Design book-to-book transition strategy",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "transition-continuity-reviewer",
                    "description": "Plan smooth transition between books",
                    "priority": "high",
                    "inputs": {
                      "end_state": "from_phase_2",
                      "series_bible": "/absolute/path/to/series_bible.yaml",
                      "transition_parameters": {
                        "time_gap": "determine_appropriate_gap",
                        "character_evolution": "plan_development_arcs",
                        "world_progression": "plan_world_changes",
                        "thread_management": "resolve_vs_continue"
                      }
                    },
                    "outputs": {
                      "transition_plan": "detailed_bridge_strategy",
                      "time_gap_decision": "temporal_distance_between_books",
                      "evolution_roadmap": "character_and_world_changes",
                      "thread_strategy": "which_threads_resolve_continue"
                    },
                    "requirements": "Create compelling transition maintaining momentum",
                    "success_criteria": "Transition plan approved and documented"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Transition planned",
                  "Evolution mapped"
                ]
              },
              {
                "phase": 4,
                "name": "Book Bible Generation",
                "description": "Create book-specific bible aligned with series",
                "parallel": false,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "bible-architect",
                    "description": "Generate comprehensive book bible",
                    "priority": "critical",
                    "inputs": {
                      "series_bible": "/absolute/path/to/series_bible.yaml",
                      "book_number": "from_phase_1",
                      "transition_plan": "from_phase_3",
                      "bible_components": {
                        "metadata": "book_specific_details",
                        "plot_structure": "three_act_outline",
                        "character_arcs": "evolution_from_previous",
                        "world_updates": "progressed_world_state",
                        "themes": "book_specific_themes"
                      }
                    },
                    "outputs": {
                      "book_bible": "complete_book_bible_yaml",
                      "bible_path": "/absolute/path/to/book_{N}/bible.yaml",
                      "validation_report": "bible_quality_assessment",
                      "alignment_score": "series_coherence_rating"
                    },
                    "requirements": "Bible must align with series while being book-specific",
                    "success_criteria": "Book bible generated with series alignment"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Bible created",
                  "Series alignment verified"
                ]
              },
              {
                "phase": 5,
                "name": "Book Structure Initialization",
                "description": "Create book directory structure and foundation files",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "book-structure-initializer",
                    "description": "Initialize complete book structure",
                    "priority": "high",
                    "inputs": {
                      "book_path": "/absolute/path/to/book_{N}",
                      "initialization_scope": {
                        "directories": [
                          "chapters",
                          "context",
                          "outlines"
                        ],
                        "foundation_files": [
                          "bible.yaml",
                          "metadata.json"
                        ],
                        "context_inheritance": "from_previous_book",
                        "entity_dictionary": "evolved_from_previous"
                      }
                    },
                    "outputs": {
                      "structure_created": "directory_tree_initialized",
                      "files_created": "foundation_files_list",
                      "context_migrated": "inherited_context_elements",
                      "initialization_report": "setup_completion_summary"
                    },
                    "requirements": "Complete book structure ready for chapters",
                    "success_criteria": "Book structure initialized with all components"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Structure created",
                  "Foundation ready"
                ]
              },
              {
                "phase": 6,
                "name": "Book Outline Creation",
                "description": "Generate detailed book outline with chapter breakdown",
                "parallel": false,
                "estimated_time": "45 seconds",
                "tasks": [
                  {
                    "agent": "book-outline-architect",
                    "description": "Create comprehensive book outline",
                    "priority": "high",
                    "inputs": {
                      "book_bible": "from_phase_4",
                      "transition_plan": "from_phase_3",
                      "outline_parameters": {
                        "chapter_count": "from_bible_target",
                        "pacing_strategy": "genre_appropriate",
                        "climax_positioning": "structural_beats",
                        "thread_distribution": "subplot_weaving"
                      }
                    },
                    "outputs": {
                      "book_outline": "detailed_chapter_by_chapter_plan",
                      "outline_path": "/absolute/path/to/book_{N}/outline.md",
                      "pacing_map": "tension_and_pacing_visualization",
                      "thread_tracker": "plot_thread_distribution"
                    },
                    "requirements": "Outline must support compelling narrative arc",
                    "success_criteria": "Book outline created with chapter breakdown"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "Outline complete",
                  "Chapters mapped"
                ]
              },
              {
                "phase": 7,
                "name": "Transition Documentation",
                "description": "Document transition for continuity reference",
                "parallel": false,
                "estimated_time": "25 seconds",
                "tasks": [
                  {
                    "agent": "transition-documenter",
                    "description": "Create comprehensive transition documentation",
                    "priority": "medium",
                    "inputs": {
                      "transition_plan": "from_phase_3",
                      "end_state": "from_phase_2",
                      "new_book_setup": "from_phases_4_5_6",
                      "documentation_format": "detailed_markdown"
                    },
                    "outputs": {
                      "transition_doc": "book_to_book_transition_guide",
                      "doc_path": "/absolute/path/to/transition_{N-1}_to_{N}.md",
                      "continuity_checklist": "verification_points",
                      "handoff_report": "ready_for_writing_summary"
                    },
                    "requirements": "Complete documentation for smooth continuation",
                    "success_criteria": "Transition fully documented for reference"
                  }
                ],
                "dependencies": [
                  "Phase 6"
                ],
                "success_criteria": [
                  "Documentation complete",
                  "Handoff ready"
                ]
              }
            ],
            "context": {
              "operation_type": "series_book_continuation",
              "paths": {
                "series_root": "/absolute/path/to/project",
                "series_bible": "/absolute/path/to/series_bible.yaml",
                "previous_book": "/absolute/path/to/book_{N-1}",
                "new_book": "/absolute/path/to/book_{N}"
              }
            },
            "success_criteria": [
              "Series state validated and ready for next book",
              "Previous book end state analyzed for continuity",
              "Transition strategy planned with evolution roadmap",
              "Book-specific bible generated with series alignment",
              "Complete book structure initialized",
              "Detailed outline created with chapter breakdown",
              "Transition documented for continuity reference",
              "New book ready for chapter generation"
            ],
            "notes": "This plan implements comprehensive next book creation with careful transition planning, continuity preservation, and series coherence maintenance throughout."
          },
          {
            "error": true,
            "coordinator": "next-book-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot create next book",
            "blocking_issues": [
              "Project is not a series (standalone book)",
              "Previous book not sufficiently complete",
              "Series already at planned length",
              "Series bible missing or incomplete"
            ],
            "remediation_steps": [
              "Verify project type is series",
              "Complete previous book first",
              "Consider extending series if needed",
              "Create or complete series bible"
            ],
            "suggested_commands": [
              "/novel:status",
              "/novel:book-complete",
              "/novel:extend-series",
              "/novel:bible-view"
            ]
          }
        ],
        "validation_rules": [
          "project type is \"series\"",
          "be ready for continuation\",",
          "series readiness for next book\",",
          "Prerequisites**:",
          "series state and progression, analyze previous book end state for continuity, design smooth transition with appropriate time gap, plan thread evolution and character development, design book-specific bible generation aligned with series, and structure initialization planning",
          "align with series while being book-specific\",",
          "series state and calculate next book number\",",
          "support compelling narrative arc\",",
          "project type is series\",",
          "series bible completeness"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex series orchestration** (continuity, transition, evolution planning)",
          "point\"",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for next book creation.",
          "transition and evolution needs",
          "series bible completeness",
          "prerequisites aren't met or validation fails, return"
        ],
        "validation_logic": [
          "series state and progression, analyze previous book end state for continuity, design smooth transition with appropriate time gap, plan thread evolution and character development, design book-specific bible generation aligned with series, and structure initialization planning. Consider long-term series coherence.",
          "project type is \"series\"",
          "series bible completeness",
          "Prerequisites**:",
          "series readiness for next book\","
        ],
        "business_rules": [
          "Determine transition and evolution needs",
          "Plan continuity preservation strategy"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "book-outline-architect",
        "bible-architect",
        "series-state-validator",
        "transition-documenter",
        "book-end-state-analyzer",
        "transition-continuity-reviewer",
        "book-structure-initializer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1453,
      "line_count": 435
    },
    "next-chapter-coordinator": {
      "file": ".claude\\agents\\next-chapter-coordinator.md",
      "name": "next-chapter-coordinator",
      "type": "coordinator",
      "lines": 396,
      "description": "Orchestrates automatic next chapter generation with smart numbering",
      "thinking": "Plan next chapter generation strategy - determine next chapter number by scanning existing chapters, validate previous chapter quality and completion status, design generation delegation with proper context, and ensure narrative continuity from previous ending. Consider progress tracking and book completion detection.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 396,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (396 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Automatic Next Chapter Generation Pipeline",
            "coordinator": "next-chapter-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_validation_and_generation",
              "estimated_duration": "120-180 seconds",
              "complexity": "moderate",
              "retry_strategy": "Retry generation if quality threshold not met"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Chapter Number Determination",
                "description": "Scan existing chapters and calculate next number",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "chapter-scanner",
                    "description": "Find highest existing chapter number",
                    "priority": "critical",
                    "inputs": {
                      "scan_pattern": "/absolute/path/to/chapters/ch*/content.md",
                      "extraction_mode": "chapter_number_detection",
                      "validation_checks": {
                        "sequence_continuity": true,
                        "missing_chapters": true,
                        "completion_status": true
                      }
                    },
                    "outputs": {
                      "highest_chapter": "current_highest_number",
                      "chapter_list": "all_existing_chapters",
                      "next_number": "calculated_next_chapter",
                      "formatted_number": "ch{NNN}_format"
                    },
                    "requirements": "Determine correct next chapter number",
                    "success_criteria": "Next chapter number calculated with proper formatting"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Next chapter number determined",
                  "Sequence validated"
                ]
              },
              {
                "phase": 2,
                "name": "Previous Chapter Validation",
                "description": "Validate previous chapter completion and quality",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "previous-chapter-validator",
                    "description": "Check previous chapter status and quality",
                    "priority": "high",
                    "inputs": {
                      "previous_chapter": "from_phase_1_highest",
                      "validation_scope": {
                        "completion_check": true,
                        "quality_threshold": 85,
                        "content_validation": true,
                        "ending_analysis": true
                      },
                      "chapter_path": "/absolute/path/to/previous/chapter/"
                    },
                    "outputs": {
                      "validation_status": "previous_chapter_ready",
                      "quality_score": "previous_chapter_quality",
                      "ending_context": "chapter_ending_for_continuity",
                      "continuation_hooks": "narrative_momentum_elements"
                    },
                    "requirements": "Previous chapter must be complete and quality acceptable",
                    "success_criteria": "Previous chapter validated for continuation"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Previous chapter validated",
                  "Continuity context loaded"
                ]
              },
              {
                "phase": 3,
                "name": "Book Progress Assessment",
                "description": "Check book progress and completion status",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "progress-tracker",
                    "description": "Assess book progress against targets",
                    "priority": "medium",
                    "inputs": {
                      "current_chapter_count": "from_phase_1",
                      "next_chapter_number": "from_phase_1",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "progress_checks": {
                        "target_chapters": "from_bible",
                        "completion_threshold": "within_target_range",
                        "pacing_analysis": true
                      }
                    },
                    "outputs": {
                      "progress_status": "book_progress_percentage",
                      "chapters_remaining": "to_target_completion",
                      "completion_flag": "is_this_final_chapter",
                      "pacing_assessment": "on_track_or_adjustment_needed"
                    },
                    "requirements": "Assess if book ready for next chapter",
                    "success_criteria": "Progress assessed, continuation confirmed"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Progress tracked",
                  "Continuation approved"
                ]
              },
              {
                "phase": 4,
                "name": "Generation Delegation Planning",
                "description": "Prepare delegation to chapter-start-coordinator",
                "parallel": false,
                "estimated_time": "5 seconds",
                "tasks": [
                  {
                    "agent": "delegation-planner",
                    "description": "Prepare comprehensive generation delegation",
                    "priority": "critical",
                    "inputs": {
                      "chapter_number": "from_phase_1",
                      "continuity_context": "from_phase_2",
                      "delegation_target": "chapter-start-coordinator",
                      "delegation_parameters": {
                        "chapter_number": "calculated_next",
                        "continuity_requirements": "from_previous_ending",
                        "quality_target": 95,
                        "generation_mode": "automatic_sequential"
                      }
                    },
                    "outputs": {
                      "delegation_plan": "chapter_start_invocation",
                      "parameters_prepared": "complete_generation_context",
                      "continuity_instructions": "smooth_transition_requirements"
                    },
                    "requirements": "Prepare complete delegation parameters",
                    "success_criteria": "Delegation plan ready with all parameters"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Delegation prepared",
                  "Parameters complete"
                ]
              },
              {
                "phase": 5,
                "name": "Chapter Generation Execution",
                "description": "Execute chapter generation through delegation",
                "parallel": false,
                "estimated_time": "120 seconds",
                "tasks": [
                  {
                    "agent": "chapter-start-coordinator",
                    "description": "Generate next chapter with full orchestration",
                    "priority": "critical",
                    "inputs": {
                      "chapter_number": "from_phase_4",
                      "continuity_context": "from_phase_2",
                      "generation_parameters": "from_phase_4",
                      "quality_requirements": {
                        "minimum_score": 95,
                        "bible_compliance": 100,
                        "continuity_validation": true
                      }
                    },
                    "outputs": {
                      "generation_status": "chapter_created_successfully",
                      "chapter_path": "new_chapter_location",
                      "quality_report": "initial_quality_assessment",
                      "continuity_report": "transition_validation"
                    },
                    "requirements": "Generate complete chapter meeting quality standards",
                    "success_criteria": "Chapter generated with quality validation"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Chapter generated",
                  "Quality validated",
                  "Continuity preserved"
                ]
              },
              {
                "phase": 6,
                "name": "Post-Generation Validation",
                "description": "Validate generated chapter and update progress",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "post-generation-validator",
                    "description": "Validate new chapter and update book progress",
                    "priority": "high",
                    "inputs": {
                      "new_chapter_path": "from_phase_5",
                      "validation_scope": {
                        "quality_check": true,
                        "continuity_verification": true,
                        "bible_compliance": true,
                        "progress_update": true
                      }
                    },
                    "outputs": {
                      "validation_complete": "chapter_approved",
                      "final_quality_score": "chapter_quality_rating",
                      "progress_updated": "book_progress_recorded",
                      "next_steps": "recommendations_for_continuation"
                    },
                    "requirements": "Validate chapter meets all requirements",
                    "success_criteria": "Chapter validated and progress updated"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "Generation validated",
                  "Progress updated",
                  "Ready for next"
                ]
              }
            ],
            "context": {
              "operation_type": "automatic_next_chapter_generation",
              "paths": {
                "project_root": "/absolute/path/to/project",
                "chapters_directory": "/absolute/path/to/chapters/",
                "bible_path": "/absolute/path/to/bible.yaml"
              }
            },
            "success_criteria": [
              "Next chapter number correctly determined",
              "Previous chapter validated for continuation",
              "Book progress assessed and continuation approved",
              "Chapter successfully generated with quality validation",
              "Narrative continuity preserved from previous ending",
              "Progress tracking updated with new chapter"
            ],
            "notes": "This plan implements automatic next chapter generation with smart numbering, continuity preservation, and quality validation throughout the process."
          },
          {
            "error": true,
            "coordinator": "next-chapter-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot generate next chapter",
            "blocking_issues": [
              "Previous chapter not complete",
              "Previous chapter quality below threshold",
              "Book already complete per target"
            ],
            "remediation_steps": [
              "Complete previous chapter first",
              "Fix quality issues in previous chapter",
              "Consider starting next book if complete"
            ],
            "suggested_commands": [
              "/novel:status",
              "/novel:smart-fix [previous_chapter]",
              "/novel:next-book"
            ]
          }
        ],
        "validation_rules": [
          "be complete and quality acceptable\",",
          "quality directly** (only plan the validation)",
          "previous chapter completion status",
          "previous chapter completion and quality\",",
          "on-track progress",
          "Prerequisites**:",
          "new chapter and update book progress\",",
          "previous chapter quality and completion status, design generation delegation with proper context, and ensure narrative continuity from previous ending",
          "previous chapter status and quality\",",
          "generated chapter and update progress\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex generation orchestration** (numbering, validation, delegation planning)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "next chapter number by scanning existing chapters, validate previous chapter quality and completion status, design generation delegation with proper context, and ensure narrative continuity from previous ending. Consider progress tracking and book completion detection.",
          "invoked, perform analysis and return a structured execution plan for next chapter generation.",
          "continuity validation needs",
          "previous chapter completion status",
          "applicable)"
        ],
        "validation_logic": [
          "previous chapter quality and completion status, design generation delegation with proper context, and ensure narrative continuity from previous ending. Consider progress tracking and book completion detection.",
          "previous chapter completion status",
          "Prerequisites**:",
          "previous chapter completion and quality\",",
          "previous chapter status and quality\","
        ],
        "business_rules": [
          "Determine continuity validation needs",
          "Plan quality threshold checks"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "post-generation-validator",
        "chapter-scanner",
        "chapter-start-coordinator",
        "previous-chapter-validator",
        "delegation-planner",
        "progress-tracker"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1325,
      "line_count": 396
    },
    "next-recommendation-coordinator": {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "name": "next-recommendation-coordinator",
      "type": "coordinator",
      "lines": 301,
      "description": "Analyzes project state and recommends optimal next actions using multi-dimensional priority matrix",
      "thinking": "Analyze next action requirements - assess current project state comprehensively, map task dependencies and blockers, plan multi-dimensional priority calculations, design parallel execution optimization, and coordinate strategic recommendation generation. Consider filter preferences, urgency assessments, and actionable command generation before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 268,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 268"
        },
        {
          "type": "unicode_character",
          "line": 278,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 278"
        },
        {
          "type": "excessive_lines",
          "lines": 301,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (301 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/chapters/"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Strategic Next Action Analysis Pipeline",
            "coordinator": "next-recommendation-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential",
              "estimated_duration": "20-30 seconds",
              "complexity": "moderate",
              "retry_strategy": "Handle missing data gracefully, provide partial analysis"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Project State Assessment",
                "description": "Comprehensive analysis of current project state",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "project-analyzer",
                    "description": "Analyze comprehensive project state across all dimensions",
                    "priority": "high",
                    "inputs": {
                      "project_context": "/absolute/path/to/current_project.json",
                      "analysis_mode": "comprehensive_state_assessment",
                      "filter": "[arguments filter or 'all']",
                      "dimensions": [
                        "bible_completeness",
                        "chapter_progress",
                        "quality_metrics",
                        "dependency_status",
                        "blocking_issues"
                      ]
                    },
                    "outputs": {
                      "project_state": "comprehensive_status_data",
                      "available_tasks": "task_inventory",
                      "blocking_issues": "identified_blockers"
                    },
                    "requirements": "Complete project state analysis with filter application",
                    "success_criteria": "Full project status assessed with task inventory"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Project state fully analyzed",
                  "Task inventory created"
                ]
              },
              {
                "phase": 2,
                "name": "Priority Matrix Calculation",
                "description": "Multi-dimensional priority scoring and dependency mapping",
                "parallel": false,
                "estimated_time": "8 seconds",
                "tasks": [
                  {
                    "agent": "priority-calculator",
                    "description": "Calculate multi-dimensional priority scores with dependency mapping",
                    "priority": "high",
                    "inputs": {
                      "project_state": "from_phase_1",
                      "calculation_mode": "multi_dimensional_priority",
                      "priority_matrix": {
                        "impact_weight": 40,
                        "urgency_weight": 25,
                        "effort_weight": 15,
                        "dependencies_weight": 10,
                        "parallelization_weight": 10
                      },
                      "filter_focus": "[arguments filter]"
                    },
                    "outputs": {
                      "priority_scores": "calculated_task_priorities",
                      "dependency_map": "task_dependency_analysis",
                      "parallel_opportunities": "concurrent_task_sets"
                    },
                    "requirements": "Calculate weighted priority scores and map dependencies",
                    "success_criteria": "Priority matrix completed with dependency analysis"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Priority scores calculated",
                  "Dependencies mapped",
                  "Parallel opportunities identified"
                ]
              },
              {
                "phase": 3,
                "name": "Strategic Recommendation Generation",
                "description": "Generate actionable recommendations with commands and insights",
                "parallel": false,
                "estimated_time": "7 seconds",
                "tasks": [
                  {
                    "agent": "recommendation-generator",
                    "description": "Generate strategic recommendations with actionable commands",
                    "priority": "high",
                    "inputs": {
                      "priority_scores": "from_phase_2",
                      "dependency_map": "from_phase_2",
                      "parallel_opportunities": "from_phase_2",
                      "generation_mode": "strategic_recommendations",
                      "output_format": {
                        "top_priority_action": true,
                        "parallel_opportunities": true,
                        "critical_blockers": true,
                        "project_health_metrics": true,
                        "strategic_insights": true
                      }
                    },
                    "outputs": {
                      "recommendations": "formatted_recommendations",
                      "top_priority": "highest_priority_with_command",
                      "parallel_tasks": "concurrent_execution_options",
                      "strategic_insights": "optimization_advice"
                    },
                    "requirements": "Generate comprehensive recommendations with specific commands",
                    "success_criteria": "Complete recommendations with actionable commands provided"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Recommendations generated",
                  "Commands provided",
                  "Strategic insights included"
                ]
              }
            ],
            "context": {
              "project": "[project name from context]",
              "filter": "[arguments filter or 'all']",
              "analysis_type": "strategic_next_actions",
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "current_context": "/absolute/path/to/current_project.json",
                "bible": "/absolute/path/to/bible.yaml"
              }
            },
            "success_criteria": [
              "Project state comprehensively analyzed",
              "Priority matrix calculated with dependencies",
              "Strategic recommendations generated",
              "Actionable commands provided",
              "Optimization insights delivered"
            ],
            "notes": "This plan implements strategic next action analysis using multi-dimensional priority matrix, dependency mapping, and optimization recommendations for efficient project progression."
          },
          {
            "error": true,
            "coordinator": "next-recommendation-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot generate next action recommendations",
            "blocking_issues": [
              "No active project found",
              "Project files inaccessible",
              "Insufficient data for analysis"
            ],
            "remediation_steps": [
              "Set active project with /novel:project-switch",
              "Verify project file integrity",
              "Run /novel:system-check for validation"
            ],
            "suggested_commands": [
              "/novel:project-list",
              "/novel:project-switch [project_name]",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "project file integrity\",",
          "Prerequisites**:",
          "for validation\"",
          "quality reports and progress status"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex orchestration logic** (priority analysis, dependency mapping, strategic planning)",
          "handling for missing data sources",
          "missing data gracefully, provide partial analysis\"",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for next action recommendations.",
          "recommendation scope requirements",
          "quality reports and progress status",
          "prerequisites aren't met or validation fails, return",
          "for validation\""
        ],
        "validation_logic": [
          "quality reports and progress status",
          "Prerequisites**:",
          "project file integrity\",",
          "for validation\""
        ],
        "business_rules": [
          "assess current project state comprehensively, map task dependencies and blockers, plan multi-dimensional priority calculations, design parallel execution optimization, and coordinate strategic recommendation generation. Consider filter preferences, urgency assessments, and actionable command generation before creating execution plan.",
          "--",
          "Read current project: `.claude/data/context/current_project.json`",
          "Get project metadata: `.claude/data/projects/{project}/project.json`",
          "Locate Bible and chapter information",
          "Check quality reports and progress status"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "recommendation-generator",
        "priority-calculator",
        "project-analyzer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1125,
      "line_count": 301
    },
    "project-new-coordinator": {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "name": "project-new-coordinator",
      "type": "coordinator",
      "lines": 428,
      "description": "Orchestrates new novel project creation with comprehensive brainstorming and Bible generation",
      "thinking": "Analyze project creation requirements - determine name resolution strategy, plan comprehensive brainstorming workflow, design series architecture and Bible generation pipeline, assess quality validation needs, and coordinate full project initialization. Consider English-only content enforcement, multi-phase dependencies, and success criteria before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 395,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 395"
        },
        {
          "type": "unicode_character",
          "line": 405,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 405"
        },
        {
          "type": "excessive_lines",
          "lines": 428,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (428 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_name}/series_bible.yaml",
          "{project_name}/book_1/bible.yaml",
          "{project_name}/project.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "New Novel Project Creation Pipeline",
            "coordinator": "project-new-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential",
              "estimated_duration": "15-25 minutes",
              "complexity": "complex",
              "retry_strategy": "Retry failed phases up to 2 times, preserve completed work"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Project Name Resolution",
                "description": "Determine project name through brainstorming if needed",
                "parallel": false,
                "estimated_time": "3-5 minutes",
                "tasks": [
                  {
                    "agent": "project-name-resolver",
                    "description": "Resolve project name through interactive brainstorming",
                    "priority": "high",
                    "inputs": {
                      "provided_name": "[arguments or 'TBD']",
                      "operation_mode": "name_resolution",
                      "requirements": "English-only name, check conflicts, interactive if needed"
                    },
                    "outputs": {
                      "resolved_name": "finalized_project_name",
                      "name_rationale": "explanation_of_choice"
                    },
                    "requirements": "Determine final English project name",
                    "success_criteria": "Project name finalized and validated"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Project name determined",
                  "No naming conflicts"
                ]
              },
              {
                "phase": 2,
                "name": "Project Structure Initialization",
                "description": "Create directory structure and basic project files",
                "parallel": false,
                "estimated_time": "2 minutes",
                "tasks": [
                  {
                    "agent": "project-initializer",
                    "description": "Create complete project directory structure",
                    "priority": "high",
                    "inputs": {
                      "project_name": "from_phase_1",
                      "operation_mode": "structure_creation",
                      "directories": [
                        "book_1/chapters",
                        "book_1/context",
                        "shared",
                        "learning_reports",
                        "quality-reports",
                        "series_reviews"
                      ]
                    },
                    "outputs": {
                      "project_structure": "created_directories",
                      "project_registration": "added_to_system"
                    },
                    "requirements": "Create full directory structure and register project",
                    "success_criteria": "Complete project structure created and registered"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Directory structure created",
                  "Project registered in system"
                ]
              },
              {
                "phase": 3,
                "name": "Comprehensive Brainstorming",
                "description": "Interactive brainstorming for series concept and structure",
                "parallel": false,
                "estimated_time": "8-12 minutes",
                "tasks": [
                  {
                    "agent": "series-brainstormer",
                    "description": "Guide comprehensive interactive brainstorming session",
                    "priority": "high",
                    "inputs": {
                      "project_name": "from_phase_1",
                      "project_root": "/absolute/path/to/project",
                      "operation_mode": "comprehensive_brainstorming",
                      "brainstorming_areas": [
                        "series_format",
                        "language_variant",
                        "genre_positioning",
                        "character_architecture",
                        "world_building",
                        "series_planning"
                      ]
                    },
                    "outputs": {
                      "brainstorming_results": "saved_to_brainstorming_results.yaml",
                      "series_concept": "complete_series_vision"
                    },
                    "requirements": "Complete interactive brainstorming with English-only content",
                    "success_criteria": "Comprehensive brainstorming completed and saved"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Brainstorming session completed",
                  "Results saved to file"
                ]
              },
              {
                "phase": 4,
                "name": "Series Bible Generation",
                "description": "Create comprehensive series-level Bible",
                "parallel": false,
                "estimated_time": "3 minutes",
                "tasks": [
                  {
                    "agent": "bible-architect",
                    "description": "Generate comprehensive Series Bible from brainstorming",
                    "priority": "high",
                    "inputs": {
                      "bible_type": "SERIES_BIBLE",
                      "input_files": "/absolute/path/to/brainstorming_results.yaml",
                      "output_file": "/absolute/path/to/series_bible.yaml",
                      "requirements": "Create complete series-level Bible structure"
                    },
                    "outputs": {
                      "series_bible": "comprehensive_series_bible.yaml"
                    },
                    "requirements": "Generate complete Series Bible with all required sections",
                    "success_criteria": "Series Bible created with comprehensive content"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Series Bible generated",
                  "All sections complete"
                ]
              },
              {
                "phase": 5,
                "name": "Series Bible Quality Validation",
                "description": "Validate Series Bible meets quality standards",
                "parallel": false,
                "estimated_time": "2 minutes",
                "tasks": [
                  {
                    "agent": "series-bible-reviewer",
                    "description": "Review and score Series Bible quality",
                    "priority": "high",
                    "inputs": {
                      "input_file": "/absolute/path/to/series_bible.yaml",
                      "output_file": "/absolute/path/to/series_bible_quality_report.json",
                      "project_context": "/absolute/path/to/project.json"
                    },
                    "outputs": {
                      "quality_report": "detailed_quality_assessment",
                      "overall_score": "numerical_score_0_to_100"
                    },
                    "requirements": "Score must be 95+ for project to proceed",
                    "success_criteria": "Series Bible scores 95+ quality points"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "Quality assessment completed",
                  "Score meets 95+ threshold"
                ]
              },
              {
                "phase": 6,
                "name": "Book Bible Generation",
                "description": "Create Book 1 Bible inheriting from Series Bible",
                "parallel": false,
                "estimated_time": "3 minutes",
                "tasks": [
                  {
                    "agent": "bible-architect",
                    "description": "Generate Book 1 Bible with Series Bible inheritance",
                    "priority": "high",
                    "inputs": {
                      "bible_type": "BOOK_BIBLE",
                      "input_files": "/absolute/path/to/brainstorming_results.yaml",
                      "reference_file": "/absolute/path/to/series_bible.yaml",
                      "output_file": "/absolute/path/to/book_1/bible.yaml",
                      "requirements": "Create Book Bible with voice inheritance"
                    },
                    "outputs": {
                      "book_bible": "book_specific_bible.yaml"
                    },
                    "requirements": "Generate Book Bible inheriting voice from Series Bible",
                    "success_criteria": "Book Bible created with proper inheritance"
                  }
                ],
                "dependencies": [
                  "Phase 5"
                ],
                "success_criteria": [
                  "Book Bible generated",
                  "Voice inheritance verified"
                ]
              },
              {
                "phase": 7,
                "name": "Book Bible Quality Validation",
                "description": "Validate Book Bible meets quality standards",
                "parallel": false,
                "estimated_time": "2 minutes",
                "tasks": [
                  {
                    "agent": "bible-reviewer",
                    "description": "Review and score Book Bible quality with inheritance validation",
                    "priority": "high",
                    "inputs": {
                      "input_file": "/absolute/path/to/book_1/bible.yaml",
                      "reference_file": "/absolute/path/to/series_bible.yaml",
                      "output_file": "/absolute/path/to/book_1/bible_quality_report.json"
                    },
                    "outputs": {
                      "quality_report": "detailed_book_quality_assessment",
                      "inheritance_validation": "voice_inheritance_check",
                      "overall_score": "numerical_score_0_to_100"
                    },
                    "requirements": "Score must be 95+ with proper voice inheritance",
                    "success_criteria": "Book Bible scores 95+ with inheritance compliance"
                  }
                ],
                "dependencies": [
                  "Phase 6"
                ],
                "success_criteria": [
                  "Book quality validated",
                  "Inheritance verified",
                  "95+ score achieved"
                ]
              },
              {
                "phase": 8,
                "name": "Project Finalization",
                "description": "Complete project setup and provide next steps",
                "parallel": false,
                "estimated_time": "1 minute",
                "tasks": [
                  {
                    "agent": "project-finalizer",
                    "description": "Finalize project setup and generate next steps",
                    "priority": "high",
                    "inputs": {
                      "project_root": "/absolute/path/to/project",
                      "operation_mode": "finalization",
                      "setup_completion": "all_phases_successful"
                    },
                    "outputs": {
                      "completion_status": "project_ready_for_writing",
                      "next_steps": "recommended_commands",
                      "success_summary": "creation_summary"
                    },
                    "requirements": "Finalize project and provide clear next steps",
                    "success_criteria": "Project fully configured for chapter generation"
                  }
                ],
                "dependencies": [
                  "Phase 7"
                ],
                "success_criteria": [
                  "Project finalized",
                  "Next steps provided",
                  "Ready for writing"
                ]
              }
            ],
            "context": {
              "project_name": "[resolved or provided project name]",
              "creation_type": "comprehensive_new_project",
              "quality_threshold": 95,
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "series_bible": "/absolute/path/to/series_bible.yaml",
                "book_bible": "/absolute/path/to/book_1/bible.yaml"
              }
            },
            "success_criteria": [
              "Project name resolved and validated",
              "Complete project structure created",
              "Comprehensive brainstorming completed",
              "Series Bible generated and validated (95+)",
              "Book Bible generated with inheritance",
              "All quality thresholds met",
              "Project ready for chapter generation"
            ],
            "notes": "This plan implements comprehensive new project creation with interactive brainstorming, dual Bible architecture, quality validation, and complete project setup."
          },
          {
            "error": true,
            "coordinator": "project-new-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot create new project",
            "blocking_issues": [
              "System directories not writable",
              "Project name conflicts with existing project",
              "Required agents not available"
            ],
            "remediation_steps": [
              "Check file system permissions",
              "Choose different project name",
              "Verify system agent availability"
            ],
            "suggested_commands": [
              "/novel:project-list",
              "/novel:system-check"
            ]
          }
        ],
        "validation_rules": [
          "file system permissions\",",
          "system agent availability\"",
          "be 95+ with proper voice inheritance\",",
          "Prerequisites**:",
          "conflicts, interactive if needed\"",
          "system readiness for new project",
          "be 95+ for project to proceed\",",
          "Series Bible meets quality standards\",",
          "current project state: `",
          "Book Bible meets quality standards\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex orchestration logic** (brainstorming, Bible generation, quality validation)",
          "recovery for each phase",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "name resolution strategy, plan comprehensive brainstorming workflow, design series architecture and Bible generation pipeline, assess quality validation needs, and coordinate full project initialization. Consider English-only content enforcement, multi-phase dependencies, and success criteria before creating execution plan.",
          "invoked, perform analysis and return a structured execution plan for new project creation.",
          "if name resolution needed",
          "current project state",
          "project name through brainstorming if needed\","
        ],
        "validation_logic": [
          "current project state: `.claude/data/context/current_project.json`",
          "system readiness for new project",
          "Prerequisites**:",
          "conflicts, interactive if needed\"",
          "Series Bible meets quality standards\","
        ],
        "business_rules": [
          "determine name resolution strategy, plan comprehensive brainstorming workflow, design series architecture and Bible generation pipeline, assess quality validation needs, and coordinate full project initialization. Consider English-only content enforcement, multi-phase dependencies, and success criteria before creating execution plan.",
          "--",
          "Determine if name resolution needed"
        ],
        "success_criteria": [
          "before creating execution plan."
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "project-name-resolver",
        "bible-architect",
        "series-brainstormer",
        "project-finalizer",
        "bible-reviewer",
        "series-bible-reviewer",
        "project-initializer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1511,
      "line_count": 428
    },
    "project-switch-coordinator": {
      "file": ".claude\\agents\\project-switch-coordinator.md",
      "name": "project-switch-coordinator",
      "type": "coordinator",
      "lines": 335,
      "description": "Manages switching between different novel projects with context preservation",
      "thinking": "Analyze project switching requirements - validate target project exists and has proper structure, plan context preservation strategy, design safe transition methodology, coordinate state restoration process, and ensure work continuity. Consider validation phases, data integrity, and seamless handoff planning before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 335,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (335 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Safe Project Context Switching Pipeline",
            "coordinator": "project-switch-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_with_validation_gates",
              "estimated_duration": "15-25 seconds",
              "complexity": "moderate",
              "retry_strategy": "Retry failed operations, rollback on critical failures"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Target Project Validation",
                "description": "Validate target project exists and is healthy",
                "parallel": false,
                "estimated_time": "8 seconds",
                "tasks": [
                  {
                    "agent": "project-validator",
                    "description": "Validate target project structure and integrity",
                    "priority": "high",
                    "inputs": {
                      "target_project": "[target_name_from_arguments]",
                      "projects_root": "/absolute/path/to/projects",
                      "validation_mode": "comprehensive_health_check",
                      "check_requirements": {
                        "essential_files": [
                          "project.json"
                        ],
                        "bible_files": [
                          "book_*/bible.yaml"
                        ],
                        "structure_validation": true,
                        "data_integrity": true
                      }
                    },
                    "outputs": {
                      "validation_status": "project_health_assessment",
                      "project_metadata": "loaded_project_configuration",
                      "blocking_issues": "critical_problems_found",
                      "warnings": "non_critical_issues"
                    },
                    "requirements": "Target project must exist and pass health checks",
                    "success_criteria": "Project validation completed with healthy status"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Target project validated",
                  "No blocking issues found"
                ]
              },
              {
                "phase": 2,
                "name": "Current Context Preservation",
                "description": "Save current project state before switching",
                "parallel": false,
                "estimated_time": "6 seconds",
                "tasks": [
                  {
                    "agent": "context-preserver",
                    "description": "Save current project context and work state",
                    "priority": "high",
                    "inputs": {
                      "current_project_path": "from_current_project_json",
                      "preservation_mode": "comprehensive_snapshot",
                      "backup_strategy": {
                        "primary_location": "context_snapshot.json",
                        "backup_location": ".switch_backup.json",
                        "include_timestamps": true,
                        "preserve_work_state": true
                      }
                    },
                    "outputs": {
                      "context_snapshot": "saved_project_state",
                      "work_state": "current_progress_data",
                      "preservation_report": "backup_confirmation"
                    },
                    "requirements": "Current project state preserved before switch",
                    "success_criteria": "Context snapshot saved with work state preservation",
                    "conditional": "current_project exists"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Current context preserved",
                  "Work state saved"
                ]
              },
              {
                "phase": 3,
                "name": "Safe Project Transition",
                "description": "Execute clean handoff between projects",
                "parallel": false,
                "estimated_time": "4 seconds",
                "tasks": [
                  {
                    "agent": "project-transition-manager",
                    "description": "Execute clean project handoff with state management",
                    "priority": "high",
                    "inputs": {
                      "current_project": "from_preservation_phase",
                      "target_project": "from_validation_phase",
                      "transition_mode": "safe_handoff",
                      "cleanup_operations": {
                        "clear_active_context": true,
                        "flush_caches": true,
                        "close_operations": true
                      }
                    },
                    "outputs": {
                      "transition_status": "handoff_completion",
                      "cleanup_report": "cache_and_context_cleanup",
                      "transition_log": "operation_details"
                    },
                    "requirements": "Clean transition between project contexts",
                    "success_criteria": "Safe handoff completed with clean state"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Clean transition completed",
                  "Active context cleared"
                ]
              },
              {
                "phase": 4,
                "name": "Target Project Activation",
                "description": "Load target project and restore context",
                "parallel": false,
                "estimated_time": "7 seconds",
                "tasks": [
                  {
                    "agent": "project-activator",
                    "description": "Activate target project and restore previous context",
                    "priority": "high",
                    "inputs": {
                      "target_project_path": "from_validation_phase",
                      "activation_mode": "full_restoration",
                      "context_restoration": {
                        "load_project_config": true,
                        "restore_previous_context": true,
                        "scan_project_status": true,
                        "update_active_context": true
                      }
                    },
                    "outputs": {
                      "project_status": "activated_project_state",
                      "restored_context": "previous_work_context",
                      "activation_report": "project_load_summary"
                    },
                    "requirements": "Target project activated with context restoration",
                    "success_criteria": "Project loaded and ready for work continuation"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Target project activated",
                  "Context restored"
                ]
              }
            ],
            "context": {
              "target_project": "[target_name_from_arguments]",
              "operation_type": "safe_project_switching",
              "paths": {
                "current_project_file": "/absolute/path/to/current_project.json",
                "projects_directory": "/absolute/path/to/projects",
                "target_project_root": "/absolute/path/to/projects/{target}"
              }
            },
            "success_criteria": [
              "Target project validated and confirmed healthy",
              "Current project context preserved safely",
              "Clean transition executed without data loss",
              "Target project activated with restored context",
              "Work can resume immediately in new project"
            ],
            "notes": "This plan implements safe project switching with comprehensive context preservation, ensuring seamless work continuation across project boundaries."
          },
          {
            "error": true,
            "coordinator": "project-switch-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot switch projects",
            "blocking_issues": [
              "Target project 'project_name' not found",
              "Target project has corrupted files",
              "Current project has unsaved critical changes"
            ],
            "remediation_steps": [
              "Check available projects with /novel:project-list",
              "Create target project if needed with /novel:project-new",
              "Save current work before switching"
            ],
            "suggested_commands": [
              "/novel:project-list",
              "/novel:project-new [project_name]",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "->  preserve  ->  switch  ->  restore)",
          "projects directly** (I only plan the validation)",
          "target project structure",
          "project directories: `",
          "Prerequisites**:",
          "target project structure and integrity\",",
          "target project exists and is healthy\",",
          "target project exists and has proper structure, plan context preservation strategy, design safe transition methodology, coordinate state restoration process, and ensure work continuity",
          "available projects with /novel:project-list\",",
          "exist and pass health checks\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "complex transition logic** (validation, preservation, restoration coordination)",
          "recovery mechanisms for failed operations",
          "Response Format",
          "error cases** and provide recovery suggestions",
          "Recovery**: Rollback procedures, failure handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for project switching.",
          "validation and restoration needs",
          "project directories",
          "prerequisites aren't met or validation fails, return",
          "available projects with /novel"
        ],
        "validation_logic": [
          "target project exists and has proper structure, plan context preservation strategy, design safe transition methodology, coordinate state restoration process, and ensure work continuity. Consider validation phases, data integrity, and seamless handoff planning before creating execution plan.",
          "project directories: `.claude/data/projects/`",
          "target project structure",
          "Prerequisites**:",
          "->  preserve  ->  switch  ->  restore)"
        ],
        "business_rules": [
          "validate target project exists and has proper structure, plan context preservation strategy, design safe transition methodology, coordinate state restoration process, and ensure work continuity. Consider validation phases, data integrity, and seamless handoff planning before creating execution plan.",
          "--",
          "Determine validation and restoration needs"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "project-validator",
        "context-preserver",
        "project-activator",
        "project-transition-manager"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1237,
      "line_count": 335
    },
    "quality-check-cross-coordinator": {
      "file": ".claude\\agents\\quality-check-cross-coordinator.md",
      "name": "quality-check-cross-coordinator",
      "type": "coordinator",
      "lines": 424,
      "description": "Orchestrates cross-chapter consistency validation",
      "thinking": "Plan cross-chapter validation strategy - parse chapter ranges accurately, design parallel execution of 5 validators for efficiency, plan aggregation methodology for findings, design pattern identification across chapters, and structure comprehensive reporting. Consider transitions, narrative flow, and cumulative quality impacts.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 424,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (424 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{N}/bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Cross-Chapter Consistency Validation Pipeline",
            "coordinator": "quality-check-cross-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "parallel_cross_validation_with_aggregation",
              "estimated_duration": "60-90 seconds",
              "complexity": "high",
              "retry_strategy": "Continue with partial results if individual validators fail"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Range Validation and Prerequisites",
                "description": "Parse chapter range and validate prerequisites",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "range-validator",
                    "description": "Parse chapter range and validate all chapters exist",
                    "priority": "critical",
                    "inputs": {
                      "range_specification": "[arguments_range]",
                      "project_root": "/absolute/path/to/project",
                      "validation_checks": {
                        "chapters_exist": true,
                        "quality_reports_present": true,
                        "minimum_scores": 85,
                        "bible_accessible": true
                      }
                    },
                    "outputs": {
                      "chapter_list": "validated_chapter_numbers",
                      "chapter_paths": "absolute_paths_to_chapters",
                      "validation_status": "prerequisites_met_or_blocked"
                    },
                    "requirements": "All chapters in range must exist with quality reports",
                    "success_criteria": "Chapter range validated and prerequisites confirmed"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Range parsed successfully",
                  "Prerequisites validated"
                ]
              },
              {
                "phase": 2,
                "name": "Parallel Cross-Chapter Validation",
                "description": "Execute 5 cross-chapter validators simultaneously",
                "parallel": true,
                "estimated_time": "45 seconds",
                "tasks": [
                  {
                    "agent": "cross-chapter-flow-validator",
                    "description": "Validate narrative flow between adjacent chapters",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "from_phase_1",
                      "validation_scope": {
                        "time_continuity": true,
                        "scene_transitions": true,
                        "narrative_momentum": true,
                        "character_positions": true
                      },
                      "output_file": "flow_validation.json"
                    },
                    "outputs": {
                      "flow_scores": "transition_quality_ratings",
                      "flow_disruptions": "identified_flow_breaks",
                      "transition_report": "detailed_flow_analysis"
                    },
                    "requirements": "Validate all Ch(n) -> Ch(n+1) transitions",
                    "success_criteria": "Flow validation completed for all transitions"
                  },
                  {
                    "agent": "plot-thread-tracker",
                    "description": "Track plot thread consistency across chapters",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "from_phase_1",
                      "tracking_scope": {
                        "thread_continuity": true,
                        "subplot_progression": true,
                        "foreshadowing_payoff": true,
                        "clue_consistency": true
                      },
                      "output_file": "plot_tracking.json"
                    },
                    "outputs": {
                      "thread_analysis": "plot_thread_progression",
                      "dropped_threads": "abandoned_plot_elements",
                      "thread_report": "comprehensive_plot_analysis"
                    },
                    "requirements": "Track all plot threads through chapter range",
                    "success_criteria": "Plot thread analysis completed with continuity check"
                  },
                  {
                    "agent": "character-arc-validator",
                    "description": "Validate character development arcs across chapters",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "from_phase_1",
                      "arc_validation": {
                        "development_consistency": true,
                        "relationship_evolution": true,
                        "emotional_progression": true,
                        "personality_stability": true
                      },
                      "output_file": "character_arcs.json"
                    },
                    "outputs": {
                      "arc_analysis": "character_development_assessment",
                      "arc_breaks": "inconsistent_character_changes",
                      "arc_report": "detailed_character_analysis"
                    },
                    "requirements": "Validate character arcs remain consistent",
                    "success_criteria": "Character arc validation completed"
                  },
                  {
                    "agent": "world-consistency-checker",
                    "description": "Check world-building consistency across chapters",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "from_phase_1",
                      "consistency_checks": {
                        "location_details": true,
                        "rule_consistency": true,
                        "technology_stability": true,
                        "cultural_coherence": true
                      },
                      "output_file": "world_consistency.json"
                    },
                    "outputs": {
                      "world_analysis": "world_consistency_assessment",
                      "inconsistencies": "world_building_conflicts",
                      "world_report": "comprehensive_world_analysis"
                    },
                    "requirements": "Verify world remains consistent across chapters",
                    "success_criteria": "World consistency validation completed"
                  },
                  {
                    "agent": "pacing-analyzer",
                    "description": "Analyze pacing patterns across chapter range",
                    "priority": "medium",
                    "inputs": {
                      "chapter_range": "from_phase_1",
                      "pacing_analysis": {
                        "tension_curves": true,
                        "scene_rhythm": true,
                        "chapter_lengths": true,
                        "climax_distribution": true
                      },
                      "output_file": "pacing_analysis.json"
                    },
                    "outputs": {
                      "pacing_metrics": "multi_chapter_pacing_assessment",
                      "pacing_issues": "rhythm_and_flow_problems",
                      "pacing_report": "detailed_pacing_analysis"
                    },
                    "requirements": "Analyze pacing patterns across all chapters",
                    "success_criteria": "Pacing analysis completed with pattern identification"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "All 5 validators executed",
                  "Cross-chapter results generated"
                ]
              },
              {
                "phase": 3,
                "name": "Results Aggregation and Pattern Analysis",
                "description": "Aggregate findings and identify multi-chapter patterns",
                "parallel": false,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "cross-chapter-aggregator",
                    "description": "Aggregate all validation results and identify patterns",
                    "priority": "critical",
                    "inputs": {
                      "validation_results": {
                        "flow_report": "flow_validation.json",
                        "plot_report": "plot_tracking.json",
                        "character_report": "character_arcs.json",
                        "world_report": "world_consistency.json",
                        "pacing_report": "pacing_analysis.json"
                      },
                      "aggregation_strategy": {
                        "pattern_detection": true,
                        "issue_clustering": true,
                        "severity_ranking": true,
                        "trend_analysis": true
                      },
                      "output_file": "cross_chapter_report.json"
                    },
                    "outputs": {
                      "overall_consistency": "multi_chapter_consistency_score",
                      "pattern_analysis": "recurring_issue_patterns",
                      "critical_issues": "high_priority_cross_chapter_problems",
                      "improvement_areas": "systematic_improvement_recommendations"
                    },
                    "requirements": "Comprehensive aggregation with pattern identification",
                    "success_criteria": "Results aggregated with actionable insights generated"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Results aggregated",
                  "Patterns identified",
                  "Recommendations generated"
                ]
              },
              {
                "phase": 4,
                "name": "Comprehensive Report Generation",
                "description": "Generate detailed cross-chapter validation report",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "cross-chapter-reporter",
                    "description": "Generate comprehensive cross-chapter validation report",
                    "priority": "high",
                    "inputs": {
                      "aggregated_results": "from_phase_3",
                      "chapter_range": "from_phase_1",
                      "report_format": "detailed_markdown",
                      "include_sections": {
                        "executive_summary": true,
                        "transition_analysis": true,
                        "pattern_findings": true,
                        "recommendations": true,
                        "quality_matrix": true
                      },
                      "output_file": "cross_chapter_validation.md"
                    },
                    "outputs": {
                      "validation_report": "comprehensive_cross_chapter_assessment",
                      "quality_matrix": "chapter_by_chapter_quality_grid",
                      "action_items": "prioritized_fix_recommendations"
                    },
                    "requirements": "Generate user-friendly comprehensive report",
                    "success_criteria": "Detailed report generated with clear action items"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Report generated",
                  "Insights documented",
                  "Recommendations provided"
                ]
              }
            ],
            "context": {
              "chapter_range": "[range_from_arguments]",
              "operation_type": "cross_chapter_consistency_validation",
              "paths": {
                "project_root": "/absolute/path/to/project",
                "bible_path": "/absolute/path/to/bible.yaml",
                "entity_dictionary": "/absolute/path/to/entity_dictionary.yaml"
              }
            },
            "success_criteria": [
              "Chapter range validated and prerequisites confirmed",
              "5 parallel cross-chapter validators executed",
              "Multi-chapter patterns identified and analyzed",
              "Comprehensive consistency score calculated",
              "Detailed report generated with prioritized recommendations"
            ],
            "notes": "This plan implements parallel cross-chapter validation with comprehensive pattern analysis, ensuring narrative consistency and quality maintenance across chapter boundaries."
          },
          {
            "error": true,
            "coordinator": "quality-check-cross-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot execute cross-chapter validation",
            "blocking_issues": [
              "Individual quality reports missing for chapters",
              "Some chapters score below 85 threshold",
              "Invalid chapter range specified"
            ],
            "remediation_steps": [
              "Run quality-check-individual for all chapters first",
              "Fix chapters scoring below 85 with smart-fix",
              "Verify chapter range format (e.g., '1-5' or 'all')"
            ],
            "suggested_commands": [
              "/novel:quality-check-individual [chapter]",
              "/novel:smart-fix [chapter]",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "world-building consistency across chapters\",",
          "character development arcs across chapters\",",
          "directly** (I only plan the validation)",
          "Cross Coordinator v2",
          "Prerequisites**:",
          "narrative flow between adjacent chapters\",",
          "prerequisites\",",
          "character arcs remain consistent\",",
          "all chapters exist\",",
          "world remains consistent across chapters\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex cross-chapter orchestration** (range parsing, parallel validation, aggregation)",
          "tolerance for partial results",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "Cross Coordinator",
          "invoked, perform analysis and return a structured execution plan for cross-chapter validation.",
          "chapter paths and resources",
          "individual validators fail\"",
          "world-building consistency across chapters\","
        ],
        "validation_logic": [
          "Cross Coordinator",
          "chapter existence scope",
          "Prerequisites**:",
          "prerequisites\",",
          "all chapters exist\","
        ],
        "business_rules": [
          "**Pacing Analysis**: Multi-chapter rhythm patterns"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "cross-chapter-aggregator",
        "range-validator",
        "character-arc-validator",
        "pacing-analyzer",
        "cross-chapter-reporter",
        "world-consistency-checker",
        "cross-chapter-flow-validator",
        "plot-thread-tracker"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1385,
      "line_count": 424
    },
    "quality-check-individual-coordinator": {
      "file": ".claude\\agents\\quality-check-individual-coordinator.md",
      "name": "quality-check-individual-coordinator",
      "type": "coordinator",
      "lines": 400,
      "description": "Orchestrates individual chapter quality validation with parallel execution",
      "thinking": "Plan comprehensive quality validation strategy - coordinate parallel execution of 4 validators for performance optimization, design results aggregation methodology, plan weighted scoring calculation, and prepare actionable recommendations based on thresholds. Consider file prerequisites and error recovery strategies.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 400,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (400 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{NNN}/content.md",
          "{N}/bible.yaml",
          "{\n      \"phase\": 1,\n      \"name\": \"Prerequisites Validation\",\n      \"description\": \"Verify all required files and resources exist\",\n      \"parallel\": false,\n      \"estimated_time\": \"5 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"prerequisites-validator\",\n          \"description\": \"Validate all required files exist and are accessible\",\n          \"priority\": \"critical\",\n          \"inputs\": {\n            \"chapter_number\": \"[formatted_chapter_number]\",\n            \"project_root\": \"/absolute/path/to/project\",\n            \"required_files\": {\n              \"chapter_content\": \"chapters/ch{NNN}/content.md",
          "{N}/bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Comprehensive Chapter Quality Validation Pipeline",
            "coordinator": "quality-check-individual-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "parallel_validation_with_aggregation",
              "estimated_duration": "45-60 seconds",
              "complexity": "moderate",
              "retry_strategy": "Continue with partial results if individual validators fail"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Prerequisites Validation",
                "description": "Verify all required files and resources exist",
                "parallel": false,
                "estimated_time": "5 seconds",
                "tasks": [
                  {
                    "agent": "prerequisites-validator",
                    "description": "Validate all required files exist and are accessible",
                    "priority": "critical",
                    "inputs": {
                      "chapter_number": "[formatted_chapter_number]",
                      "project_root": "/absolute/path/to/project",
                      "required_files": {
                        "chapter_content": "chapters/ch{NNN}/content.md",
                        "bible": "book_{N}/bible.yaml",
                        "entity_dictionary": "shared/entity_dictionary.yaml"
                      }
                    },
                    "outputs": {
                      "files_validated": "prerequisite_check_results",
                      "missing_files": "list_of_missing_resources",
                      "validation_status": "ready_or_blocked"
                    },
                    "requirements": "All required files must exist before proceeding",
                    "success_criteria": "All prerequisites validated and accessible"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Prerequisites validated",
                  "All required files accessible"
                ]
              },
              {
                "phase": 2,
                "name": "Parallel Quality Validation",
                "description": "Execute 4 quality validators simultaneously for 4x performance",
                "parallel": true,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "continuity-guard-specialist",
                    "description": "Validate chapter internal consistency",
                    "priority": "high",
                    "inputs": {
                      "chapter_path": "/absolute/path/to/content.md",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "validation_scope": {
                        "timeline_consistency": true,
                        "character_behavior": true,
                        "setting_coherence": true,
                        "internal_logic": true
                      },
                      "output_file": "consistency_check.json"
                    },
                    "outputs": {
                      "consistency_score": "internal_consistency_rating",
                      "continuity_breaks": "identified_consistency_issues",
                      "validation_report": "detailed_consistency_analysis"
                    },
                    "requirements": "Complete internal consistency validation",
                    "success_criteria": "Consistency analysis completed with scoring"
                  },
                  {
                    "agent": "plot-hole-validator",
                    "description": "Identify plot holes and logic issues",
                    "priority": "high",
                    "inputs": {
                      "chapter_path": "/absolute/path/to/content.md",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "detection_scope": {
                        "causality_chains": true,
                        "motivation_logic": true,
                        "world_rules": true,
                        "plot_threads": true
                      },
                      "output_file": "plot_analysis.json"
                    },
                    "outputs": {
                      "plot_score": "plot_coherence_rating",
                      "plot_holes": "identified_plot_issues",
                      "logic_report": "detailed_plot_analysis"
                    },
                    "requirements": "Complete plot hole detection and analysis",
                    "success_criteria": "Plot analysis completed with issue identification"
                  },
                  {
                    "agent": "bible-compliance-validator",
                    "description": "Check Bible rule compliance",
                    "priority": "high",
                    "inputs": {
                      "chapter_path": "/absolute/path/to/content.md",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "entity_dictionary": "/absolute/path/to/entity_dictionary.yaml",
                      "compliance_checks": {
                        "character_consistency": true,
                        "world_rules": true,
                        "plot_alignment": true,
                        "entity_accuracy": true
                      },
                      "output_file": "bible_compliance.json"
                    },
                    "outputs": {
                      "compliance_score": "bible_compliance_rating",
                      "violations": "identified_bible_violations",
                      "compliance_report": "detailed_compliance_analysis"
                    },
                    "requirements": "Complete Bible compliance validation",
                    "success_criteria": "Bible compliance checked with violation identification"
                  },
                  {
                    "agent": "character-voice-cross-validator",
                    "description": "Validate character voice consistency",
                    "priority": "high",
                    "inputs": {
                      "chapter_path": "/absolute/path/to/content.md",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "validation_focus": {
                        "dialogue_patterns": true,
                        "personality_traits": true,
                        "speech_habits": true,
                        "emotional_consistency": true
                      },
                      "output_file": "voice_analysis.json"
                    },
                    "outputs": {
                      "voice_score": "character_voice_rating",
                      "voice_issues": "identified_voice_inconsistencies",
                      "voice_report": "detailed_voice_analysis"
                    },
                    "requirements": "Complete character voice validation",
                    "success_criteria": "Voice consistency analyzed with pattern validation"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "All 4 validators executed",
                  "Validation results generated"
                ]
              },
              {
                "phase": 3,
                "name": "Results Aggregation and Scoring",
                "description": "Aggregate results and calculate weighted quality score",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "quality-scorer",
                    "description": "Aggregate all validation results and calculate final score",
                    "priority": "critical",
                    "inputs": {
                      "validation_results": {
                        "consistency_report": "consistency_check.json",
                        "plot_report": "plot_analysis.json",
                        "compliance_report": "bible_compliance.json",
                        "voice_report": "voice_analysis.json"
                      },
                      "scoring_weights": {
                        "bible_compliance": 0.3,
                        "plot_coherence": 0.25,
                        "character_consistency": 0.2,
                        "emotional_resonance": 0.15,
                        "pacing": 0.1
                      },
                      "output_file": "quality_report.json"
                    },
                    "outputs": {
                      "overall_score": "weighted_quality_score",
                      "dimension_scores": "individual_quality_dimensions",
                      "critical_issues": "high_priority_problems",
                      "recommendations": "actionable_improvements"
                    },
                    "requirements": "Calculate comprehensive quality score with recommendations",
                    "success_criteria": "Quality score calculated with actionable insights"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Results aggregated",
                  "Quality score calculated",
                  "Recommendations generated"
                ]
              },
              {
                "phase": 4,
                "name": "Report Generation",
                "description": "Generate comprehensive quality report with visualizations",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "quality-report-generator",
                    "description": "Generate formatted quality report with actionable insights",
                    "priority": "high",
                    "inputs": {
                      "quality_score": "from_phase_3",
                      "all_reports": "from_phase_2",
                      "report_format": "comprehensive_markdown",
                      "include_visualizations": true,
                      "output_file": "quality_assessment.md"
                    },
                    "outputs": {
                      "quality_report": "formatted_quality_assessment",
                      "score_visualization": "quality_dimension_chart",
                      "action_items": "prioritized_improvement_list"
                    },
                    "requirements": "Generate user-friendly quality report",
                    "success_criteria": "Comprehensive report generated with clear insights"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Quality report generated",
                  "Visualizations created",
                  "Action items listed"
                ]
              }
            ],
            "context": {
              "chapter_number": "[chapter_from_arguments]",
              "operation_type": "individual_chapter_quality_validation",
              "paths": {
                "chapter_root": "/absolute/path/to/chapters/ch{NNN}/",
                "bible_path": "/absolute/path/to/bible.yaml",
                "entity_dictionary": "/absolute/path/to/entity_dictionary.yaml"
              }
            },
            "success_criteria": [
              "All prerequisites validated successfully",
              "4 parallel validators executed efficiently",
              "Results aggregated and analyzed",
              "Weighted quality score calculated",
              "Comprehensive report generated with recommendations"
            ],
            "notes": "This plan implements parallel quality validation for 4x performance improvement, with comprehensive scoring and actionable recommendations for quality improvement."
          },
          {
            "error": true,
            "coordinator": "quality-check-individual-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot execute quality validation",
            "blocking_issues": [
              "Chapter content not found",
              "Bible file missing",
              "Entity dictionary inaccessible"
            ],
            "remediation_steps": [
              "Ensure chapter has been generated",
              "Check Bible exists for current book",
              "Verify entity dictionary has been created"
            ],
            "suggested_commands": [
              "/novel:status",
              "/novel:chapter-view [chapter]",
              "/novel:bible-view"
            ]
          }
        ],
        "validation_rules": [
          "chapter internal consistency\",",
          "Individual Coordinator v2",
          "character voice consistency\",",
          "Bible exists for current book\",",
          "Prerequisites**:",
          "all required files and resources exist\",",
          "quality directly** (I only plan the validation)",
          "Individual Coordinator",
          "entity dictionary has been created\"",
          "exist before proceeding\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [
          "work"
        ],
        "error_handling": [
          "recovery strategies.",
          "complex validation orchestration** (parallel execution, aggregation, scoring)",
          "tolerance for partial results",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "Individual Coordinator",
          "invoked, perform analysis and return a structured execution plan for chapter quality validation.",
          "chapter paths and resources",
          "individual validators fail\"",
          "Bible rule compliance\","
        ],
        "validation_logic": [
          "Individual Coordinator",
          "Prerequisites**:",
          "all required files and resources exist\",",
          "all required files exist and are accessible\",",
          "chapter internal consistency\","
        ],
        "business_rules": [
          "Read current project: `.claude/data/context/current_project.json`",
          "Extract project name and book number",
          "Determine chapter paths and resources"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "quality-report-generator",
        "character-voice-cross-validator",
        "bible-compliance-validator",
        "plot-hole-validator",
        "prerequisites-validator",
        "quality-scorer",
        "continuity-guard-specialist"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1327,
      "line_count": 400
    },
    "smart-fix-coordinator": {
      "file": ".claude\\agents\\smart-fix-coordinator.md",
      "name": "smart-fix-coordinator",
      "type": "coordinator",
      "lines": 401,
      "description": "Orchestrates intelligent fixes to achieve 95+ quality score for individual chapters",
      "thinking": "Analyze chapter quality issues strategically - prioritize fixes for maximum quality impact, plan targeted specialist deployments for repairs, design iterative improvement strategy, coordinate quality preservation during modifications, and ensure 95+ threshold achievement. Consider fix prioritization matrix and narrative flow preservation.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 401,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (401 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{NNN}/quality_report.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Intelligent Chapter Quality Fix Pipeline",
            "coordinator": "smart-fix-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "iterative_improvement_cycles",
              "estimated_duration": "60-180 seconds",
              "complexity": "high",
              "retry_strategy": "Iterate until 95+ score achieved or max 3 cycles"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Quality Analysis and Prioritization",
                "description": "Analyze quality issues and prioritize fixes",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "quality-scorer",
                    "description": "Analyze quality report and categorize issues",
                    "priority": "critical",
                    "inputs": {
                      "quality_report": "/absolute/path/to/quality_report.json",
                      "analysis_mode": "comprehensive_issue_categorization",
                      "prioritization_matrix": {
                        "critical": "scores_below_80",
                        "high": "scores_80_85",
                        "medium": "scores_85_90",
                        "low": "scores_90_94"
                      }
                    },
                    "outputs": {
                      "issue_categories": "prioritized_issue_list",
                      "fix_recommendations": "targeted_improvement_strategies",
                      "estimated_impact": "quality_improvement_projections"
                    },
                    "requirements": "Categorize all issues by severity and impact",
                    "success_criteria": "Issues analyzed and fix strategy determined"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Quality issues analyzed",
                  "Fix priorities established"
                ]
              },
              {
                "phase": 2,
                "name": "Critical and High Priority Fixes",
                "description": "Apply fixes for critical and high priority issues",
                "parallel": true,
                "estimated_time": "45 seconds",
                "tasks": [
                  {
                    "agent": "continuity-guard-specialist",
                    "description": "Rewrite sections with Bible compliance issues",
                    "priority": "critical",
                    "inputs": {
                      "chapter_content": "/absolute/path/to/content.md",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "fix_mode": "intelligent_compliance_correction",
                      "preserve_narrative": true
                    },
                    "outputs": {
                      "compliance_fixes": "bible_violation_corrections",
                      "fixed_content": "compliance_corrected_chapter",
                      "fix_report": "compliance_fix_summary"
                    },
                    "requirements": "Fix all Bible compliance issues",
                    "success_criteria": "Bible compliance score improved to 95+",
                    "conditional": "bible_compliance_score < 95"
                  },
                  {
                    "agent": "continuity-guard-specialist",
                    "description": "Repair plot coherence and logic issues",
                    "priority": "critical",
                    "inputs": {
                      "chapter_content": "/absolute/path/to/content.md",
                      "plot_issues": "from_quality_analysis",
                      "fix_strategy": "intelligent_plot_repair",
                      "maintain_flow": true
                    },
                    "outputs": {
                      "plot_fixes": "coherence_improvements",
                      "fixed_content": "plot_corrected_chapter",
                      "fix_report": "plot_fix_summary"
                    },
                    "requirements": "Fix causality breaks and timeline errors",
                    "success_criteria": "Plot coherence score improved to 90+",
                    "conditional": "plot_coherence_score < 90"
                  },
                  {
                    "agent": "dialogue-character-specialist",
                    "description": "Fix character voice consistency issues",
                    "priority": "high",
                    "inputs": {
                      "chapter_content": "/absolute/path/to/content.md",
                      "voice_issues": "from_quality_analysis",
                      "enhancement_mode": "voice_consistency_repair",
                      "character_profiles": "from_bible"
                    },
                    "outputs": {
                      "voice_fixes": "character_voice_improvements",
                      "fixed_content": "voice_enhanced_chapter",
                      "fix_report": "voice_fix_summary"
                    },
                    "requirements": "Enhance character voice consistency",
                    "success_criteria": "Character voice score improved to 90+",
                    "conditional": "character_voice_score < 90"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Critical issues resolved",
                  "High priority fixes applied"
                ]
              },
              {
                "phase": 3,
                "name": "Medium Priority Enhancements",
                "description": "Apply medium priority quality improvements",
                "parallel": true,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "emotion-specialist",
                    "description": "Enhance emotional depth and resonance",
                    "priority": "medium",
                    "inputs": {
                      "chapter_content": "from_previous_fixes",
                      "emotional_gaps": "from_quality_analysis",
                      "enhancement_mode": "subtle_emotional_deepening",
                      "preserve_existing": true
                    },
                    "outputs": {
                      "emotional_enhancements": "resonance_improvements",
                      "enhanced_content": "emotionally_enriched_chapter",
                      "enhancement_report": "emotional_fix_summary"
                    },
                    "requirements": "Deepen emotional resonance naturally",
                    "success_criteria": "Emotional resonance score improved to 90+",
                    "conditional": "emotional_resonance_score < 90"
                  },
                  {
                    "agent": "prose-craft-specialist",
                    "description": "Rewrite sections to optimize pacing and flow",
                    "priority": "medium",
                    "inputs": {
                      "chapter_content": "from_previous_fixes",
                      "pacing_issues": "from_quality_analysis",
                      "adjustment_mode": "intelligent_pacing_optimization",
                      "target_rhythm": "genre_appropriate"
                    },
                    "outputs": {
                      "pacing_adjustments": "flow_improvements",
                      "adjusted_content": "pacing_optimized_chapter",
                      "adjustment_report": "pacing_fix_summary"
                    },
                    "requirements": "Optimize pacing without disrupting narrative",
                    "success_criteria": "Pacing score improved to 90+",
                    "conditional": "pacing_score < 90"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Medium priority issues addressed",
                  "Quality improvements applied"
                ]
              },
              {
                "phase": 4,
                "name": "Polish and Final Validation",
                "description": "Apply final polish and validate quality achievement",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "prose-craft-specialist",
                    "description": "Apply final prose enhancements",
                    "priority": "low",
                    "inputs": {
                      "chapter_content": "from_all_fixes",
                      "polish_mode": "light_touch_refinement",
                      "preserve_voice": true,
                      "genre_style": "from_bible"
                    },
                    "outputs": {
                      "prose_improvements": "final_polish_edits",
                      "polished_content": "final_chapter_version",
                      "polish_report": "refinement_summary"
                    },
                    "requirements": "Light polish without major changes",
                    "success_criteria": "Prose quality enhanced without disruption",
                    "conditional": "prose_craft_score < 94"
                  },
                  {
                    "agent": "quality-scorer",
                    "description": "Validate final quality score achievement",
                    "priority": "critical",
                    "inputs": {
                      "chapter_content": "final_fixed_version",
                      "scoring_mode": "comprehensive_quality_assessment",
                      "target_threshold": 95,
                      "generate_report": true
                    },
                    "outputs": {
                      "final_score": "overall_quality_rating",
                      "dimension_scores": "individual_quality_dimensions",
                      "validation_report": "quality_achievement_summary"
                    },
                    "requirements": "Verify 95+ quality score achieved",
                    "success_criteria": "Final score meets or exceeds 95 threshold"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Final polish applied",
                  "95+ quality score achieved"
                ]
              }
            ],
            "iteration_strategy": {
              "max_iterations": 3,
              "iteration_trigger": "final_score < 95",
              "iteration_adjustments": "Focus on remaining low-scoring dimensions",
              "termination_criteria": "score >= 95 OR iterations == 3"
            },
            "context": {
              "chapter_number": "[chapter_from_arguments]",
              "operation_type": "intelligent_quality_fixes",
              "paths": {
                "chapter_root": "/absolute/path/to/chapters/ch{NNN}/",
                "quality_report": "/absolute/path/to/quality_report.json",
                "bible_path": "/absolute/path/to/bible.yaml"
              }
            },
            "success_criteria": [
              "All critical issues (score < 80) resolved",
              "High priority issues (80-85) addressed",
              "Medium priority issues (85-90) improved",
              "Final quality score >= 95 achieved",
              "Narrative flow preserved throughout fixes"
            ],
            "notes": "This plan implements intelligent, prioritized fixes to achieve 95+ quality scores through targeted specialist deployments and iterative improvement cycles."
          },
          {
            "error": true,
            "coordinator": "smart-fix-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot execute smart fixes",
            "blocking_issues": [
              "Quality report not found - run quality-check-individual first",
              "Chapter content missing",
              "Current score already exceeds 95"
            ],
            "remediation_steps": [
              "Run /novel:quality-check-individual [chapter] first",
              "Ensure chapter content exists",
              "Check if fixes are needed (score < 95)"
            ],
            "suggested_commands": [
              "/novel:quality-check-individual [chapter]",
              "/novel:status",
              "/novel:chapter-view [chapter]"
            ]
          }
        ],
        "validation_rules": [
          "quality report: `",
          "if fixes are needed (score < 95)\"",
          "quality directly** (only plan the validation)",
          "Prerequisites**:",
          "quality achievement\",",
          "final quality score achievement\",",
          "95+ threshold achievement",
          "chapter content exists\",",
          "95+ quality score achieved\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "complex fix orchestration** (prioritization, targeting, iteration planning)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for smart chapter fixes.",
          "iteration strategy needs",
          "quality report",
          "prerequisites aren't met or validation fails, return",
          "if fixes are needed (score < 95)\""
        ],
        "validation_logic": [
          "95+ threshold achievement. Consider fix prioritization matrix and narrative flow preservation.",
          "quality report: `.../chapters/ch{NNN}/quality_report.json`",
          "Prerequisites**:",
          "quality achievement\",",
          "final quality score achievement\","
        ],
        "business_rules": [
          "Determine iteration strategy needs"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "emotion-specialist",
        "quality-scorer",
        "continuity-guard-specialist",
        "prose-craft-specialist",
        "dialogue-character-specialist"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1398,
      "line_count": 401
    },
    "smart-fix-cross-coordinator": {
      "file": ".claude\\agents\\smart-fix-cross-coordinator.md",
      "name": "smart-fix-cross-coordinator",
      "type": "coordinator",
      "lines": 406,
      "description": "Orchestrates cross-chapter consistency fixes in proper sequence",
      "thinking": "Plan cross-chapter fix strategy carefully - analyze cross-chapter consistency issues, prioritize fixes by dependency order, plan detection and rewrite phases, design validation checkpoints, and ensure narrative coherence across multiple chapters. Apply detect-and-rewrite pattern systematically.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 406,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (406 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Cross-Chapter Consistency Fix Pipeline",
            "coordinator": "smart-fix-cross-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "chapter_range": "[affected chapters]",
              "issues_identified": "[from cross-chapter report]",
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_detect_and_rewrite",
              "estimated_duration": "180-300 seconds",
              "complexity": "high",
              "retry_strategy": "Fix critical issues first, validate between phases"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Cross-Chapter Issue Detection",
                "description": "Comprehensive detection of all consistency issues",
                "parallel": true,
                "estimated_time": "45 seconds",
                "tasks": [
                  {
                    "agent": "cross-chapter-flow-validator",
                    "description": "Detect flow and transition issues",
                    "priority": "critical",
                    "inputs": {
                      "chapter_range": "[affected chapters]",
                      "validation_scope": {
                        "time_continuity": true,
                        "scene_transitions": true,
                        "character_positions": true
                      }
                    },
                    "outputs": {
                      "flow_issues": "transition_problems",
                      "affected_chapters": "chapters_needing_fixes"
                    },
                    "success_criteria": "All flow issues mapped"
                  },
                  {
                    "agent": "story-thread-tracker",
                    "description": "Detect plot thread inconsistencies",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "[affected chapters]",
                      "tracking_scope": {
                        "thread_continuity": true,
                        "subplot_progression": true,
                        "mystery_elements": true
                      }
                    },
                    "outputs": {
                      "thread_issues": "plot_inconsistencies",
                      "affected_sections": "sections_to_rewrite"
                    },
                    "success_criteria": "Plot issues identified"
                  },
                  {
                    "agent": "foreshadowing-payoff-mapper",
                    "description": "Map broken foreshadowing connections",
                    "priority": "medium",
                    "inputs": {
                      "chapter_range": "[affected chapters]",
                      "mapping_scope": {
                        "setup_identification": true,
                        "payoff_tracking": true
                      }
                    },
                    "outputs": {
                      "orphaned_setups": "setups_without_payoffs",
                      "missing_setups": "payoffs_without_setups"
                    },
                    "success_criteria": "Foreshadowing gaps mapped"
                  },
                  {
                    "agent": "character-voice-cross-validator",
                    "description": "Detect character inconsistencies",
                    "priority": "high",
                    "inputs": {
                      "chapter_range": "[affected chapters]",
                      "validation_scope": {
                        "dialogue_patterns": true,
                        "personality_consistency": true
                      }
                    },
                    "outputs": {
                      "voice_inconsistencies": "character_issues",
                      "affected_dialogue": "dialogue_to_rewrite"
                    },
                    "success_criteria": "Character issues found"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "All issues detected",
                  "Fix priorities established"
                ]
              },
              {
                "phase": 2,
                "name": "Timeline and Flow Fixes",
                "description": "Fix foundational timeline and transition issues",
                "parallel": false,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "continuity-guard-specialist",
                    "description": "Rewrite sections with timeline issues",
                    "priority": "critical",
                    "condition": "if flow_issues detected",
                    "inputs": {
                      "affected_chapters": "from_phase_1",
                      "flow_issues": "from_detection",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "fix_strategy": "minimal_changes_for_continuity"
                    },
                    "outputs": {
                      "fixed_chapters": "timeline_corrected_chapters",
                      "changes_made": "timeline_fix_summary"
                    },
                    "success_criteria": "Timeline consistency restored"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Timeline issues resolved",
                  "Flow restored"
                ]
              },
              {
                "phase": 3,
                "name": "Plot Thread Repairs",
                "description": "Fix plot continuity and foreshadowing issues",
                "parallel": false,
                "estimated_time": "60 seconds",
                "tasks": [
                  {
                    "agent": "foreshadowing-specialist",
                    "description": "Add missing setups or payoffs",
                    "priority": "high",
                    "condition": "if foreshadowing_issues detected",
                    "inputs": {
                      "affected_chapters": "from_phase_1",
                      "orphaned_elements": "from_detection",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "integration_mode": "subtle_addition"
                    },
                    "outputs": {
                      "enhanced_chapters": "foreshadowing_fixed_chapters",
                      "additions_made": "foreshadowing_fix_summary"
                    },
                    "success_criteria": "Foreshadowing connections complete"
                  },
                  {
                    "agent": "continuity-guard-specialist",
                    "description": "Repair plot thread continuity",
                    "priority": "high",
                    "condition": "if thread_issues detected",
                    "inputs": {
                      "affected_chapters": "from_phase_1",
                      "thread_issues": "from_detection",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "repair_mode": "thread_reconnection"
                    },
                    "outputs": {
                      "repaired_chapters": "plot_consistent_chapters",
                      "repairs_made": "plot_fix_summary"
                    },
                    "success_criteria": "Plot threads reconnected"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Plot consistency restored",
                  "Foreshadowing aligned"
                ]
              },
              {
                "phase": 4,
                "name": "Character Consistency Fixes",
                "description": "Harmonize character voices and behaviors",
                "parallel": false,
                "estimated_time": "45 seconds",
                "tasks": [
                  {
                    "agent": "dialogue-character-specialist",
                    "description": "Rewrite inconsistent dialogue",
                    "priority": "high",
                    "condition": "if voice_inconsistencies detected",
                    "inputs": {
                      "affected_chapters": "from_phase_1",
                      "voice_issues": "from_detection",
                      "bible_path": "/absolute/path/to/bible.yaml",
                      "character_profiles": "from_bible",
                      "harmonization_mode": "voice_standardization"
                    },
                    "outputs": {
                      "harmonized_chapters": "voice_consistent_chapters",
                      "changes_made": "voice_fix_summary"
                    },
                    "success_criteria": "Character voices harmonized"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Character consistency achieved"
                ]
              },
              {
                "phase": 5,
                "name": "Final Validation",
                "description": "Validate all cross-chapter fixes",
                "parallel": false,
                "estimated_time": "30 seconds",
                "tasks": [
                  {
                    "agent": "cross-chapter-flow-validator",
                    "description": "Validate all fixes maintained consistency",
                    "priority": "critical",
                    "inputs": {
                      "chapter_range": "[all affected chapters]",
                      "validation_mode": "comprehensive",
                      "check_all_dimensions": true
                    },
                    "outputs": {
                      "validation_report": "final_consistency_check",
                      "remaining_issues": "any_unresolved_problems",
                      "consistency_score": "cross_chapter_quality_rating"
                    },
                    "success_criteria": "Cross-chapter consistency validated"
                  }
                ],
                "dependencies": [
                  "Phase 4"
                ],
                "success_criteria": [
                  "All fixes validated",
                  "Consistency achieved"
                ]
              }
            ],
            "context": {
              "chapter_range": "[from arguments or detection]",
              "operation_type": "cross_chapter_consistency_fixes",
              "paths": {
                "project_root": "/absolute/path/to/project",
                "bible_path": "/absolute/path/to/bible.yaml",
                "entity_dictionary": "/absolute/path/to/entity_dictionary.yaml"
              }
            },
            "success_criteria": [
              "All cross-chapter issues detected",
              "Timeline and flow consistency restored",
              "Plot threads properly connected",
              "Character consistency achieved",
              "Final validation passed"
            ],
            "notes": "Sequential fix phases prevent cascading issues. Each phase builds on previous fixes."
          },
          {
            "error": true,
            "coordinator": "smart-fix-cross-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot proceed with cross-chapter fixes",
            "blocking_issues": [
              "Cross-chapter validation report missing",
              "Some chapters don't exist",
              "Required agents unavailable"
            ],
            "remediation_steps": [
              "Run quality-check-cross first",
              "Ensure all chapters exist",
              "Verify agent availability"
            ],
            "suggested_commands": [
              "/novel:quality-check-cross all",
              "/novel:status"
            ]
          }
        ],
        "validation_rules": [
          "narrative coherence** throughout fixes",
          "all cross-chapter fixes\",",
          "Prerequisites**:",
          "narrative coherence across multiple chapters",
          "all chapters exist\",",
          "between phases\"",
          "all fixes maintained consistency\",",
          "agent availability\"",
          "### Step 3: Return Structured Plan"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [
          "timeline"
        ],
        "error_handling": [
          "complex cross-chapter orchestration** (dependency analysis, sequencing, validation)",
          "Response Format"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format",
          "1: Detect all cross-chapter issues",
          "2: Fix timeline/flow issues first (foundation)",
          "3: Fix plot/foreshadowing issues",
          "4: Fix character consistency",
          "5: Validate all fixes"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan.",
          "fix order (timeline  ->  plot  ->  character  ->  pacing)",
          "flow_issues detected\",",
          "foreshadowing_issues detected\",",
          "thread_issues detected\","
        ],
        "validation_logic": [
          "narrative coherence across multiple chapters. Apply detect-and-rewrite pattern systematically.",
          "Prerequisites**:",
          "all fixes",
          "### Step 3: Return Structured Plan",
          "between phases\""
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "character-voice-cross-validator",
        "foreshadowing-specialist",
        "quality-scorer",
        "story-thread-tracker",
        "continuity-guard-specialist",
        "prose-craft-specialist",
        "dialogue-character-specialist",
        "foreshadowing-payoff-mapper",
        "cross-chapter-flow-validator"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1258,
      "line_count": 406
    },
    "standup-coordinator": {
      "file": ".claude\\agents\\standup-coordinator.md",
      "name": "standup-coordinator",
      "type": "coordinator",
      "lines": 442,
      "description": "Generates comprehensive project status reports with multi-dimensional analysis",
      "thinking": "Plan comprehensive status report generation - design multi-dimensional data collection strategy (progress, quality, system health, learning), plan agent activity analysis across categories, design issue detection and risk assessment, plan optimization opportunity identification, structure report generation based on filter type, and prioritize actionable recommendations. Consider complete project visibility needs.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 442,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (442 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Comprehensive Project Status Report Pipeline",
            "coordinator": "standup-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "parallel_collection_with_aggregated_analysis",
              "estimated_duration": "45-60 seconds",
              "complexity": "moderate",
              "retry_strategy": "Continue with partial data if some collectors fail"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Parallel Data Collection",
                "description": "Collect data from all project dimensions simultaneously",
                "parallel": true,
                "estimated_time": "20 seconds",
                "tasks": [
                  {
                    "agent": "progress-metrics-collector",
                    "description": "Collect progress and completion metrics",
                    "priority": "high",
                    "inputs": {
                      "project_path": "/absolute/path/to/project",
                      "collection_scope": {
                        "bible_completeness": true,
                        "chapter_progress": true,
                        "timeline_tracking": true,
                        "word_count_analysis": true
                      }
                    },
                    "outputs": {
                      "progress_data": "completion_metrics",
                      "chapter_pipeline": "planned_vs_completed",
                      "timeline_status": "schedule_adherence",
                      "productivity_metrics": "writing_velocity"
                    },
                    "requirements": "Comprehensive progress data collection",
                    "success_criteria": "Progress metrics collected and analyzed"
                  },
                  {
                    "agent": "quality-metrics-analyzer",
                    "description": "Analyze quality scores and trends",
                    "priority": "high",
                    "inputs": {
                      "quality_reports_path": "/absolute/path/to/quality_reports",
                      "analysis_scope": {
                        "score_distribution": true,
                        "improvement_trends": true,
                        "genre_compliance": true,
                        "bible_adherence": true
                      }
                    },
                    "outputs": {
                      "quality_summary": "aggregate_quality_metrics",
                      "score_distribution": "chapter_quality_breakdown",
                      "trend_analysis": "quality_improvement_patterns",
                      "compliance_status": "genre_and_bible_alignment"
                    },
                    "requirements": "Complete quality analysis across chapters",
                    "success_criteria": "Quality metrics analyzed with trends identified"
                  },
                  {
                    "agent": "system-health-monitor",
                    "description": "Assess system and agent performance",
                    "priority": "medium",
                    "inputs": {
                      "system_logs_path": "/absolute/path/to/logs",
                      "monitoring_scope": {
                        "agent_utilization": true,
                        "execution_efficiency": true,
                        "error_patterns": true,
                        "resource_usage": true
                      }
                    },
                    "outputs": {
                      "system_health": "overall_system_status",
                      "agent_performance": "utilization_and_efficiency",
                      "error_analysis": "failure_patterns_and_issues",
                      "optimization_opportunities": "performance_improvements"
                    },
                    "requirements": "System health and performance assessment",
                    "success_criteria": "System metrics collected and analyzed"
                  },
                  {
                    "agent": "context-learning-assessor",
                    "description": "Evaluate context synchronization and learning",
                    "priority": "medium",
                    "inputs": {
                      "context_path": "/absolute/path/to/context",
                      "assessment_scope": {
                        "entity_evolution": true,
                        "context_freshness": true,
                        "learning_effectiveness": true,
                        "knowledge_gaps": true
                      }
                    },
                    "outputs": {
                      "learning_status": "context_synchronization_health",
                      "entity_tracking": "dictionary_evolution_metrics",
                      "knowledge_assessment": "system_learning_effectiveness",
                      "gap_analysis": "identified_knowledge_gaps"
                    },
                    "requirements": "Context and learning system evaluation",
                    "success_criteria": "Learning metrics assessed and gaps identified"
                  },
                  {
                    "agent": "issue-risk-detector",
                    "description": "Identify blockers, risks, and critical issues",
                    "priority": "high",
                    "inputs": {
                      "project_data": "all_project_files",
                      "detection_scope": {
                        "blocking_issues": true,
                        "quality_risks": true,
                        "continuity_problems": true,
                        "resource_constraints": true
                      }
                    },
                    "outputs": {
                      "critical_issues": "immediate_blockers",
                      "risk_assessment": "potential_problems",
                      "continuity_alerts": "consistency_warnings",
                      "resource_status": "constraint_analysis"
                    },
                    "requirements": "Comprehensive issue and risk detection",
                    "success_criteria": "All issues and risks identified and categorized"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "All dimensions collected",
                  "Data ready for analysis"
                ]
              },
              {
                "phase": 2,
                "name": "Data Aggregation and Analysis",
                "description": "Aggregate collected data and perform cross-dimensional analysis",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "data-aggregator",
                    "description": "Aggregate and correlate multi-dimensional data",
                    "priority": "critical",
                    "inputs": {
                      "progress_data": "from_phase_1",
                      "quality_data": "from_phase_1",
                      "system_data": "from_phase_1",
                      "learning_data": "from_phase_1",
                      "issue_data": "from_phase_1",
                      "aggregation_strategy": {
                        "correlation_analysis": true,
                        "pattern_detection": true,
                        "anomaly_identification": true,
                        "trend_projection": true
                      }
                    },
                    "outputs": {
                      "aggregated_status": "unified_project_view",
                      "correlations": "cross_dimensional_relationships",
                      "patterns": "identified_trends_and_patterns",
                      "projections": "estimated_completion_and_outcomes"
                    },
                    "requirements": "Complete data aggregation with correlation analysis",
                    "success_criteria": "Data aggregated and patterns identified"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "Data aggregated",
                  "Analysis complete"
                ]
              },
              {
                "phase": 3,
                "name": "Insight Generation and Prioritization",
                "description": "Generate actionable insights and prioritized recommendations",
                "parallel": false,
                "estimated_time": "10 seconds",
                "tasks": [
                  {
                    "agent": "insight-generator",
                    "description": "Generate insights and prioritized recommendations",
                    "priority": "high",
                    "inputs": {
                      "aggregated_data": "from_phase_2",
                      "project_context": "from_initial_load",
                      "insight_generation": {
                        "critical_findings": true,
                        "optimization_opportunities": true,
                        "risk_mitigation": true,
                        "next_actions": true
                      },
                      "prioritization_matrix": {
                        "impact_assessment": true,
                        "effort_estimation": true,
                        "dependency_mapping": true,
                        "urgency_scoring": true
                      }
                    },
                    "outputs": {
                      "key_insights": "critical_findings_and_observations",
                      "recommendations": "prioritized_action_items",
                      "optimization_plan": "efficiency_improvements",
                      "risk_mitigation": "preventive_measures"
                    },
                    "requirements": "Generate actionable insights with clear priorities",
                    "success_criteria": "Insights generated and recommendations prioritized"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Insights generated",
                  "Recommendations prioritized"
                ]
              },
              {
                "phase": 4,
                "name": "Report Generation and Formatting",
                "description": "Generate comprehensive status report with visualizations",
                "parallel": false,
                "estimated_time": "15 seconds",
                "tasks": [
                  {
                    "agent": "report-formatter",
                    "description": "Generate formatted status report with visualizations",
                    "priority": "high",
                    "inputs": {
                      "all_data": "from_phases_1_2_3",
                      "report_filter": "[arguments_filter_or_comprehensive]",
                      "report_components": {
                        "executive_summary": true,
                        "progress_dashboard": true,
                        "quality_metrics": true,
                        "system_health": true,
                        "issues_and_risks": true,
                        "recommendations": true,
                        "visualizations": true
                      },
                      "output_format": "markdown_with_tables_and_charts"
                    },
                    "outputs": {
                      "status_report": "comprehensive_project_status",
                      "report_path": "/absolute/path/to/status_report.md",
                      "dashboard_data": "metrics_for_visualization",
                      "action_summary": "quick_reference_actions"
                    },
                    "requirements": "Generate comprehensive, readable status report",
                    "success_criteria": "Report generated with all components and visualizations"
                  }
                ],
                "dependencies": [
                  "Phase 3"
                ],
                "success_criteria": [
                  "Report generated",
                  "Visualizations complete"
                ]
              }
            ],
            "report_filters": {
              "comprehensive": "Full multi-dimensional analysis",
              "progress": "Focus on completion and timeline",
              "quality": "Emphasis on quality metrics and trends",
              "health": "System and agent performance focus",
              "critical": "Only blockers and urgent items"
            },
            "context": {
              "report_type": "[filter_from_arguments_or_comprehensive]",
              "operation_type": "project_status_reporting",
              "paths": {
                "project_root": "/absolute/path/to/project",
                "report_output": "/absolute/path/to/status_report.md",
                "metrics_directory": "/absolute/path/to/metrics/"
              }
            },
            "success_criteria": [
              "All project dimensions analyzed",
              "Multi-dimensional data collected and aggregated",
              "Cross-dimensional patterns identified",
              "Actionable insights generated",
              "Prioritized recommendations provided",
              "Comprehensive report formatted with visualizations"
            ],
            "notes": "This plan implements comprehensive status reporting with parallel data collection, multi-dimensional analysis, and actionable insight generation for complete project visibility."
          },
          {
            "error": true,
            "coordinator": "standup-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot generate status report",
            "blocking_issues": [
              "No active project found",
              "Project structure incomplete",
              "Insufficient data for analysis"
            ],
            "remediation_steps": [
              "Ensure project is initialized",
              "Create Bible and basic structure",
              "Generate at least one chapter"
            ],
            "suggested_commands": [
              "/novel:project-new [name]",
              "/novel:bible-view",
              "/novel:chapter-start 1"
            ]
          }
        ],
        "validation_rules": [
          "Prerequisites**:",
          "project is initialized\",",
          "recent activity patterns"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "complex status orchestration** (collection, analysis, insights generation)",
          "Response Format",
          "error cases** and provide recovery suggestions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for status report generation.",
          "analysis depth requirements",
          "recent activity patterns",
          "some collectors fail\"",
          "prerequisites aren't met or validation fails, return"
        ],
        "validation_logic": [
          "recent activity patterns",
          "Prerequisites**:",
          "project is initialized\","
        ],
        "business_rules": [
          "Read current project: `.claude/data/context/current_project.json`",
          "Identify project type, genre, current book",
          "Assess available data sources",
          "Check recent activity patterns"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "system-health-monitor",
        "quality-metrics-analyzer",
        "progress-metrics-collector",
        "insight-generator",
        "report-formatter",
        "context-learning-assessor",
        "data-aggregator",
        "issue-risk-detector"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1426,
      "line_count": 442
    },
    "status-coordinator": {
      "file": ".claude\\agents\\status-coordinator.md",
      "name": "status-coordinator",
      "type": "coordinator",
      "lines": 289,
      "description": "Orchestrates comprehensive project status reporting with multi-dimensional analysis",
      "thinking": "Analyze project status requirements - determine current project context, assess data availability, plan statistics calculation strategy, design bilingual reporting format, and coordinate comprehensive status analysis. Consider progress metrics, quality indicators, recent activity tracking, and intelligent recommendations before creating execution plan.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 10,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 10"
        },
        {
          "type": "unicode_character",
          "line": 15,
          "char": "🧠",
          "ord": 129504,
          "message": "Unicode character '🧠' found at line 15"
        },
        {
          "type": "unicode_character",
          "line": 17,
          "char": "🔴",
          "ord": 128308,
          "message": "Unicode character '🔴' found at line 17"
        },
        {
          "type": "unicode_character",
          "line": 25,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 25"
        },
        {
          "type": "unicode_character",
          "line": 256,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 256"
        },
        {
          "type": "unicode_character",
          "line": 266,
          "char": "📏",
          "ord": 128207,
          "message": "Unicode character '📏' found at line 266"
        },
        {
          "type": "excessive_lines",
          "lines": 289,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (289 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/book_{N}/",
          "{project}/book_{N}/chapters/"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Comprehensive Project Status Analysis",
            "coordinator": "status-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "validation": {
              "prerequisites_met": true,
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential",
              "estimated_duration": "15-20 seconds",
              "complexity": "moderate",
              "retry_strategy": "Handle missing files gracefully, continue with available data"
            },
            "phases": [
              {
                "phase": 1,
                "name": "Project Context Loading",
                "description": "Load current project and validate data availability",
                "parallel": false,
                "estimated_time": "5 seconds",
                "tasks": [
                  {
                    "agent": "status-report-generator",
                    "description": "Load project context and validate data sources",
                    "priority": "high",
                    "inputs": {
                      "context_file": "/absolute/path/to/current_project.json",
                      "operation_mode": "context_loading",
                      "requirements": "Load project metadata and validate all data sources"
                    },
                    "outputs": {
                      "project_context": "loaded_data_structure",
                      "data_availability": "validation_results"
                    },
                    "requirements": "Validate project exists and core files accessible",
                    "success_criteria": "Project context loaded with data source validation"
                  }
                ],
                "dependencies": [],
                "success_criteria": [
                  "Project context validated",
                  "Data sources confirmed"
                ]
              },
              {
                "phase": 2,
                "name": "Statistics Generation",
                "description": "Calculate comprehensive project statistics and metrics",
                "parallel": false,
                "estimated_time": "8 seconds",
                "tasks": [
                  {
                    "agent": "status-report-generator",
                    "description": "Generate comprehensive project statistics and analysis",
                    "priority": "high",
                    "inputs": {
                      "project_root": "/absolute/path/to/project",
                      "operation_mode": "statistics_generation",
                      "metrics": {
                        "progress_analysis": true,
                        "quality_metrics": true,
                        "time_analysis": true,
                        "recent_activity": true,
                        "completion_estimates": true
                      }
                    },
                    "outputs": {
                      "progress_statistics": "detailed_progress_data",
                      "quality_analysis": "quality_metrics_summary",
                      "time_analysis": "temporal_statistics",
                      "recent_activity": "recent_chapters_data"
                    },
                    "requirements": "Calculate all project metrics with error handling",
                    "success_criteria": "Complete statistics generated with quality analysis"
                  }
                ],
                "dependencies": [
                  "Phase 1"
                ],
                "success_criteria": [
                  "All statistics calculated",
                  "Quality metrics included"
                ]
              },
              {
                "phase": 3,
                "name": "Status Report Generation",
                "description": "Generate formatted bilingual status report with recommendations",
                "parallel": false,
                "estimated_time": "5 seconds",
                "tasks": [
                  {
                    "agent": "status-report-generator",
                    "description": "Generate formatted bilingual status report",
                    "priority": "high",
                    "inputs": {
                      "statistics_data": "from_phase_2",
                      "operation_mode": "report_generation",
                      "formatting": {
                        "bilingual_output": true,
                        "visual_formatting": true,
                        "intelligent_recommendations": true,
                        "quick_commands": true
                      }
                    },
                    "outputs": {
                      "formatted_report": "console_output",
                      "recommendations": "intelligent_suggestions",
                      "quick_commands": "contextual_commands"
                    },
                    "requirements": "Generate comprehensive bilingual status report",
                    "success_criteria": "Complete formatted report with recommendations displayed"
                  }
                ],
                "dependencies": [
                  "Phase 2"
                ],
                "success_criteria": [
                  "Report formatted",
                  "Recommendations provided",
                  "Commands suggested"
                ]
              }
            ],
            "context": {
              "project": "[project name from context]",
              "operation_type": "comprehensive_status_analysis",
              "output_format": "bilingual_console_display",
              "paths": {
                "project_root": "/absolute/path/to/projects/{project}",
                "current_context": "/absolute/path/to/current_project.json",
                "project_json": "/absolute/path/to/project.json"
              }
            },
            "success_criteria": [
              "Project context loaded and validated",
              "Comprehensive statistics calculated",
              "Bilingual status report generated",
              "Intelligent recommendations provided",
              "Quick commands suggested"
            ],
            "notes": "This plan implements comprehensive project status analysis with bilingual reporting, intelligent recommendations, and graceful error handling for missing data sources."
          },
          {
            "error": true,
            "coordinator": "status-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot generate project status",
            "blocking_issues": [
              "No active project found",
              "Project files corrupted or missing",
              "Required data sources unavailable"
            ],
            "remediation_steps": [
              "Run /novel:project-switch to set active project",
              "Verify project files exist and are readable",
              "Check project directory structure integrity"
            ],
            "suggested_commands": [
              "/novel:project-list",
              "/novel:project-switch [project_name]",
              "/novel:system-check"
            ]
          }
        ],
        "validation_rules": [
          "project files exist and are readable\",",
          "project directory structure integrity\"",
          "Prerequisites**:",
          "data availability\",",
          "project exists and core files accessible\",",
          "data sources\",",
          "all data sources\""
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial"
        ],
        "dependencies": [],
        "error_handling": [
          "complex orchestration logic** (data analysis, metric calculations, reporting strategy)",
          "handling for missing data sources",
          "missing files gracefully, continue with available data\"",
          "handling\",",
          "handling for missing data sources.\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "current project context, assess data availability, plan statistics calculation strategy, design bilingual reporting format, and coordinate comprehensive status analysis. Consider progress metrics, quality indicators, recent activity tracking, and intelligent recommendations before creating execution plan.",
          "invoked, perform analysis and return a structured execution plan for project status reporting.",
          "bilingual output preferences",
          "prerequisites aren't met or validation fails, return",
          "project directory structure integrity\""
        ],
        "validation_logic": [
          "Prerequisites**:",
          "data availability\",",
          "data sources\",",
          "all data sources\"",
          "project exists and core files accessible\","
        ],
        "business_rules": [
          "determine current project context, assess data availability, plan statistics calculation strategy, design bilingual reporting format, and coordinate comprehensive status analysis. Consider progress metrics, quality indicators, recent activity tracking, and intelligent recommendations before creating execution plan.",
          "--",
          "Determine bilingual output preferences",
          "Identify critical metrics and recommendations needed"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "status-report-generator"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1096,
      "line_count": 289
    },
    "system-check-coordinator": {
      "file": ".claude\\agents\\system-check-coordinator.md",
      "name": "system-check-coordinator",
      "type": "coordinator",
      "lines": 311,
      "description": "Orchestrates comprehensive system health check with complete architecture analysis",
      "thinking": "Plan comprehensive system health check execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 311,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (311 lines)"
        },
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "**From Main Claude**:",
          "Request for system health check",
          "Optional: specific focus areas or components"
        ],
        "output_format": [
          "**Returns to Main Claude**: JSON execution plan",
          "**Plan includes**: Agent tasks, sequencing, paths, success criteria"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Comprehensive System Architecture Analysis v3.0",
            "coordinator": "system-check-coordinator",
            "timestamp": "ACTUAL_TIMESTAMP_HERE",
            "validation": {
              "prerequisites_met": true,
              "required_agents": [
                "system-scanner",
                "system-analyzer",
                "system-reporter"
              ],
              "blocking_issues": [],
              "warnings": [],
              "ready_to_execute": true
            },
            "execution_strategy": {
              "pattern": "sequential_pipeline",
              "phases": 4,
              "estimated_duration": "20-30 seconds",
              "error_handling": "continue_with_partial_results",
              "data_flow": "scan -> analysis -> report"
            },
            "phases": [
              {
                "phase": 1,
                "name": "System Scanning",
                "description": "Deep scan of all commands and agents",
                "tasks": [
                  {
                    "agent": "system-scanner",
                    "description": "Execute system_check_v5.py with complete semantic extraction and enhanced orphan detection",
                    "priority": "critical",
                    "inputs": {
                      "note": "system_check_v5.py combines V3 completeness (7 extractors) + V4 accuracy (8-pattern orphan detection)"
                    },
                    "outputs": {
                      "scan_data": "Complete system metadata with 17-field ComponentMetadata",
                      "violations": "Comprehensive CLAUDE.md violations detected",
                      "relationships": "Complete call graph with I/O patterns and execution contexts",
                      "report_path": "Auto-generated .claude/report/YYYYMMDD_HHMMSS/"
                    },
                    "expected_duration": "10-15 seconds",
                    "success_criteria": "Complete system_scan.json created (~1MB) with full semantic extraction"
                  }
                ]
              },
              {
                "phase": 2,
                "name": "Architecture Analysis",
                "description": "Analyze relationships and validate compliance",
                "tasks": [
                  {
                    "agent": "system-analyzer",
                    "description": "Analyze scan results using chunked reading approach",
                    "priority": "critical",
                    "inputs": {
                      "report_directory": ".claude/report/[latest]",
                      "scan_type": "system",
                      "output_name": "system_analysis.json",
                      "note": "CRITICAL: Agent will construct full paths internally. DO NOT pass full file names to avoid trigger words."
                    },
                    "prompt_template": "Analyze the scan data in directory: {report_directory}. Scan type: {scan_type}. Output to: {output_name}",
                    "outputs": {
                      "relationships": "Complete call graph and I/O network",
                      "compliance": "All CLAUDE.md violations identified",
                      "health_score": "Calculated system health metrics",
                      "recommendations": "Prioritized improvement suggestions"
                    },
                    "expected_duration": "3-5 seconds",
                    "success_criteria": "system_analysis.json created with health score"
                  }
                ]
              },
              {
                "phase": 3,
                "name": "Report Generation",
                "description": "Generate comprehensive markdown report",
                "tasks": [
                  {
                    "agent": "system-reporter",
                    "description": "Transform analysis into readable report",
                    "priority": "high",
                    "inputs": {
                      "note": "Use same directory as previous phases",
                      "report_directory": ".claude/report/[latest]",
                      "input_type": "analysis",
                      "output_name": "system_report.md"
                    },
                    "outputs": {
                      "markdown_report": "Complete system health report",
                      "visualizations": "Architecture diagrams and tables",
                      "action_items": "Specific fixes for violations"
                    },
                    "expected_duration": "2-3 seconds",
                    "success_criteria": "system_report.md created with all sections"
                  }
                ]
              },
              {
                "phase": 4,
                "name": "Results Summary",
                "description": "Final report location and summary",
                "tasks": [
                  {
                    "note": "Main Claude will display results after execution",
                    "report_location": ".claude/report/ACTUAL_TIMESTAMP_HERE/system_report.md",
                    "summary_from": ".claude/report/ACTUAL_TIMESTAMP_HERE/system_analysis.json"
                  }
                ]
              }
            ],
            "context": {
              "operation_type": "comprehensive_system_health_check",
              "report_format": "markdown_with_json_data",
              "compliance_standard": "CLAUDE.md v6.2",
              "architecture_layers": [
                "commands",
                "coordinators",
                "agents"
              ],
              "paths": {
                "report_base": ".claude/report/",
                "report_directory": ".claude/report/ACTUAL_TIMESTAMP_HERE/",
                "scan_output": ".claude/report/ACTUAL_TIMESTAMP_HERE/system_scan.json",
                "analysis_output": ".claude/report/ACTUAL_TIMESTAMP_HERE/system_analysis.json",
                "report_output": ".claude/report/ACTUAL_TIMESTAMP_HERE/system_report.md"
              }
            },
            "success_criteria": [
              "All system components scanned",
              "Complete relationship graph built",
              "All violations identified",
              "Health score calculated",
              "Readable report generated",
              "Execution under 30 seconds"
            ],
            "failure_recovery": {
              "missing_agents": "Report which agents are missing",
              "scan_failure": "Use partial data if available",
              "analysis_error": "Generate basic report from scan",
              "report_error": "Return raw JSON results"
            },
            "notes": "This plan provides complete system architecture visibility including all components, relationships, data flows, and compliance status. The three-agent pipeline ensures comprehensive analysis while maintaining simplicity."
          },
          {
            "error": true,
            "coordinator": "system-check-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot execute system health check",
            "blocking_issues": [
              "Required agent 'system-scanner' not found",
              "Cannot create report directory"
            ],
            "remediation_steps": [
              "Ensure all three agents exist in .claude/agents/",
              "Check filesystem permissions"
            ],
            "attempted_plan": "[partial plan if applicable]"
          }
        ],
        "validation_rules": [
          "requirements and return a comprehensive execution plan for complete system architecture analysis and compliance validation",
          "prerequisites** (conceptually, not via file operations):",
          "data flow** between pipeline stages",
          "compliance\",",
          "execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute",
          "Coordinator v2",
          "- Optional: specific focus areas or components",
          "Coordinator v3",
          "all three agents exist in",
          "with complete architecture analysis"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [
          "previous"
        ],
        "error_handling": [
          "error cases gracefully, and return detailed JSON plan for Main Claude to execute",
          "-->",
          "orchestration logic** (sequencing, data flow, error handling)",
          "handling at each step",
          "Response Format"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Environment Planning",
          "2: Execution Strategy Design",
          "3: Return Structured Plan",
          "4: Error Response Format",
          "1: Generate an actual timestamp (e.g., \"20250114153045\")",
          "2: Replace ALL instances of {timestamp} or ACTUAL_TIMESTAMP_HERE with this real timestamp",
          "3: Use the same timestamp consistently throughout the entire plan"
        ],
        "decision_points": [
          "with complete architecture analysis",
          "execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute",
          "Coordinator v3.0",
          "requirements and return a comprehensive execution plan for complete system architecture analysis and compliance validation.",
          "invoked, analyze requirements and return a structured execution plan for comprehensive system health checking."
        ],
        "validation_logic": [
          "with complete architecture analysis",
          "execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute",
          "Coordinator v3.0",
          "requirements and return a comprehensive execution plan for complete system architecture analysis and compliance validation.",
          "- Optional: specific focus areas or components"
        ],
        "business_rules": [
          "**From Main Claude**:",
          "Request for system health check",
          "Optional: specific focus areas or components"
        ],
        "success_criteria": [
          "## Instructions"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "system-scanner",
        "system-reporter",
        "system-analyzer"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1182,
      "line_count": 311
    },
    "test-architecture-coordinator": {
      "file": ".claude\\agents\\test-architecture-coordinator.md",
      "name": "test-architecture-coordinator",
      "type": "coordinator",
      "lines": 236,
      "description": "Orchestrates comprehensive Claude Code architecture validation testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "coordinator_executes",
          "message": "Coordinator has execution logic (should only plan)"
        }
      ],
      "io_patterns": {
        "reads": [
          ".claude/testing/temp/"
        ],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Test type parameter (full/quick/recursion/architecture/io/compliance)",
          "Expected test coverage requirements",
          "Safety and cleanup requirements"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Claude Code Architecture Validation Plan",
            "test_phases": [
              {
                "phase": 1,
                "name": "Environment Setup",
                "agents": [
                  "test-environment-setup-agent"
                ],
                "execution": "serial"
              },
              {
                "phase": 2,
                "name": "Core Architecture Tests",
                "agents": [
                  "test-execution-agent"
                ],
                "execution": "serial",
                "tests": [
                  "recursion",
                  "io",
                  "architecture",
                  "competition",
                  "paths",
                  "concurrency",
                  "errors"
                ]
              },
              {
                "phase": 2.5,
                "name": "Real Parallel Execution Test",
                "agents": [
                  "test-parallel-coordinator"
                ],
                "execution": "serial",
                "purpose": "Test true parallel execution via Main Claude Task calls",
                "note": "Coordinator plans parallel execution, Main Claude executes"
              },
              {
                "phase": 3,
                "name": "Advanced I/O Pattern Tests",
                "agents": [
                  "test-io-patterns-agent"
                ],
                "execution": "serial",
                "tests": [
                  "producer-consumer",
                  "shared-reference",
                  "version-control",
                  "atomic-ops"
                ]
              },
              {
                "phase": 4,
                "name": "Format and Standards Validation",
                "agents": [
                  "test-validation-agent"
                ],
                "execution": "serial",
                "tests": [
                  "path-formats",
                  "json-plans",
                  "documentation",
                  "models",
                  "interactions"
                ]
              },
              {
                "phase": 5,
                "name": "Result Collection",
                "agents": [
                  "test-result-collector-agent"
                ],
                "execution": "serial"
              },
              {
                "phase": 6,
                "name": "Safe Cleanup",
                "agents": [
                  "test-cleanup-agent"
                ],
                "execution": "serial"
              }
            ],
            "parameters": {
              "test_directory": ".claude/testing/",
              "report_directory": ".claude/testing/reports/",
              "cleanup_scope": ".claude/testing/temp/",
              "total_tests": 18,
              "estimated_time": "10-15 minutes"
            }
          }
        ],
        "validation_rules": [
          "layer boundaries and responsibilities",
          "reports are saved before cleanup",
          "all paths start with `",
          "phase dependencies are respected",
          "preserved directories intact",
          "only Main Claude can call subagents",
          "no coordinators have Task tool",
          "no agents have Task tool",
          "component line limits",
          "no Task tool in any coordinator files"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "multi_coordinator",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "scenarios"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Environment Setup Planning",
          "2: Test Execution Planning",
          "3: Result Collection Planning",
          "4: Safe Cleanup Planning",
          "1: Planning test environment setup",
          "2: Designing test execution strategy",
          "3: Organizing result collection",
          "4: Ensuring safe cleanup",
          "1: Commands Layer: < 120 lines, delegation focus",
          "2: Main Claude Layer: Has Task tool, orchestrates",
          "3: Coordinators Layer: Return JSON plans, no Task",
          "4: Agents Layer: Execute single tasks, no Task",
          "5: File System Layer: All communication via files"
        ],
        "decision_points": [
          "planning environment setup, I analyze requirements to",
          "directory structure needed** - Test framework, fixtures, reports, temp directories",
          "the appropriate test scenarios based on the test type",
          "component line limits",
          "explicitly requested"
        ],
        "validation_logic": [
          "command patterns",
          "no Task tool in any coordinator files",
          "no Task tool in any agent files",
          "layer boundaries and responsibilities",
          "component line limits"
        ],
        "business_rules": [
          "Test type parameter (full/quick/recursion/architecture/io/compliance)",
          "Expected test coverage requirements",
          "Safety and cleanup requirements",
          "Zero recursion violations",
          "Complete 5-layer architecture compliance",
          ">50% parallel execution efficiency",
          "100% I/O isolation",
          "Safe cleanup without touching production files"
        ],
        "success_criteria": [
          "The test plan will ensure:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 958,
      "line_count": 236
    },
    "test-content-generation-coordinator": {
      "file": ".claude\\agents\\test-content-generation-coordinator.md",
      "name": "test-content-generation-coordinator",
      "type": "coordinator",
      "lines": 225,
      "description": "Creates content generation plan based on Phase 1 analysis for multi-coordinator testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Phase 1 analysis results",
          "Content generation requirements",
          "Output format specifications"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Real Content Generation Execution Plan",
            "phase": "content_generation",
            "dependency_validation": {
              "required_files": [
                ".claude/testing/multi_coordinator_test/analysis_results.json",
                ".claude/testing/multi_coordinator_test/parsed_data.json"
              ],
              "validation_status": "verified",
              "phase1_completion_confirmed": true
            },
            "coordination_strategy": "agent_management",
            "agent_execution_plan": {
              "execution_mode": "sequential",
              "agents_to_call": [
                {
                  "agent": "test-report-generator-agent",
                  "task": "Generate comprehensive test report from analysis results",
                  "inputs": {
                    "analysis_file": ".claude/testing/multi_coordinator_test/analysis_results.json",
                    "data_file": ".claude/testing/multi_coordinator_test/parsed_data.json",
                    "config_file": ".claude/testing/multi_coordinator_test/config.json"
                  },
                  "expected_outputs": [
                    ".claude/testing/multi_coordinator_test/test_report.md",
                    ".claude/testing/multi_coordinator_test/report_metadata.json"
                  ],
                  "dependencies": [
                    "phase1_analysis_complete"
                  ]
                },
                {
                  "agent": "test-summary-generator-agent",
                  "task": "Generate executive summary from comprehensive analysis",
                  "inputs": {
                    "analysis_file": ".claude/testing/multi_coordinator_test/analysis_results.json",
                    "report_file": ".claude/testing/multi_coordinator_test/test_report.md",
                    "config_file": ".claude/testing/multi_coordinator_test/config.json"
                  },
                  "expected_outputs": [
                    ".claude/testing/multi_coordinator_test/executive_summary.json",
                    ".claude/testing/multi_coordinator_test/summary_highlights.txt"
                  ],
                  "dependencies": [
                    "test-report-generator-agent"
                  ]
                }
              ]
            },
            "success_criteria": {
              "phase2_deliverables": [
                "test_report.md with comprehensive analysis report",
                "executive_summary.json with key insights",
                "summary_highlights.txt with business highlights",
                "report_metadata.json with generation details"
              ],
              "collaboration_validation": [
                "Successfully consumed Phase 1 analysis results",
                "Generated content based on real data insights",
                "Demonstrated inter-coordinator collaboration",
                "Validated multi-coordinator architecture pattern"
              ]
            },
            "multi_coordinator_assessment": {
              "phase1_integration": "successful",
              "real_work_performed": true,
              "agent_management_effective": true,
              "collaboration_pattern_validated": true,
              "architecture_compliance": "confirmed"
            }
          },
          {
            "phase2_complete": true,
            "phase1_dependency": "satisfied",
            "collaboration_success": true,
            "content_plan": {
              "ready": true,
              "based_on_phase1": true,
              "execution_time": "3 minutes"
            }
          }
        ],
        "validation_rules": [
          "required data fields**:",
          "verify Phase 1 completion before planning",
          "data integrity**:",
          "be logically consistent",
          "Phase 1 output file exists**:",
          "be present (simple/complex/advanced)",
          "all expected sections are present",
          "be defined (serial/parallel/distributed)",
          "report successful completion",
          "Phase 1 completion:"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: analysis for multi-coordinator testing",
          "1: analysis results",
          "1: results",
          "1: analysis results\",",
          "1: analysis results",
          "1: completion:",
          "1: output file exists**:",
          "1: must report successful completion",
          "1: analysis results, I determine the appropriate content structure:",
          "1: 1. **Sequential generation** (for serial processing):",
          "2: in the multi-coordinator test:",
          "1: analysis results",
          "1: dependency consumption",
          "2: coordinator, I:",
          "1: completion before planning",
          "1: Consuming Phase 1 analysis results",
          "2: Structuring content requirements",
          "3: Planning generation strategy",
          "4: Validating phase dependencies"
        ],
        "decision_points": [
          "Phase 1 output file exists**",
          "JSON structure is well-formed",
          "all validations pass do I proceed with content generation planning.",
          "the appropriate content structure",
          "the content generation strategy based on the processing approach from Phase 1"
        ],
        "validation_logic": [
          "Phase 1 completion:",
          "Phase 1 output file exists**:",
          "`.claude/testing/multi_coordinator_test/phase1_analysis.json` is present",
          "timestamp indicates recent completion",
          "required data fields**:"
        ],
        "business_rules": [
          "Phase 1 analysis results",
          "Content generation requirements",
          "Output format specifications",
          "Successful Phase 1 dependency consumption",
          "Appropriate content structure based on analysis",
          "Clear generation strategy",
          "Proper multi-coordinator collaboration",
          "Ready for execution by agents"
        ],
        "success_criteria": [
          "The content generation plan ensures:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "test-report-generator",
        "test-summary-generator"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 830,
      "line_count": 225
    },
    "test-data-analysis-coordinator": {
      "file": ".claude\\agents\\test-data-analysis-coordinator.md",
      "name": "test-data-analysis-coordinator",
      "type": "coordinator",
      "lines": 220,
      "description": "Analyzes test requirements and creates data processing plan for multi-coordinator testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Task complexity level (simple/complex/advanced)",
          "Data size parameters (50-500)",
          "Test context and requirements"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Real Data Analysis Execution Plan",
            "phase": "data_analysis",
            "coordination_strategy": "agent_management",
            "environment_setup": {
              "create_directories": [
                ".claude/testing/multi_coordinator_test/"
              ],
              "create_test_data": {
                "file": ".claude/testing/multi_coordinator_test/input_data.json",
                "content": {
                  "items": [
                    {
                      "id": 1,
                      "value": 25
                    },
                    {
                      "id": 2,
                      "value": 75
                    },
                    {
                      "id": 3,
                      "value": 150
                    },
                    {
                      "id": 4,
                      "value": 45
                    },
                    {
                      "id": 5,
                      "value": 90
                    },
                    {
                      "id": 6,
                      "value": 200
                    }
                  ]
                }
              },
              "create_config": {
                "file": ".claude/testing/multi_coordinator_test/config.json",
                "content": {
                  "complexity": "complex",
                  "processing_mode": "comprehensive"
                }
              }
            },
            "agent_execution_plan": {
              "execution_mode": "sequential",
              "agents_to_call": [
                {
                  "agent": "test-data-parser-agent",
                  "task": "Parse and process the test data file",
                  "inputs": {
                    "data_file": ".claude/testing/multi_coordinator_test/input_data.json",
                    "config_file": ".claude/testing/multi_coordinator_test/config.json"
                  },
                  "expected_outputs": [
                    ".claude/testing/multi_coordinator_test/parsed_data.json",
                    ".claude/testing/multi_coordinator_test/parsing_log.txt"
                  ]
                },
                {
                  "agent": "test-data-analyzer-agent",
                  "task": "Analyze processed data and generate insights",
                  "inputs": {
                    "source_data": ".claude/testing/multi_coordinator_test/parsed_data.json",
                    "config_file": ".claude/testing/multi_coordinator_test/config.json"
                  },
                  "expected_outputs": [
                    ".claude/testing/multi_coordinator_test/analysis_results.json",
                    ".claude/testing/multi_coordinator_test/analysis_log.txt"
                  ],
                  "dependencies": [
                    "test-data-parser-agent"
                  ]
                }
              ]
            },
            "success_criteria": {
              "phase1_deliverables": [
                "parsed_data.json with processed items",
                "analysis_results.json with statistical insights",
                "analysis logs documenting processing"
              ],
              "validation_points": [
                "All input data successfully processed",
                "Statistical analysis completed",
                "Results ready for Phase 2 consumption"
              ]
            },
            "next_phase_handoff": {
              "coordinator": "test-content-generation-coordinator",
              "input_files": [
                ".claude/testing/multi_coordinator_test/analysis_results.json",
                ".claude/testing/multi_coordinator_test/parsed_data.json"
              ],
              "dependency_signal": "analysis_results.json exists and contains valid analysis data"
            }
          },
          {
            "phase1_complete": true,
            "data_for_phase2": {
              "processing_strategy": "parallel",
              "data_structure": "analyzed",
              "ready_for_content_generation": true
            }
          }
        ],
        "validation_rules": [
          "use parallel execution for efficiency"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "2: consumption\"",
          "1: in multi-coordinator testing:",
          "1: Evaluating task complexity",
          "2: Determining optimal processing strategy",
          "3: Identifying resource requirements",
          "4: Planning data flow for next phases"
        ],
        "decision_points": [
          "analyzing task complexity, I evaluate the complexity parameter and data size to determine",
          "the parameter is unrecognized, ensuring robust handling of various test scenarios.",
          "the optimal processing strategy based on data size",
          "planning resources, I calculate requirements based on complexity and data size"
        ],
        "validation_logic": [],
        "business_rules": [
          "--",
          "Task complexity level (simple/complex/advanced)",
          "Data size parameters (50-500)",
          "Test context and requirements",
          "Clear complexity assessment",
          "Optimal processing strategy selection",
          "Accurate resource estimation",
          "Proper phase dependency setup",
          "Ready for next coordinator consumption"
        ],
        "success_criteria": [
          "The analysis plan ensures:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 816,
      "line_count": 220
    },
    "test-human-in-loop-coordinator": {
      "file": ".claude\\agents\\test-human-in-loop-coordinator.md",
      "name": "test-human-in-loop-coordinator",
      "type": "coordinator",
      "lines": 211,
      "description": "Orchestrates human-in-the-loop test workflows with approval points and conditional execution",
      "thinking": "Design sequential test workflows with human decision points, handle approval/rejection/revision responses through conditional execution planning",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "coordinator_no_json_plan",
          "message": "Coordinator should return JSON execution plan"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow state",
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Test scenario type (simple/complex/iterative)",
          "Workflow requirements",
          "Human interaction preferences"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Human-in-the-Loop Test Workflow Execution Plan",
            "workflow_type": "interactive_sequential_test",
            "execution_phases": [
              {
                "phase_id": "phase_0_initialization",
                "description": "Initialize test workflow state",
                "agent": "test-workflow-initializer-agent",
                "task": "Create workflow state file and test directories",
                "output_files": [
                  ".claude/testing/human_in_loop/workflow_state.json",
                  ".claude/testing/human_in_loop/config.json"
                ],
                "human_review": {
                  "required": false
                }
              },
              {
                "phase_id": "phase_1_generation",
                "description": "Initial test content generation",
                "agent": "test-content-draft-agent",
                "task": "Generate initial draft content for testing",
                "output_file": ".claude/testing/human_in_loop/draft_v1.md",
                "human_review": {
                  "required": true,
                  "prompt": "Please review the initial test draft:\n- APPROVE to continue\n- REJECT to stop\n- REVISE to request changes",
                  "response_branches": {
                    "approve": "continue_to_phase_2",
                    "reject": "terminate_workflow",
                    "revise": "repeat_phase_1_with_feedback"
                  }
                }
              },
              {
                "phase_id": "phase_2_enhancement",
                "description": "Test quality enhancement based on approval",
                "condition": "phase_1_approved",
                "agent": "test-content-enhancer-agent",
                "task": "Enhance test content quality based on feedback",
                "input_file": ".claude/testing/human_in_loop/draft_v1.md",
                "output_file": ".claude/testing/human_in_loop/draft_v2.md",
                "human_review": {
                  "required": true,
                  "prompt": "Review enhanced test version:\n- APPROVE to finalize\n- REJECT to restart\n- REVISE for more changes",
                  "response_branches": {
                    "approve": "continue_to_phase_3",
                    "reject": "return_to_phase_1",
                    "revise": "repeat_phase_2_with_feedback"
                  }
                }
              },
              {
                "phase_id": "phase_3_finalization",
                "description": "Final test preparation for publication",
                "condition": "phase_2_approved",
                "agent": "test-content-finalizer-agent",
                "task": "Format and prepare final test version",
                "input_file": ".claude/testing/human_in_loop/draft_v2.md",
                "output_file": ".claude/testing/human_in_loop/final.md",
                "human_review": {
                  "required": true,
                  "prompt": "Final test confirmation before publication:\n- APPROVE to publish\n- REJECT to cancel",
                  "response_branches": {
                    "approve": "complete_workflow",
                    "reject": "cancel_publication"
                  }
                }
              }
            ],
            "workflow_state_management": {
              "state_file": ".claude/testing/human_in_loop/workflow_state.json",
              "track_revisions": true,
              "maintain_history": true,
              "revision_limit": 3
            },
            "response_handling": {
              "approve_action": "Execute next test phase in sequence",
              "reject_action": "Log rejection reason and terminate test gracefully",
              "revise_action": "Re-execute current test phase with feedback incorporated",
              "timeout_action": "Save test state and pause workflow for later continuation"
            },
            "test_success_criteria": {
              "human_interaction_points": 3,
              "conditional_branches": 8,
              "state_persistence": "enabled",
              "revision_capability": "demonstrated",
              "architecture_compliance": "5-layer preserved",
              "test_validation": "human-in-loop functionality confirmed"
            }
          },
          {
            "workflow_id": "test_unique_id",
            "test_scenario": "complex",
            "current_phase": "phase_2",
            "phases_completed": [
              "phase_1"
            ],
            "revision_count": {
              "phase_1": 1,
              "phase_2": 0
            },
            "human_responses": [
              {
                "phase": "phase_1",
                "response": "approve",
                "timestamp": "2025-09-13T23:00:00Z"
              }
            ],
            "feedback_history": [],
            "test_status": "in_progress"
          }
        ],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "pipeline",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [
          "approval/rejection/revision responses through conditional execution planning"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Planning sequential test agent execution",
          "2: Inserting human decision points for testing",
          "3: Defining conditional branches for test scenarios",
          "4: Managing test workflow state"
        ],
        "decision_points": [
          "continuing)"
        ],
        "validation_logic": [],
        "business_rules": [
          "Test scenario type (simple/complex/iterative)",
          "Workflow requirements",
          "Human interaction preferences"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 726,
      "line_count": 211
    },
    "test-parallel-coordinator": {
      "file": ".claude\\agents\\test-parallel-coordinator.md",
      "name": "test-parallel-coordinator",
      "type": "coordinator",
      "lines": 189,
      "description": "Orchestrates real parallel execution testing with multiple agents",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "coordinator_no_json_plan",
          "message": "Coordinator should return JSON execution plan"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Parallel test execution request",
          "Performance threshold requirements (default: >50% efficiency gain)",
          "Test duration parameters"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Real Parallel Execution Test Plan",
            "test_strategy": "true_parallel",
            "phases": [
              {
                "phase": 1,
                "name": "Test Environment Setup",
                "execution": "serial",
                "tasks": [
                  {
                    "action": "create_directories",
                    "path": ".claude/testing/temp/"
                  },
                  {
                    "action": "generate_shared_data",
                    "file": ".claude/testing/temp/shared_data.json"
                  },
                  {
                    "action": "create_config",
                    "file": ".claude/testing/parallel_test_config.json"
                  }
                ]
              },
              {
                "phase": 2,
                "name": "Serial Baseline Test",
                "execution": "serial",
                "purpose": "Establish baseline performance",
                "agents": [
                  {
                    "agent": "test-parallel-agent-a",
                    "task": "Execute work simulation and record timing"
                  },
                  {
                    "agent": "test-parallel-agent-b",
                    "task": "Execute work simulation and record timing"
                  },
                  {
                    "agent": "test-parallel-agent-c",
                    "task": "Execute work simulation and record timing"
                  }
                ]
              },
              {
                "phase": 3,
                "name": "True Parallel Test",
                "execution": "parallel",
                "purpose": "Test real concurrent execution",
                "agents": [
                  {
                    "agent": "test-parallel-agent-a",
                    "task": "Execute work simulation concurrently"
                  },
                  {
                    "agent": "test-parallel-agent-b",
                    "task": "Execute work simulation concurrently"
                  },
                  {
                    "agent": "test-parallel-agent-c",
                    "task": "Execute work simulation concurrently"
                  }
                ],
                "note": "Main Claude must call all three agents with Task tool simultaneously"
              },
              {
                "phase": 4,
                "name": "Results Analysis",
                "execution": "serial",
                "tasks": [
                  {
                    "action": "collect_results",
                    "sources": [
                      ".claude/testing/temp/agent_a_result.json",
                      ".claude/testing/temp/agent_b_result.json",
                      ".claude/testing/temp/agent_c_result.json"
                    ]
                  },
                  {
                    "action": "calculate_performance",
                    "metrics": [
                      "serial_total_time",
                      "parallel_total_time",
                      "efficiency_gain"
                    ]
                  },
                  {
                    "action": "validate_concurrency",
                    "check": "overlapping_execution_times"
                  }
                ]
              }
            ],
            "success_criteria": {
              "parallel_efficiency_gain": "> 50%",
              "concurrent_execution": "overlapping timestamps",
              "file_integrity": "no corruption or conflicts",
              "agent_independence": "separate result files"
            },
            "expected_outcome": {
              "serial_time": "sum of individual agent times",
              "parallel_time": "max of overlapping agent times",
              "efficiency_gain": "(serial_time - parallel_time) / serial_time * 100"
            }
          }
        ],
        "validation_rules": [
          "complete in ~33% of serial time)",
          "call all three agents with Task tool simultaneously\"",
          "agents ran simultaneously, not sequentially"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "3: execution:",
          "3: 1. Call all three test agents simultaneously using Task tool",
          "1: Planning environment setup for parallel testing",
          "2: Designing serial baseline measurement",
          "3: Orchestrating true parallel execution via Main Claude's Task tool",
          "4: Planning performance analysis and validation",
          "1: Call all three test agents simultaneously using Task tool",
          "2: Do NOT wait for completion between calls",
          "3: Let agents execute concurrently",
          "4: Collect results after all complete"
        ],
        "decision_points": [],
        "validation_logic": [
          "agents ran simultaneously, not sequentially"
        ],
        "business_rules": [
          "Parallel test execution request",
          "Performance threshold requirements (default: >50% efficiency gain)",
          "Test duration parameters"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 625,
      "line_count": 189
    },
    "test-python-pipeline-coordinator": {
      "file": ".claude\\agents\\test-python-pipeline-coordinator.md",
      "name": "test-python-pipeline-coordinator",
      "type": "coordinator",
      "lines": 82,
      "description": "Orchestrates Python script pipeline test with sequential data processing",
      "thinking": "Plan sequential Python script execution through multiple agents with data transformation",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "plan_name": "Python Pipeline Test Execution Plan",
            "pipeline_type": "sequential_data_processing",
            "execution_phases": [
              {
                "phase_id": "phase_1_generation",
                "description": "Generate initial test data using Python",
                "agent": "test-python-generator-agent",
                "task": "Execute Python script to generate test data with size parameter: medium. The script data_generator.py will create stage1_data.json and stage1_report.json in .claude/testing/python_pipeline/",
                "output_files": [
                  ".claude/testing/python_pipeline/stage1_data.json",
                  ".claude/testing/python_pipeline/stage1_report.json"
                ]
              },
              {
                "phase_id": "phase_2_transformation",
                "description": "Transform data using Python",
                "agent": "test-python-transformer-agent",
                "task": "Execute Python script to transform stage1 data. The script data_transformer.py will read stage1_data.json and create stage2_data.json and stage2_report.json",
                "input_file": ".claude/testing/python_pipeline/stage1_data.json",
                "output_files": [
                  ".claude/testing/python_pipeline/stage2_data.json",
                  ".claude/testing/python_pipeline/stage2_report.json"
                ]
              },
              {
                "phase_id": "phase_3_analysis",
                "description": "Analyze transformed data using Python",
                "agent": "test-python-analyzer-agent",
                "task": "Execute Python script to analyze stage2 data. The script data_analyzer.py will read stage2_data.json and create stage3_analysis.json, stage3_report.json, and PIPELINE_SUMMARY.txt",
                "input_file": ".claude/testing/python_pipeline/stage2_data.json",
                "output_files": [
                  ".claude/testing/python_pipeline/stage3_analysis.json",
                  ".claude/testing/python_pipeline/stage3_report.json",
                  ".claude/testing/python_pipeline/PIPELINE_SUMMARY.txt"
                ]
              }
            ],
            "data_flow": {
              "stage1_to_stage2": "stage1_data.json",
              "stage2_to_stage3": "stage2_data.json",
              "final_output": "stage3_analysis.json"
            },
            "execution_instructions": {
              "for_main_claude": "Execute each agent in sequence using Task tool",
              "wait_between_phases": true,
              "verify_output_before_next": true
            },
            "success_criteria": {
              "all_scripts_execute": true,
              "data_flows_correctly": true,
              "no_data_loss": true,
              "final_summary_created": true
            }
          }
        ],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "test-python-generator"
      ],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 292,
      "line_count": 82
    },
    "unified-update-pipeline-coordinator": {
      "file": ".claude\\agents\\unified-update-pipeline-coordinator.md",
      "name": "unified-update-pipeline-coordinator",
      "type": "coordinator",
      "lines": 371,
      "description": "Orchestrates parallel execution of all system updaters after quality approval",
      "thinking": "Consider the parallel execution strategy carefully - ensure all 6 updaters can run simultaneously without conflicts, verify quality thresholds before proceeding, plan error recovery for partial failures, and think about file locking needs for concurrent updates. Return structured JSON plan for Main Claude to execute parallel updates.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 371,
          "limit": 250,
          "message": "Coordinator exceeds 250 lines (371 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "error": true,
            "coordinator": "unified-update-pipeline-coordinator",
            "timestamp": "[current ISO-8601 timestamp]",
            "message": "Cannot execute update pipeline",
            "blocking_issues": [
              "Chapter quality score below threshold (actual: X, required: 95)",
              "Chapter content file not found",
              "Quality report missing"
            ],
            "remediation_steps": [
              "Run /novel:smart-fix to improve quality",
              "Complete chapter generation first",
              "Run quality scorer to generate report"
            ],
            "suggested_commands": [
              "/novel:smart-fix [chapter]",
              "/novel:quality-check-individual [chapter]"
            ]
          }
        ],
        "validation_rules": [
          "chapter meets learning threshold\",",
          "3-digit format (e",
          "Prerequisites**:",
          "project is active",
          "chapter quality meets threshold\",",
          "all 6 updaters can run simultaneously without conflicts, verify quality thresholds before proceeding, plan error recovery for partial failures, and think about file locking needs for concurrent updates",
          "no file conflicts between updaters",
          "score >= 95 to proceed\","
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "pipeline",
          "human_in_loop",
          "atomic"
        ],
        "dependencies": [
          "for"
        ],
        "error_handling": [
          "recovery for partial failures, and think about file locking needs for concurrent updates. Return structured JSON plan for Main Claude to execute parallel updates.",
          "parallel update orchestration** (6 updaters simultaneously)",
          "Response Format",
          "error cases** and provide recovery paths"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Context Analysis",
          "2: Orchestration Planning",
          "3: Return Structured Plan",
          "4: Error Response Format"
        ],
        "decision_points": [
          "invoked, perform analysis and return a structured execution plan for unified updates.",
          "trigger (automatic vs manual)",
          "prerequisites aren't met or validation fails, return"
        ],
        "validation_logic": [
          "all 6 updaters can run simultaneously without conflicts, verify quality thresholds before proceeding, plan error recovery for partial failures, and think about file locking needs for concurrent updates. Return structured JSON plan for Main Claude to execute parallel updates.",
          "3-digit format (e.g., \"001\")",
          "project is active",
          "Prerequisites**:",
          "no file conflicts between updaters"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [
        "world-context-updater",
        "characters-context-updater",
        "chapter-meta-updater",
        "quality-validator",
        "update-report-generator",
        "project-stats-updater",
        "entity-dictionary-updater",
        "plot-context-updater"
      ],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "coordinator"
      },
      "word_count": 1231,
      "line_count": 371
    }
  },
  "agents": {
    "archive-creator": {
      "file": ".claude\\agents\\archive-creator.md",
      "name": "archive-creator",
      "type": "agent",
      "lines": 282,
      "description": "Creates comprehensive archive of completed book artifacts",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Glob"
      ],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/archives/book_{N}_${timestamp}",
          "{archive_path}/chapters/ch{chapter['number']:03d}/",
          "{archive_path}/manifest.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "timestamp",
          "archive_path"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "files are non-empty\"",
          "all expected files present\""
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Preparation",
          "2: Manuscript Collection",
          "3: Chapter Preservation",
          "4: Context and Reports",
          "5: Finalization",
          "1: Archive Structure Design",
          "2: Artifact Collection",
          "3: Integrity Verification"
        ],
        "decision_points": [
          "files are non-empty\"",
          "Creating Archive"
        ],
        "validation_logic": [
          "all expected files present\"",
          "files are non-empty\"",
          "\"Confirm directory hierarchy\""
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 702,
      "line_count": 282
    },
    "author-voice-signature-specialist": {
      "file": ".claude\\agents\\author-voice-signature-specialist.md",
      "name": "author-voice-signature-specialist",
      "type": "agent",
      "lines": 357,
      "description": "Injects consistent, unique author voice signature into cozy mystery chapters",
      "thinking": "Inject unique author voice signature with strategic thinking - analyze text for voice opportunities, distribute humor naturally throughout narrative, apply distinctive narrative habits consistently, transform dialogue with character-specific fingerprints, weave in unique sensory preferences, maintain voice consistency across scenes, avoid cliche patterns systematically, and ensure authentic cozy mystery warmth. Focus on creating a memorable, distinctive voice that readers will recognize instantly.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 54,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 54"
        },
        {
          "type": "unicode_character",
          "line": 78,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 78"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v09_humanized.md",
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v10_voice_signature.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "\"The kind of silence that made even the coffee maker seem judgmental\"\n   - **Self-deprecating** (25%): Protagonist's gentle self-awareness\n     * Example: \"Her detective skills, honed by years of finding lost socks\"\n   - **Situational irony** (25%): Life's small contradictions\n     * Example: \"The fire chief's smoke alarm batteries had died months ago\"\n   - **Gentle satire** (15%): Light commentary on community quirks\n     * Example: \"The town council meeting where nothing was decided except the next meeting date\"",
          "structures:\n   - \"There's a particular kind of tired that only [specific situation]\"\n   - \"Nobody ever mentions [overlooked truth about common experience]\"\n   - \"[Character] wondered if everyone [relatable private thought]\"",
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Document voice elements added\n   - Confirm: \"[x] Voice signature applied and saved atomically to v10_voice_signature.md\"",
          "1: Humor Injection\n**Before**: \"Maria noticed the flour on the counter.\"",
          "2: Dialogue Transformation\n**Before**: \n\"Did you see Rosa yesterday?\" Jose asked.\n\"No, I didn't,\" Carmen replied.",
          "3: Sensory Signature\n**Before**: \"The morning was quiet and peaceful.\"",
          "4: Philosophical Aside\n**Before**: \"She walked to the harbor.\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "authentic cozy mystery warmth",
          "DIRECTLY edit the content and save it",
          "consistency across all elements",
          "actively modify the content:",
          "voice enhances rather than obscures"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "\"[ ] FATAL: Cannot proceed - v09_humanized.md is missing\"",
          "\"[ ] Pipeline incomplete - Steps 3-9 may have been skipped\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: VERIFICATION",
          "2: VOICE SIGNATURE INJECTION",
          "3: CONSISTENCY MECHANISMS",
          "4: DISTINCTIVE DETAIL INJECTION",
          "5: APPLY ALL VOICE ENHANCEMENTS",
          "6: SAVE VOICE-ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "v09_humanized.md does NOT exist",
          "voice_profile missing or incomplete",
          "no genre specified**",
          "voice_profile specifies"
        ],
        "validation_logic": [
          "authentic cozy mystery warmth. Focus on creating a memorable, distinctive voice that readers will recognize instantly.",
          "- [ ] Humor feels natural, not forced",
          "voice enhances rather than obscures",
          "consistency across all elements"
        ],
        "business_rules": [
          "genre_elements: cozy mystery warmth and humor requirements",
          "If using British spelling, stay consistent",
          "If established a metaphor system, continue it",
          "If created a character's speech pattern, preserve it",
          "15-20% humor content (distributed)",
          "60% distinctive dialogue styling",
          "25% unique sensory details",
          "2-3 philosophical asides",
          "100% consistency with established voice"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1937,
      "line_count": 357
    },
    "bible-architect": {
      "file": ".claude\\agents\\bible-architect.md",
      "name": "bible-architect",
      "type": "agent",
      "lines": 458,
      "description": "Master architect who designs comprehensive Series Bible structure and ensures all components work together harmoniously",
      "thinking": "Design comprehensive Bible structures with architectural mastery - create logical hierarchical organization, ensure all narrative elements integrate harmoniously, maintain consistency across all components, design for long-term series sustainability, implement quality standards throughout, validate completeness and coherence, consider genre-specific requirements deeply, and incorporate language variant rules systematically. Focus on building a solid foundation that supports 12+ book series with consistent excellence.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "be complete (no missing critical sections)",
          "be in English",
          "read the Series Bible first:**",
          "character arcs align with plot progression",
          "your prompt for \"Bible Type:\" to determine which to create:",
          "be in English), genre, subgenre, series_type",
          "be English/Western name",
          "which mode you're in by looking for review feedback in your prompt",
          "world-building supports story needs",
          "DIRECTLY create the Bible YAML and save it"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "Book Bible Inheritance (CRITICAL)"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Parse Input Requirements and Read Files",
          "2: Design/Improve Bible Structure",
          "3: Address Review Feedback (if improving)",
          "4: Save Your Bible"
        ],
        "decision_points": [
          "your prompt for \"Bible Type",
          "which to create",
          "reading existing Bible, concentrate on",
          "designing Bible components, think deeply about structural harmony and long-term sustainability. Keep thinking about",
          "which mode you're in by looking for review feedback in your prompt."
        ],
        "validation_logic": [
          "all narrative elements integrate harmoniously, maintain consistency across all components, design for long-term series sustainability, implement quality standards throughout, validate completeness and coherence, consider genre-specific requirements deeply, and incorporate language variant rules systematically. Focus on building a solid foundation that supports 12+ book series with consistent excellence.",
          "your prompt for \"Bible Type:\" to determine which to create:",
          "which mode you're in by looking for review feedback in your prompt.",
          "all necessary sections are included",
          "character arcs align with plot progression"
        ],
        "business_rules": [
          "--",
          "*ALL content MUST be in ENGLISH**:",
          "Character names: Use English/Western names (John, Sarah, Michael, etc.)",
          "Location names: Use English names or well-known international places",
          "All text, descriptions, and content must be in English",
          "NO Chinese characters, pinyin, or non-English content allowed",
          "continuity_framework: established timelines and consistency rules",
          "Prepare variant-specific guidelines",
          "-ize/-ise preference",
          "-or/-our preference",
          "specific vocabulary choices",
          "vocabulary_preferences:",
          "formality_level: formal/semi-formal/conversational/casual",
          "technical_terms: avoided/explained/embraced",
          "period_appropriate: modern/timeless/historical",
          "ai_detection_focus: genre-specific patterns to avoid",
          "amateur_detective: true",
          "community_setting: true",
          "gentle_mystery: true",
          "food_culture: true (adapt to story elements)",
          "local_traditions: true",
          "ai_detection_focus:",
          "avoid_patterns: [\"repetitive_comfort_descriptions\"]",
          "time_pressure: true",
          "escalating_stakes: true",
          "competent_antagonist: true",
          "physical_stakes: true",
          "ai_detection_focus:",
          "avoid_patterns: [\"repetitive_action_descriptions\", \"mechanical_tension_building\"]",
          "mutual_attraction: true",
          "character_growth_through_love: true",
          "satisfying_emotional_resolution: true",
          "consent_and_respect: true",
          "ai_detection_focus:",
          "avoid_patterns: [\"cliched_romance_phrases\", \"insta-love_without_development\"]",
          "consistent_magic_system: true",
          "believable_world_building: true",
          "magic_has_costs: true",
          "cultural_integration: true",
          "ai_detection_focus:",
          "avoid_patterns: [\"generic_fantasy_terminology\", \"unlimited_magic_solutions\"]",
          "All required sections included (8 for Series, 7 for Book Bible)",
          "Genre_configuration section included in all Book Bibles (MANDATORY)",
          "Specific details, not placeholders",
          "Character arcs mapped by chapter",
          "Voice profile has concrete examples",
          "Mystery elements ensure fair play (if applicable)",
          "Genre specialists properly mapped based on primary genre",
          "Used Write tool to save file"
        ],
        "success_criteria": [
          "- All required sections included (8 for Series, 7 for Book Bible)"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 2224,
      "line_count": 458
    },
    "bible-cache-updater": {
      "file": ".claude\\agents\\bible-cache-updater.md",
      "name": "bible-cache-updater",
      "type": "agent",
      "lines": 253,
      "description": "Manages Bible content caching with hash-based invalidation",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 108,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 108"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY manage the cache and save results",
          "Bible exists**:",
          "call this instead of reading Bible directly:",
          "all data preserved",
          "Bible Structure**:",
          "required sections exist:",
          "cache, and save the cache directly",
          "if cache exists**:",
          "if cached Bible is up-to-date",
          "field types (integers, strings, lists)"
        ]
      },
      "execution": {
        "patterns": [
          "serial",
          "atomic"
        ],
        "dependencies": [
          "refresh"
        ],
        "error_handling": [
          "\"Bible not found\"",
          "Cache Hit (Valid Cache)",
          "Cache Miss (Invalid/Missing Cache)",
          "Handling",
          "- Fall back to direct Bible read"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Determine Bible Path",
          "2: Calculate Current Bible Hash",
          "3: Check Cache Validity",
          "4: Handle Cache Hit (Valid Cache)",
          "5: Handle Cache Miss (Invalid/Missing Cache)",
          "6: Performance Monitoring"
        ],
        "decision_points": [
          "if cached Bible is up-to-date",
          "Bible changes",
          "Cache Validity",
          "if cache exists**",
          "cache exists, validate**"
        ],
        "validation_logic": [
          "cache, and save the cache directly.",
          "if cached Bible is up-to-date",
          "Bible exists**:",
          "Cache Validity",
          "if cache exists**:"
        ],
        "business_rules": [
          "Cache hit rate > 80%",
          "Performance improvement 30-50%",
          "Zero data loss or corruption",
          "Automatic invalidation on Bible changes",
          "Transparent operation for other agents"
        ],
        "success_criteria": [
          "- Cache hit rate > 80%"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 880,
      "line_count": 253
    },
    "bible-compliance-validator": {
      "file": ".claude\\agents\\bible-compliance-validator.md",
      "name": "bible-compliance-validator",
      "type": "agent",
      "lines": 479,
      "description": "Validates Bible compliance with entity variation awareness",
      "thinking": "Validate Bible compliance intelligently - distinguish between acceptable variations and genuine violations, enforce strict accuracy on critical facts (ages, years, relationships), allow natural language flexibility for entity naming and references, use entity dictionary for approved variations, track progressive familiarity in relationships, validate Bible structure and content separately, and maintain genre-appropriate validation rules. Focus on protecting factual integrity while embracing natural language.",
      "tools": [
        "Read",
        "Write",
        "Grep"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/shared/entity_dictionary.yaml",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/shared/entity_dictionary.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "\"Casa Vista\" for \"Casa Vista Verde\"  ->  Valid\n   \n   **Step 3: Check Natural Progression**\n   - If relationship evolved  ->  Allow informal reference\n   - Example: \"Mrs. Mitchell\"  ->  \"Sarah\" after friendship\n   \n   **Step 4: Check Forbidden List**\n   - If forbidden variation  ->  Flag as violation\n   - Provide canonical correction\n   - Severity: HIGH\n   \n   **Step 5: Default Acceptable**\n   - If none of above  ->  Consider acceptable",
          "check: If Bible says \"Maria Dolores Santana\" but content uses \"Sarah Mitchell\"  ->  CRITICAL VIOLATION",
          "\"Maria\" (approved informal reference)\n- Example: \"the bakery\" (functional reference)\n- Example: \"Senora Santana\" (formal address by customers)",
          "\"Elena's house\" used by Carmen (confidence: 0.85)",
          "\"Bible:OK Vars:5 Score:97%\"\n   \n   **If Critical Violations Found**:\n   - Format: \"Critical:[count] Bible:[score]% Fix:Required\"\n   - Example: \"Critical:2 Bible:78% Fix:Required\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "Bible Structure**",
          "field types and constraints:",
          "variation status",
          "against cached Bible data",
          "use full name first",
          "syntax validity",
          "show logical event progression",
          "if Critical Fact**",
          "Natural Progression**",
          "if critical fact"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Wrong historical dates",
          "Wrong job title or rank",
          "Wrong family connection",
          "Locations in wrong places",
          "**If Forbidden Variation**:"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Check if Critical Fact**",
          "2: Check Entity Dictionary**",
          "3: Check Natural Progression**",
          "4: Check Forbidden List**",
          "5: Default Acceptable**",
          "1: Bible Structure Validation (NEW)",
          "2: Content Compliance Validation (EXISTING)",
          "1: Bible Structure Validation (NEW - Phase 1)",
          "1: Parse YAML: Ensure valid YAML syntax",
          "2: Check sections: Verify required sections exist",
          "3: Validate fields: Check field types and constraints",
          "4: Report issues: List missing or invalid elements",
          "2: Entity Variation Handler (Phase 2)",
          "2: Critical Fact Guardian",
          "3: Smart Matching Algorithm",
          "4: Context-Aware Validation",
          "1: TRUE Violations (Must Fix)",
          "2: Acceptable Variations (Don't Flag)"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "field types and constraints",
          "validating references",
          "if Critical Fact**",
          "critical  ->  Require EXACT match"
        ],
        "validation_logic": [
          "Bible compliance intelligently - distinguish between acceptable variations and genuine violations, enforce strict accuracy on critical facts (ages, years, relationships), allow natural language flexibility for entity naming and references, use entity dictionary for approved variations, track progressive familiarity in relationships, validate Bible structure and content separately, and maintain genre-appropriate validation rules. Focus on protecting factual integrity while embracing natural language.",
          "compliance, and save the report directly.",
          "valid YAML syntax",
          "sections: Verify required sections exist",
          "fields: Check field types and constraints"
        ],
        "business_rules": [
          "characters: critical facts, relationships, and personality traits",
          "universe: world rules, settings, and factual constraints",
          "continuity_framework: timeline facts and character knowledge boundaries",
          "quality_standards: compliance thresholds and validation requirements",
          "Timeline consistency",
          "*Required sections by priority:**",
          "continuity_framework: Timeline and knowledge tracking",
          "quality_standards: Quality thresholds",
          "*Field validation rules:**",
          "*",
          "enforcement: ABSOLUTE",
          "Examples of inviolable rules:",
          "magic_system: established rules inviolable",
          "technology_level: consistent throughout",
          "geography: locations don't move",
          "magic_inconsistency: Breaking established magic rules",
          "technology_anachronism: Tech that shouldn't exist",
          "geography_error: Locations in wrong places",
          "**MANDATORY**: Verify content uses correct protagonist name from Bible",
          "Compare against Bible's characters.protagonists section",
          "Flag any completely different character names as CRITICAL violations",
          "Example check: If Bible says \"Maria Dolores Santana\" but content uses \"Sarah Mitchell\"  ->  CRITICAL VIOLATION",
          "Critical fact errors  ->  CRITICAL severity",
          "Unapproved variations  ->  MEDIUM severity",
          "Natural progressions  ->  Don't flag",
          "Approved variations  ->  Don't flag",
          "Name variations handling status",
          "critical_violations: 0",
          "score: 95+",
          "critical_violations: 0",
          "score: 90-94",
          "critical_violations: >0",
          "score: <90",
          "Process chapter content",
          "Check against cached Bible data",
          "Apply smart matching",
          "Generate results"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1926,
      "line_count": 479
    },
    "bible-reviewer": {
      "file": ".claude\\agents\\bible-reviewer.md",
      "name": "bible-reviewer",
      "type": "agent",
      "lines": 288,
      "description": "Reviews and scores Bible quality, provides specific improvement suggestions",
      "thinking": true,
      "tools": [
        "Read"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Series = UK_English, Book = US_English  ->  FAIL",
          "Series = third_limited, Book = first_person  ->  FAIL",
          "Improvements"
        ],
        "json_schemas": [],
        "validation_rules": [
          "dual timeline completeness",
          "suspect matrix is complete",
          "fair play principles",
          "clue management system",
          "inherit language_variant from Series Bible\", \"MUST match POV/tense with Series Bible\", \"Copy all core voice elements from Series\"]",
          "only allowed adjustments are made:",
          "inherit voice from Series Bible\"",
          "these aren't lost in revision",
          "- \"Output file: (path)\" - Where to save quality report"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "work"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Parse Input Requirements and Read Files",
          "2: Evaluate Bible Components",
          "3: Generate Review Report",
          "4: Save Review Report",
          "1: Compare Book Bible `voice_profile.language_variant` with Series Bible `author_voice_signature.language_standard.variant`",
          "2: Compare narrative fundamentals (POV, tense)",
          "3: Verify only allowed adjustments are made:"
        ],
        "decision_points": [
          "reading Bible for review, concentrate on",
          "reviewing a Bible, thoroughly analyze every aspect for completeness, consistency, and creative depth. Keep thinking about",
          "dual timeline completeness",
          "- \"Output file",
          "not provided"
        ],
        "validation_logic": [
          "fair play principles",
          "dual timeline completeness",
          "clue management system",
          "suspect matrix is complete",
          "- \"Output file: (path)\" - Where to save quality report"
        ],
        "business_rules": [
          "voice_profile: consistency and specificity of narrative voice elements",
          "Technology/magic systems consistent: /20",
          "Atmosphere evocative: /20",
          "Sensory details planned: /20",
          "Vocabulary preferences listed: /10",
          "Dialogue style guidelines present: /10",
          "**Series Voice Inheritance (if Series Bible exists):**",
          "CRITICAL: Language variant matches Series Bible: /20",
          "CRITICAL: POV/tense matches Series Bible: /20",
          "Prose style inherits from Series: /15",
          "Signature techniques preserved: /15",
          "Only allowed adjustments made (tone/mood): /10",
          "If mismatch found: AUTOMATIC FAIL (score = 0)",
          "Character knowledge boundaries: /25",
          "Object/item tracking: /25",
          "Used Read tool at least once (Bible file)",
          "Scored all relevant sections",
          "Provided specific, actionable improvements",
          "Saved review report using Write tool",
          "Overall assessment is fair but thorough"
        ],
        "success_criteria": [
          "- Used Read tool at least once (Bible file)"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1330,
      "line_count": 287
    },
    "bible-viewer": {
      "file": ".claude\\agents\\bible-viewer.md",
      "name": "bible-viewer",
      "type": "agent",
      "lines": 322,
      "description": "Displays and formats Bible content with bilingual support and analysis features",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 9,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 9"
        },
        {
          "type": "unicode_character",
          "line": 30,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 30"
        },
        {
          "type": "unicode_character",
          "line": 100,
          "char": "项",
          "ord": 39033,
          "message": "Unicode character '项' found at line 100"
        },
        {
          "type": "unicode_character",
          "line": 103,
          "char": "📚",
          "ord": 128218,
          "message": "Unicode character '📚' found at line 103"
        },
        {
          "type": "unicode_character",
          "line": 106,
          "char": "标",
          "ord": 26631,
          "message": "Unicode character '标' found at line 106"
        },
        {
          "type": "unicode_character",
          "line": 108,
          "char": "类",
          "ord": 31867,
          "message": "Unicode character '类' found at line 108"
        },
        {
          "type": "unicode_character",
          "line": 114,
          "char": "👥",
          "ord": 128101,
          "message": "Unicode character '👥' found at line 114"
        },
        {
          "type": "unicode_character",
          "line": 116,
          "char": "中",
          "ord": 20013,
          "message": "Unicode character '中' found at line 116"
        },
        {
          "type": "unicode_character",
          "line": 117,
          "char": "角",
          "ord": 35282,
          "message": "Unicode character '角' found at line 117"
        },
        {
          "type": "unicode_character",
          "line": 118,
          "char": "性",
          "ord": 24615,
          "message": "Unicode character '性' found at line 118"
        },
        {
          "type": "unicode_character",
          "line": 119,
          "char": "发",
          "ord": 21457,
          "message": "Unicode character '发' found at line 119"
        },
        {
          "type": "unicode_character",
          "line": 122,
          "char": "📖",
          "ord": 128214,
          "message": "Unicode character '📖' found at line 122"
        },
        {
          "type": "unicode_character",
          "line": 124,
          "char": "主",
          "ord": 20027,
          "message": "Unicode character '主' found at line 124"
        },
        {
          "type": "unicode_character",
          "line": 125,
          "char": "关",
          "ord": 20851,
          "message": "Unicode character '关' found at line 125"
        },
        {
          "type": "unicode_character",
          "line": 128,
          "char": "🌍",
          "ord": 127757,
          "message": "Unicode character '🌍' found at line 128"
        },
        {
          "type": "unicode_character",
          "line": 130,
          "char": "场",
          "ord": 22330,
          "message": "Unicode character '场' found at line 130"
        },
        {
          "type": "unicode_character",
          "line": 131,
          "char": "地",
          "ord": 22320,
          "message": "Unicode character '地' found at line 131"
        },
        {
          "type": "unicode_character",
          "line": 136,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 136"
        },
        {
          "type": "unicode_character",
          "line": 138,
          "char": "完",
          "ord": 23436,
          "message": "Unicode character '完' found at line 138"
        },
        {
          "type": "unicode_character",
          "line": 139,
          "char": "已",
          "ord": 24050,
          "message": "Unicode character '已' found at line 139"
        },
        {
          "type": "unicode_character",
          "line": 140,
          "char": "已",
          "ord": 24050,
          "message": "Unicode character '已' found at line 140"
        },
        {
          "type": "unicode_character",
          "line": 141,
          "char": "剧",
          "ord": 21095,
          "message": "Unicode character '剧' found at line 141"
        },
        {
          "type": "unicode_character",
          "line": 143,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 143"
        },
        {
          "type": "unicode_character",
          "line": 145,
          "char": "建",
          "ord": 24314,
          "message": "Unicode character '建' found at line 145"
        },
        {
          "type": "unicode_character",
          "line": 147,
          "char": "💡",
          "ord": 128161,
          "message": "Unicode character '💡' found at line 147"
        },
        {
          "type": "unicode_character",
          "line": 149,
          "char": "具",
          "ord": 20855,
          "message": "Unicode character '具' found at line 149"
        },
        {
          "type": "unicode_character",
          "line": 151,
          "char": "增",
          "ord": 22686,
          "message": "Unicode character '增' found at line 151"
        },
        {
          "type": "unicode_character",
          "line": 158,
          "char": "📤",
          "ord": 128228,
          "message": "Unicode character '📤' found at line 158"
        },
        {
          "type": "unicode_character",
          "line": 160,
          "char": "创",
          "ord": 21019,
          "message": "Unicode character '创' found at line 160"
        },
        {
          "type": "unicode_character",
          "line": 162,
          "char": "使",
          "ord": 20351,
          "message": "Unicode character '使' found at line 162"
        },
        {
          "type": "unicode_character",
          "line": 164,
          "char": "查",
          "ord": 26597,
          "message": "Unicode character '查' found at line 164"
        },
        {
          "type": "unicode_character",
          "line": 166,
          "char": "获",
          "ord": 33719,
          "message": "Unicode character '获' found at line 166"
        },
        {
          "type": "unicode_character",
          "line": 281,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 281"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [
          "{output_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "YAML structure and required sections",
          "Bible file format and regenerate if necessary\",",
          "Display Prerequisites**:",
          "- Improvement opportunity identification"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "Return clear error with specific missing elements",
          "Handling & Resilience",
          "Scenarios",
          "missing files gracefully** with clear recovery guidance"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Input Processing",
          "2: Bible Content Processing",
          "3: Display Generation",
          "4: Navigation and Recommendations",
          "5: Atomic Output Generation"
        ],
        "decision_points": [
          "- Improvement opportunity identification",
          "Bible complete (>90%)",
          "Bible incomplete (<90%)",
          "quality concerns",
          "series context"
        ],
        "validation_logic": [
          "YAML structure and required sections",
          "Display Prerequisites**:",
          "- series_metadata: title, genre, themes, scope",
          "- Improvement opportunity identification",
          "Bible file format and regenerate if necessary\","
        ],
        "business_rules": [
          "plot_architecture: main plot, subplots, chapter breakdown",
          "voice_profile: narrative style, dialogue patterns",
          "continuity_framework: timeline, consistency rules"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1241,
      "line_count": 322
    },
    "book-outline-architect": {
      "file": ".claude\\agents\\book-outline-architect.md",
      "name": "book-outline-architect",
      "type": "agent",
      "lines": 261,
      "description": "Designs comprehensive book-level outline with chapter dependencies and progression maps",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book_number}/bible.yaml",
          "{project}/brainstorming_results.yaml",
          "{project}/book_{book_number}/outline.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "for 30 chapters (adapt proportionally):\n  act_1:\n    chapters: [1 to ~30% of total]\n    purpose: \"Setup, world introduction, inciting incident\"\n    tension_curve: \"gradual_rise\"\n    key_milestones: {generate based on genre and chapter count}\n    \n  act_2:\n    chapters: [~30% to ~70% of total]\n    purpose: \"Development, complications, rising action\"\n    tension_curve: \"peaks_and_valleys\"\n    key_milestones: {adapt to midpoint and reversal points}\n    \n  act_3:\n    chapters: [~70% to 100% of total]\n    purpose: \"Climax and resolution\"\n    tension_curve: \"rapid_escalation_then_denouement\"\n    key_milestones: {based on climax timing and resolution needs}\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY create the outline YAML and save it",
          "be complete, logical, and actionable for all downstream agents"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "setup",
          "multiple",
          "chapter-level"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Read Required Context",
          "2: Design Book Structure",
          "3: Save Book Outline",
          "1: Confirmations of files read ([x] marks)",
          "2: Brief summary of outline structure",
          "3: Confirmation of save ([x] mark)",
          "4: Any special notes about the outline design"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "applicable)",
          "designing the book outline, think about"
        ],
        "validation_logic": [
          "- [ ] All 30 chapters have complete details"
        ],
        "business_rules": [
          "characters: character development arcs and chapter-by-chapter growth points",
          "mystery_structure: clue placement and revelation timing (if applicable)",
          "themes: thematic content that needs chapter-level expression",
          "pacing_guidelines: rhythm and tension management across chapters",
          "[ ] Character arcs have clear milestones",
          "[ ] Each chapter has 3-5 scene beats",
          "[ ] Mystery elements properly distributed",
          "[ ] Pacing variety maintained",
          "Read Bible successfully",
          "Generated outline for ALL chapters",
          "Mapped all dependencies and progressions",
          "Saved outline using Write tool",
          "Outline is immediately actionable for chapter generation"
        ],
        "success_criteria": [
          "- Read Bible successfully"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1019,
      "line_count": 261
    },
    "book-outline-reviewer": {
      "file": ".claude\\agents\\book-outline-reviewer.md",
      "name": "book-outline-reviewer",
      "type": "agent",
      "lines": 317,
      "description": "Reviews book outline quality and provides specific improvement recommendations",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book_number}/bible.yaml",
          "{project}/outline_reviews/review_v{N}.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Improvements"
        ],
        "json_schemas": [],
        "validation_rules": [
          "Fix - Score 60-75)",
          "outline is execution-ready**",
          "Fix - Score < 60)",
          "maintain elements",
          "genre conventions are met**"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "markers",
          "specific",
          "work"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Read Required Files",
          "2: Evaluate Outline Components",
          "3: Calculate Overall Score",
          "4: Generate Detailed Report",
          "5: Save Review Report"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "reviewing an outline, thoroughly analyze structure, pacing, coherence, and completeness. Think about",
          "applicable)"
        ],
        "validation_logic": [
          "genre conventions are met**",
          "outline is execution-ready**"
        ],
        "business_rules": [
          "characters: character development benchmarks and arc milestones",
          "pacing_guidelines: rhythm expectations and tension management standards",
          "quality_standards: outline evaluation criteria and target metrics",
          "themes: thematic development requirements across chapters",
          "Used Read tool at least twice (outline + Bible)",
          "Scored all 7 dimensions",
          "Provided specific, actionable improvements",
          "Saved review report using Write tool",
          "Fair but thorough assessment"
        ],
        "success_criteria": [
          "- Used Read tool at least twice (outline + Bible)"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1219,
      "line_count": 316
    },
    "book-pacing-analyzer": {
      "file": ".claude\\agents\\book-pacing-analyzer.md",
      "name": "book-pacing-analyzer",
      "type": "agent",
      "lines": 176,
      "description": "Analyzes book pacing across chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [
          "Heavy exposition chapters without breaks"
        ],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "tension escalates appropriately",
          "establish all major elements\"",
          "variety in pacing (mix of fast/slow)",
          "introduce major complication\"",
          "be 8-12% of total word count\"",
          "three-act structure: Setup (Ch1-3)  ->  Confrontation (Ch4-8)  ->  Resolution (Ch9-11)"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Book-Level Pacing Arc Analysis",
          "2: Pacing Rhythm Detection",
          "3: Reader Engagement Tracking"
        ],
        "decision_points": [
          "Analyzing Book Pacing",
          "three-act structure",
          "Ch4-8 average pace < 70% of Ch1-3",
          "resolution < 10% of book"
        ],
        "validation_logic": [
          "three-act structure: Setup (Ch1-3)  ->  Confrontation (Ch4-8)  ->  Resolution (Ch9-11)",
          "tension escalates appropriately",
          "variety in pacing (mix of fast/slow)"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 715,
      "line_count": 176
    },
    "brainstorming-completeness-validator": {
      "file": ".claude\\agents\\brainstorming-completeness-validator.md",
      "name": "brainstorming-completeness-validator",
      "type": "agent",
      "lines": 213,
      "description": "Checks brainstorming completeness and identifies missing critical information",
      "thinking": true,
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "all necessary information has been collected before proceeding to Bible generation",
          "prompt for type specification:**",
          "have for voice consistency):**",
          "be YAML format",
          "maintain consistent language variant\",",
          "if required information is present"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "unifying"
        ],
        "error_handling": [
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Identify Brainstorming Type",
          "2: Read Brainstorming File",
          "3: Evaluate Completeness",
          "4: Calculate Completeness Score",
          "5: Identify Missing Elements and Generate Questions",
          "6: Generate and Save Report",
          "7: Provide Clear Summary",
          "1: Which English variant will you use? (UK/US/International)",
          "2: What mystery spans the entire series?"
        ],
        "decision_points": [
          "reading existing Bible (for comparison/baseline), concentrate on",
          "if required information is present.",
          "prompt for type specification",
          "type=\"series\"",
          "type=\"book\""
        ],
        "validation_logic": [
          "all necessary information has been collected before proceeding to Bible generation.",
          "if required information is present.",
          "prompt for type specification:**"
        ],
        "business_rules": [
          "universe: world-building necessity standards",
          "quality_standards: completeness thresholds and validation criteria",
          "If type=\"series\": Use series criteria",
          "If type=\"book\": Use book criteria",
          "Confirm: \"[x] Loaded {type} completeness criteria\"",
          "Used Read tool to load brainstorming file",
          "Correctly identified brainstorming type (series/book)",
          "Evaluated against appropriate criteria",
          "Generated specific questions for gaps",
          "Saved structured completeness report",
          "Provided actionable feedback without judging creative choices"
        ],
        "success_criteria": [
          "- Used Read tool to load brainstorming file"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 956,
      "line_count": 212
    },
    "chapter-meta-updater": {
      "file": ".claude\\agents\\chapter-meta-updater.md",
      "name": "chapter-meta-updater",
      "type": "agent",
      "lines": 166,
      "description": "Updates chapter metadata file with statistics and status",
      "thinking": "Update chapter metadata systematically - calculate comprehensive statistics from content analysis, extract quality scores from validated reports, create structured metadata with learning qualification flags, track timestamps for version control, handle error conditions gracefully with clear messaging, ensure JSON formatting consistency, and integrate seamlessly with unified update pipeline. Focus on accurate data collection and proper formatting.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/chapters/ch{chapter}/content.md",
          "{project}/book_{book}/chapters/ch{chapter}/quality_report.json",
          "{project}/book_{book}/chapters/ch{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "*Return Confirmation Format:**",
          "Success indicator with chapter number",
          "Word count summary",
          "Quality score out of 100",
          "Learning qualification status"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "content exists:**",
          "JSON formatting consistency, and integrate seamlessly with unified update pipeline",
          "Prerequisites",
          "quality report exists:**"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "error conditions gracefully with clear messaging, ensure JSON formatting consistency, and integrate seamlessly with unified update pipeline. Focus on accurate data collection and proper formatting.",
          "\"Chapter content not found\"",
          "\"Quality report not found\"",
          "\"Score below threshold: {score}\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Calculate Statistics",
          "3: Create Metadata Structure",
          "4: Save Metadata",
          "3: - Format with 2-space indentation"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "quality_score >= 95",
          "missing, ERROR",
          "missing, ERROR",
          "score < 95, ERROR"
        ],
        "validation_logic": [
          "JSON formatting consistency, and integrate seamlessly with unified update pipeline. Focus on accurate data collection and proper formatting.",
          "Prerequisites",
          "content exists:**",
          "quality report exists:**"
        ],
        "business_rules": [
          "voice_profile: narrative standards for metadata classification",
          "Suggest smart-fix",
          "Accurate word/character counts",
          "Correct dialogue line detection",
          "Proper JSON formatting",
          "Clear error messages",
          "Fast execution (<2 seconds)"
        ],
        "success_criteria": [
          "- Accurate word/character counts"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 710,
      "line_count": 166
    },
    "chapter-scanner": {
      "file": ".claude\\agents\\chapter-scanner.md",
      "name": "chapter-scanner",
      "type": "agent",
      "lines": 218,
      "description": "Scans existing chapters to find highest number and detect sequence gaps",
      "thinking": "Systematically scan chapter directories to find all existing chapters, extract chapter numbers, identify the highest number, detect any gaps in sequence, and determine next logical chapter number. Handle edge cases like missing chapters, incomplete chapters, and non-standard numbering.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 165,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 165"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_root}/book_{N}/chapters/ch*",
          "{project_root}/book_{N}/chapters/ch*;"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "chapter_num",
          "chapter_dir",
          "content_exists",
          "word_count",
          "dir",
          "formatted"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "highest = 8\nexpected_sequence = [1, 2, 3, 4, 5, 6, 7, 8]\nmissing = [4, 7]\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "if chapter has required files",
          "chapter completion status",
          "Completion Status",
          "completion:",
          "scanning correct book directory",
          "if content is non-empty"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [
          "edge cases like missing chapters, incomplete chapters, and non-standard numbering.",
          "variations: `chapter_1`, `ch-001`, `Chapter01`",
          "book transitions"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Locate Chapter Directories",
          "2: Extract Chapter Numbers",
          "3: Analyze Sequence",
          "4: Check Completion Status",
          "5: Determine Next Chapter Number",
          "6: Generate Scan Report",
          "7: Return Summary",
          "1: Extract numeric part: `ch001`  ->  `001`  ->  `1`",
          "2: Track all numbers found",
          "3: Note any non-standard formats",
          "1: If no gaps: `highest + 1`",
          "2: If gaps exist: Optionally fill first gap or continue sequence",
          "3: Format properly: `9`  ->  `009`, `10`  ->  `010`"
        ],
        "decision_points": [
          "next logical chapter number. Handle edge cases like missing chapters, incomplete chapters, and non-standard numbering.",
          "chapter numbering and sequence status.",
          "next logical chapter",
          "[ -d \"$dir\" ];",
          "Completion Status"
        ],
        "validation_logic": [
          "chapter completion status",
          "for:",
          "Completion Status",
          "completion:",
          "if chapter has required files"
        ],
        "business_rules": [
          "Accurate chapter number detection",
          "All gaps identified",
          "Completion status verified",
          "Next chapter correctly calculated",
          "Clear actionable output"
        ],
        "success_criteria": [
          "- Accurate chapter number detection"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 728,
      "line_count": 218
    },
    "character-voice-cross-validator": {
      "file": ".claude\\agents\\character-voice-cross-validator.md",
      "name": "character-voice-cross-validator",
      "type": "agent",
      "lines": 254,
      "description": "Validates character voice consistency",
      "thinking": "Validate character voice consistency meticulously - track unique speech patterns across all chapters, detect voice drift or homogenization, ensure each character maintains distinctive dialogue markers, identify author voice intrusion, measure character differentiation quantitatively, check education and background alignment in vocabulary, and verify signature phrases remain consistent. Focus on preserving authentic character voices throughout the narrative.",
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Profile Structure**:\n   - Sarah Chen: University-educated detective\n     * Professional-casual tone\n     * Signature: \"seems like\", \"back in Seattle\"\n     * Tics: Pauses mid-sentence, self-corrects\n     * Never uses: \"ain't\", \"gonna\", \"y'all\"\n     * 25% of dialogue is questions\n     * Average 12 words per sentence",
          "Specific dialogue example if applicable\n- severity: low/medium/high impact level"
        ],
        "json_schemas": [],
        "validation_rules": [
          "signature phrases still present",
          "character voice consistency meticulously - track unique speech patterns across all chapters, detect voice drift or homogenization, ensure each character maintains distinctive dialogue markers, identify author voice intrusion, measure character differentiation quantitatively, check education and background alignment in vocabulary, and verify signature phrases remain consistent",
          "character voice distinctiveness:",
          "arc completion",
          "each character has unique:",
          "for out-of-character word choices"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "review"
        ],
        "error_handling": [
          "Points**"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Voice Signature Tracking",
          "2: Cross-Chapter Voice Comparison",
          "3: Voice Distinctiveness Validation"
        ],
        "decision_points": [
          "education and background alignment in vocabulary, and verify signature phrases remain consistent. Focus on preserving au",
          "for out-of-character word choices",
          "Validating Character Voices",
          "if changes are",
          "any two characters sound < 30% different"
        ],
        "validation_logic": [
          "character voice consistency meticulously - track unique speech patterns across all chapters, detect voice drift or homogenization, ensure each character maintains distinctive dialogue markers, identify author voice intrusion, measure character differentiation quantitatively, check education and background alignment in vocabulary, and verify signature phrases remain consistent. Focus on preserving authentic character voices throughout the narrative.",
          "signature phrases still present",
          "for out-of-character word choices",
          "each character has unique:",
          "character voice distinctiveness:"
        ],
        "business_rules": [
          "*",
          "voice_distance: Minimum 30% difference between character voices",
          "unique_markers: Each character needs 3+ distinctive elements",
          "attribution_test: Dialogue identifiable without tags 80% of time",
          "background_reflection: Voice matches character education/origin",
          "personality_alignment: Speech patterns reflect personality traits"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1161,
      "line_count": 254
    },
    "characters-context-updater": {
      "file": ".claude\\agents\\characters-context-updater.md",
      "name": "characters-context-updater",
      "type": "agent",
      "lines": 257,
      "description": "Incrementally updates character development context from high-quality chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/chapters/ch{chapter}/quality_report.json",
          "{project}/book_{book}/bible.yaml",
          "{project}/book_{book}/context/characters.json",
          "{project}/book_{book}/chapters/ch{chapter}/content.md",
          "{project}/book_{book}/context/characters.json",
          "{project}/book_{book}/chapters/ch{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "chapter quality:**",
          "Prerequisites",
          "if characters"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "\"Chapter not qualified for context learning\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Load Existing Context",
          "3: Analyze Chapter Content",
          "4: Merge with Existing Context",
          "5: Update Relationship Matrix",
          "6: Save Updated Context",
          "7: Mark Chapter as Learned"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "reading Bible, concentrate on",
          "quality_score >= 95",
          "< 95, ERROR",
          "if characters.json exists"
        ],
        "validation_logic": [
          "Prerequisites",
          "chapter quality:**",
          "if characters.json exists:**",
          "threshold)"
        ],
        "business_rules": [
          "continuity_framework: character consistency tracking and evolution patterns",
          "themes: character-related thematic development needs",
          "Complete development timeline preserved",
          "Accurate emotional state tracking",
          "Relationship evolution captured",
          "No data loss from previous chapters",
          "Clear character arc visibility"
        ],
        "success_criteria": [
          "- Complete development timeline preserved"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 774,
      "line_count": 257
    },
    "claude-code-expert": {
      "file": ".claude\\agents\\claude-code-expert.md",
      "name": "claude-code-expert",
      "type": "agent",
      "lines": 675,
      "description": "MUST BE USED PROACTIVELY for \"claude code\", \"official\", \"best practice\", \"recursion\", \"coordinator\", \"Task tool\", \"subagent\", \"parallel execution\", \"create new agent\", \"create new command\", \"large file\", \"chunked reading\", architecture questions, or preventing Claude Code crashes. Expert on official specifications, recursion prevention, and large file handling patterns.",
      "thinking": "Analyze Claude Code architecture deeply - focus on recursion prevention, proper tool delegation, coordinator patterns, and Main Claude's orchestration role. Expert in large file handling with chunked reading patterns (2000-line chunks) and Python script integration. Stay updated with latest official documentation and community best practices. Remember the key insight from research - coordinators are subagents that CANNOT call other subagents to prevent recursion. Main Claude is the only orchestrator.",
      "tools": [
        "Read",
        "Write",
        "Grep",
        "WebSearch",
        "WebFetch"
      ],
      "violations": [
        {
          "type": "excessive_lines",
          "lines": 675,
          "limit": 500,
          "message": "Agent exceeds 500 lines (675 lines)"
        },
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "output.md",
          "{project}/book_{book}/ch005",
          "{project}/book_{N}/chapter.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "ARGUMENTS"
        ],
        "api_calls": [
          "https://docs.anthropic.com/en/docs/claude-code/sub-agents.md",
          "WebSearch",
          "WebFetch",
          "https://docs.anthropic.com/en/docs/claude-code/[topic]"
        ],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Flow:\n```python\n# User: /novel:chapter-start 5\n# Command: \"Generate chapter $ARGUMENTS\"\n# Main Claude: Resolves to chapter 5 in current project\n# Coordinator: Returns plan with \"{project}/book_{book}/ch005\"\n# Main Claude: Resolves to \"/full/path/to/project/book_1/ch005\"\n# Agent: Receives \"/full/path/to/project/book_1/ch005/content.md\"\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "for recent changes",
          "Community Patterns**:",
          "be ASCII-only:**",
          "paths exist**: Before processing",
          "follow these path format rules:",
          "with latest documentation when needed",
          "return JSON directly)",
          "with latest docs",
          "complete standards:",
          "agents use latest script versions**"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "multi_coordinator",
          "human_in_loop",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "(Windows)",
          "handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "optimized for speed (Haiku model)",
          "high quality processing (Opus model)",
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Task -> [A, B, C] parallel",
          "2: Task -> D sequential",
          "3: Task -> [E, F] parallel",
          "1: Task -> Coordinator A (returns plan)",
          "2: Task -> Coordinator B (uses Phase 1 outputs)",
          "1: Relative paths: ls -la .claude/testing/*.json",
          "2: Forward slashes: ls -la \"D:/folder/file.txt\"",
          "3: Double backslashes: ls -la \"D:\\\\folder\\\\file.txt\"",
          "1: Command Files",
          "2: Coordinator Files (CRITICAL FOR RECURSION PREVENTION)",
          "3: Agent Files (2024-2025 Standards)",
          "1: Parallel Execution",
          "2: Sequential Execution",
          "3: Mixed Pattern",
          "4: Multi-Coordinator Pattern (Tested & Verified)",
          "5: Human-in-Loop Pattern (Updated v6.5)",
          "6: Atomic Write Pattern (Tested & Verified)",
          "1: Write(content -> file.tmp)",
          "2: Bash(\"mv file.tmp file\")  # Atomic at OS level",
          "1: All agents need I/O and Prompt documentation",
          "2: Use official 2024-2025 formats from templates",
          "3: Model selection based on task requirements, not speculation",
          "4: Verify with latest documentation when needed"
        ],
        "decision_points": [
          "to invoke this coordinator",
          "they have Task and call other subagents = recursion crash!",
          "Creating New Components",
          "yes = ENCODING ERROR (Windows)",
          "yes and it's not Main Claude = DANGER"
        ],
        "validation_logic": [
          "paths exist**: Before processing",
          "v2.0 processes 1MB+ files flawlessly",
          "agents use latest script versions**",
          "Official Documentation First**:",
          "Community Patterns**:"
        ],
        "business_rules": [
          "**Length**: <100 lines target, 50-120 acceptable for business completeness",
          "**Pattern**: Delegation with necessary business context",
          "**Content**: Declarative instructions with workflow context, NOT implementation code",
          "**Priority**: Business completeness > arbitrary line limits",
          "**I/O Documentation**: High-level operation flow (optional but recommended)",
          "**Model Selection**: Optional, usually not needed (uses system default)",
          "**Tools**: `Read, Write, Bash, Grep` - **NEVER Task!**",
          "**Role**: Return execution plans, DON'T execute",
          "**Output**: JSON plan DIRECTLY to Main Claude (not as file)",
          "**I/O Documentation**: REQUIRED - Input/Output specification",
          "**Prompt Documentation**: REQUIRED - Expected input from Main Claude",
          "**Model Selection**: Consider Sonnet 4 for complex planning tasks",
          "*",
          "**Tools**: Only what's needed (Read, Write, etc.) - NO Task",
          "**Focus**: Single responsibility",
          "**Communication**: Via file system only",
          "**I/O Documentation**: REQUIRED - Input/Output specification (NEW)",
          "**Prompt Documentation**: REQUIRED - Expected input format from Main Claude (NEW)",
          "`projects/{project}/book_{N}/chapter.md`",
          "`.claude/data/context/current.json`",
          "`/absolute/path/to/file.yaml`",
          "Expected format and parameters",
          "Required file paths",
          "Optional context",
          "Orchestration request format",
          "Required context for planning",
          "**[/SYSTEM_INDEX.md](/SYSTEM_INDEX.md)** - Master documentation index",
          "**[/.claude/templates/ARCHITECTURE_data_layer.md](/.claude/templates/ARCHITECTURE_data_layer.md)** - Deep architecture"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "preferred_model": "claude-opus-4-1",
        "reason": "High quality/critical operations",
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 2939,
      "line_count": 675
    },
    "clue-integration-specialist": {
      "file": ".claude\\agents\\clue-integration-specialist.md",
      "name": "clue-integration-specialist",
      "type": "agent",
      "lines": 221,
      "description": "Strategically plants clues and foreshadowing throughout narrative, ensuring fair-play mystery mechanics",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "item: \"Antique fountain pen\"\n  obvious: \"Expensive taste, traditional values\"\n  hidden: \"Left-handed writer (murderer is left-handed)\"\n  placement: \"Casually mentioned on desk\"\n  misdirection: \"Suggests wealthy, refined suspect\"\n```",
          "behavior: \"Always orders fish at restaurants\"\n  truth: \"Severe allergy to shellfish (eliminates as poisoner)\"\n  timing: \"Mentioned casually in social scene\"\n  witnesses: \"Multiple characters confirm\"\n```",
          "missing: \"No photos of daughter in office\"\n  significance: \"Daughter is estranged/dead\"\n  timing: \"Noticed during careful description\"\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "prompt an \"I should have seen that",
          "be distinguishable",
          "serve at least two purposes:",
          "be fairly clued"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "reading Bible, concentrate on",
          "things happen matters",
          "behavior occurs\"",
          "it becomes blindingly obvious.\""
        ],
        "validation_logic": [],
        "business_rules": [
          "[ ] Is clue present in text?",
          "[ ] Can reader access same information as detective?",
          "[ ] Is clue distinguishable from background detail?",
          "[ ] Does clue make sense in retrospect?",
          "[ ] Are red herrings plausibly suspicious?"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 937,
      "line_count": 221
    },
    "completion-certifier": {
      "file": ".claude\\agents\\completion-certifier.md",
      "name": "completion-certifier",
      "type": "agent",
      "lines": 302,
      "description": "Generates book completion certificate and achievement summary",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 121,
          "char": "🎉",
          "ord": 127881,
          "message": "Unicode character '🎉' found at line 121"
        },
        {
          "type": "unicode_character",
          "line": 139,
          "char": "🏆",
          "ord": 127942,
          "message": "Unicode character '🏆' found at line 139"
        },
        {
          "type": "unicode_character",
          "line": 148,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 148"
        },
        {
          "type": "unicode_character",
          "line": 193,
          "char": "🌟",
          "ord": 127775,
          "message": "Unicode character '🌟' found at line 193"
        },
        {
          "type": "unicode_character",
          "line": 195,
          "char": "🎊",
          "ord": 127882,
          "message": "Unicode character '🎊' found at line 195"
        },
        {
          "type": "unicode_character",
          "line": 197,
          "char": "👏",
          "ord": 128079,
          "message": "Unicode character '👏' found at line 197"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{n}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Collection",
          "2: Certificate Creation",
          "3: Celebration Message",
          "1: Achievement Documentation",
          "2: Certificate Generation",
          "3: Summary Report Creation"
        ],
        "decision_points": [
          "Generating Certificate",
          "avg_quality >= 98",
          "avg_quality >= 95",
          "avg_quality >= 90"
        ],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 835,
      "line_count": 302
    },
    "completion-validator": {
      "file": ".claude\\agents\\completion-validator.md",
      "name": "completion-validator",
      "type": "agent",
      "lines": 216,
      "description": "Validates book completion readiness",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Glob",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch*/"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "quality_score exists and >= 90",
          "all chapter files exist and have content\"",
          "minimum word count (>5000 words typical)",
          "opening hooks readers",
          "all chapters have meta",
          "statistics are populated",
          "last_modified is recent",
          "for placeholder markers (TODO, TBD, XXX)",
          "denouement exists",
          "content exists"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Response"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Discovery and Inventory",
          "2: Content Validation",
          "3: Quality Verification",
          "4: Narrative Analysis",
          "1: Chapter Completion Verification",
          "2: Quality Standards Validation",
          "3: Narrative Completeness Assessment"
        ],
        "decision_points": [
          "all chapters have meta.json with quality scores\"",
          "Validating Completion",
          "for placeholder markers (TODO, TBD, XXX)",
          "metadata completeness**",
          "last_modified is recent"
        ],
        "validation_logic": [
          "expected chapter count matches actual\"",
          "all chapter files exist and have content\"",
          "all chapters have meta.json with quality scores\"",
          "no TODO or placeholder text remains\"",
          "\"Quality variation within acceptable range\""
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 699,
      "line_count": 216
    },
    "context-validator": {
      "file": ".claude\\agents\\context-validator.md",
      "name": "context-validator",
      "type": "agent",
      "lines": 145,
      "description": "Validates context cache integrity and detects system changes during analysis",
      "thinking": "Validate context cache integrity thoroughly - check all cached file hashes against current system state, detect critical changes that would invalidate analysis, identify new or deleted files since cache creation, assess impact of changes on analysis accuracy, determine if context regeneration is needed, and provide clear risk assessment. Focus on preventing stale data from corrupting system analysis.",
      "tools": [
        "Read",
        "Write",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 105,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 105"
        },
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{timestamp}/context.json",
          "{timestamp}/context.json."
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "for new files**:",
          "cache if changed):",
          "for any system changes that would invalidate the cached data and report validation status with recommended action",
          "each cached file:",
          "the integrity of cached context",
          "if file exists in cached_context",
          "call this before Phase 2:",
          "context cache integrity at",
          "if the cached context",
          "context cache integrity thoroughly - check all cached file hashes against current system state, detect critical changes that would invalidate analysis, identify new or deleted files since cache creation, assess impact of changes on analysis accuracy, determine if context regeneration is needed, and provide clear risk assessment"
        ]
      },
      "execution": {
        "patterns": [
          "parallel"
        ],
        "dependencies": [],
        "error_handling": [
          "Validation Results",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Load Cached Context",
          "2: Calculate Current System State",
          "3: Generate Validation Report",
          "4: Handle Validation Results",
          "2: Use the context-validator subagent to validate context cache integrity at .claude/report/{timestamp}/context.json. Check for any system changes that would invalidate the cached data and report validation status with recommended action."
        ],
        "decision_points": [
          "all cached file hashes against current system state, detect critical changes that would invalidate analysis, identify new or deleted files since cache creation, assess impact of changes on analysis accuracy, determine if context regeneration is needed, and provide clear risk assessment. Focus on preventing stale data from corrupting system analysis.",
          "if the cached context.json is still valid by comparing current system state with cached file hashes.",
          "file exists",
          "hashes differ",
          "file missing"
        ],
        "validation_logic": [
          "context cache integrity thoroughly - check all cached file hashes against current system state, detect critical changes that would invalidate analysis, identify new or deleted files since cache creation, assess impact of changes on analysis accuracy, determine if context regeneration is needed, and provide clear risk assessment. Focus on preventing stale data from corrupting system analysis.",
          "the integrity of cached context.json files during long-running system analysis to prevent stale data issues.",
          "if the cached context.json is still valid by comparing current system state with cached file hashes.",
          "each cached file:",
          "for new files**:"
        ],
        "business_rules": [
          "If no changed_files detected: Status = VALID",
          "If only non-critical files changed: Status = VALID_WITH_WARNINGS",
          "If critical files changed: Status = INVALID",
          "If more than 10% of files changed: Status = INVALID",
          "Validation completes in <5 seconds",
          "Accurately detects >95% of meaningful changes",
          "Provides clear actionable recommendations",
          "Prevents analysis based on stale data",
          "Minimal false positives for non-critical changes"
        ],
        "success_criteria": [
          "- Validation completes in <5 seconds"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 830,
      "line_count": 145
    },
    "continuity-final-checker": {
      "file": ".claude\\agents\\continuity-final-checker.md",
      "name": "continuity-final-checker",
      "type": "agent",
      "lines": 314,
      "description": "Final comprehensive continuity validation across entire book",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Grep",
        "Glob"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{chapter}/chapter.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "time flow makes sense",
          "against seasonal mentions",
          "character consistency**:",
          "knowledge consistency",
          "location continuity",
          "rule consistency**:",
          "chronological consistency**:",
          "world rules remain stable",
          "across all chapters, ensuring perfect narrative consistency before book completion",
          "object tracking in chapters 15-18\""
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial"
        ],
        "dependencies": [],
        "error_handling": [
          "Report"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Timeline Verification",
          "2: Character Tracking",
          "3: World Consistency",
          "1: Timeline Continuity Verification",
          "2: Character Continuity Tracking",
          "3: World Continuity Maintenance"
        ],
        "decision_points": [
          "across all chapters, ensuring perfect narrative consistency before book completion.",
          "Checking Final Continuity",
          "time flow makes sense",
          "not verify_time_progression(current, next)",
          "season != expected_season"
        ],
        "validation_logic": [
          "across all chapters, ensuring perfect narrative consistency before book completion.",
          "chronological consistency**:",
          "time flow makes sense",
          "against seasonal mentions",
          "character consistency**:"
        ],
        "business_rules": [
          "Tracks complex state across chapters",
          "Cross-references multiple data points"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 852,
      "line_count": 314
    },
    "continuity-guard-specialist": {
      "file": ".claude\\agents\\continuity-guard-specialist.md",
      "name": "continuity-guard-specialist",
      "type": "agent",
      "lines": 338,
      "description": "Guards continuity with reference evolution tracking",
      "thinking": "Guard continuity with reference evolution tracking expertise - understand natural progression from formal to intimate addressing, maintain strict timeline and physical continuity enforcement, track character knowledge boundaries and information flow, integrate entity dictionary validation for approved variations, distinguish critical breaks from natural evolution patterns, apply enhancement techniques even when no errors found, and save corrected versions with mandatory improvements to temporal markers and narrative flow. Focus on evolution tracking rather than rigid consistency.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 318,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 318"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v03_world_clues.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v04_continuity_checked.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "*Continuity Analysis Report Format:**",
          "Natural Progressions Detected:*",
          "Sarah addressed as \"Sarah\" by Carmen (relationship progressed)",
          "Casa Vista Verde referred to as \"home\" (3 months residency)",
          "Growing familiarity patterns consistent",
          "Timeline Issues:*",
          "List any temporal inconsistencies found",
          "Continuity Breaks:*",
          "Document critical issues requiring fixes",
          "Include specific examples and recommended solutions",
          "Continuity Score Breakdown:*",
          "Timeline consistency: Perfect/Good/Issues",
          "Reference evolution: Natural/Forced/Inconsistent",
          "Physical continuity: Score and issue count",
          "Knowledge boundaries: Violations detected"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Confirm: \"[x] Continuity-fixed version saved atomically to v04_continuity_checked.md\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "characters only know what they've learned",
          "if reference is in approved variations list",
          "introduction and familiarity timeline",
          "for impossible knowledge reveals",
          "remain strict",
          "if reference is in approved variations",
          "be discovered before known",
          "character locations and travel times",
          "still enhance the text with at least 3-5 small improvements to temporal markers, character consistency, or narrative flow while maintaining word count (±5% tolerance)",
          "age progression and duration consistency"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ PREVIOUS VERSION",
          "2: ANALYZE CONTINUITY",
          "3: APPLY CONTINUITY FIXES AND ENHANCEMENTS",
          "4: SAVE ENHANCED VERSION (ATOMIC)",
          "1: Timeline Management (Strict)",
          "2: Reference Evolution Tracking (NEW)",
          "3: Entity Dictionary Integration",
          "4: Physical Continuity (Strict)",
          "5: Knowledge Boundary Management",
          "1: Read entity dictionary from project shared folder",
          "2: Check if reference is in approved variations",
          "3: Assess if it fits natural progression patterns",
          "4: Flag for learning if it's a consistent new pattern",
          "5: Report status for each reference check"
        ],
        "decision_points": [
          "no errors found, and save corrected versions with mandatory improvements to temporal markers and narrative flow. Focus on evolution tracking rather than rigid consistency.",
          "continuity and save results.",
          "reading Bible, concentrate on",
          "examining the complete narrative context.",
          "reading Bible, concentrate on"
        ],
        "validation_logic": [
          "continuity and save results.",
          "continuity, and save the enhanced version directly.",
          "against relationship progression timeline",
          "introduction and familiarity timeline",
          "for approved variations"
        ],
        "business_rules": [
          "*",
          "Objects cannot appear/disappear without explanation",
          "Broken things stay broken unless fixed",
          "Objects move only when moved by characters"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1642,
      "line_count": 338
    },
    "cozy-mystery-specialist": {
      "file": ".claude\\agents\\cozy-mystery-specialist.md",
      "name": "cozy-mystery-specialist",
      "type": "agent",
      "lines": 292,
      "description": "Enhances drafts with authentic cozy mystery genre elements",
      "thinking": "Enhance drafts with authentic cozy mystery elements - verify genre match before processing, weave in community fabric and comfort routines naturally, add amateur detective curiosity without professional behavior, maintain gentle mystery progression without graphic content, integrate food culture and local knowledge organically, preserve cozy boundaries with appropriate tone, and avoid generic cozy cliches. Focus on authentic community feel over performative quaintness.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 284,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 284"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "- NOT: \"She felt safe in her kitchen\"\n- USE: \"Seven drops of orange water. Her hands knew this measurement in sleep, in sorrow, in the dark before dawn.\"",
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Document cozy elements added\n   - Confirm: \"[x] Cozy mystery enhanced draft saved atomically to v08_genre_enhanced.md\"",
          "1: Community Information Network\n**Before**: \"She asked around about Rosa's whereabouts.\"",
          "2: Comfort Through Ritual\n**Before**: \"Maria was in her kitchen baking.\"",
          "3: Amateur Detective Curiosity\n**Before**: \"She suspected something was wrong.\"",
          "4: Gentle Mystery Integration\n**Before**: \"The crime needed investigation.\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "genre match before processing, weave in community fabric and comfort routines naturally, add amateur detective curiosity without professional behavior, maintain gentle mystery progression without graphic content, integrate food culture and local knowledge organically, preserve cozy boundaries with appropriate tone, and avoid generic cozy cliches",
          "primary_genre = \"cozy_mystery\" or similar",
          "DIRECTLY edit the content and save it",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: VERIFICATION",
          "2: COZY MYSTERY ENHANCEMENT",
          "3: PRESERVE COZY BOUNDARIES",
          "4: NATURAL COZY INTEGRATION",
          "5: APPLY ALL COZY ENHANCEMENTS",
          "6: SAVE COZY-ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "NOT cozy mystery, SKIP processing and return unchanged",
          "operation fails mid-write"
        ],
        "validation_logic": [
          "genre match before processing, weave in community fabric and comfort routines naturally, add amateur detective curiosity without professional behavior, maintain gentle mystery progression without graphic content, integrate food culture and local knowledge organically, preserve cozy boundaries with appropriate tone, and avoid generic cozy cliches. Focus on authentic community feel over performative quaintness.",
          "primary_genre = \"cozy_mystery\" or similar"
        ],
        "business_rules": [
          "Violence happens off-screen/past tense",
          "Focus on relationships and motives",
          "Community secrets gradually revealed",
          "Fair play clues through daily life",
          "Resolution through understanding, not action",
          "NO graphic violence or disturbing imagery",
          "Amateur detective (not professional)",
          "Community setting (not urban anonymous)",
          "Resolution through understanding/relationships",
          "Hopeful/restorative ending tone",
          "Crime mentioned in past tense",
          "Focus on impact on community, not details",
          "Victim as person-in-community, not body",
          "Investigation through conversation, not forensics",
          "Concern rather than fear",
          "Puzzle-solving satisfaction",
          "Community solidarity",
          "Restoration of harmony",
          "40% community/relationship development",
          "30% comfort/atmosphere elements",
          "20% mystery progression",
          "10% local culture/tradition"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1505,
      "line_count": 292
    },
    "cross-chapter-flow-validator": {
      "file": ".claude\\agents\\cross-chapter-flow-validator.md",
      "name": "cross-chapter-flow-validator",
      "type": "agent",
      "lines": 162,
      "description": "Validates narrative flow between chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "character locations are consistent\"",
          "time passages\"",
          "character emotional continuity\"",
          "be believable and necessary\"",
          "for impossible time jumps",
          "location transitions are logical\"",
          "chronological progression against Bible timeline",
          "if opening honors that pull",
          "non-linear time is clearly marked\"",
          "reader engagement maintained"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [
          "immediate"
        ],
        "error_handling": [
          "60  # Below this requires immediate revision"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Adjacent Chapter Transition Analysis",
          "2: Temporal Flow Validation",
          "3: Narrative Momentum Assessment"
        ],
        "decision_points": [
          "character emotional continuity\"",
          "Validating Chapter Flow",
          "valid, refresh if needed.",
          "Direct Continuity**",
          "time progression is logical per Bible timeline"
        ],
        "validation_logic": [
          "character locations are consistent\"",
          "character emotional continuity\"",
          "location transitions are logical\"",
          "events progress logically forward\"",
          "time passages\""
        ],
        "business_rules": [
          "Use Read tool to get last 500 words of chapter N",
          "Use Read tool to get first 500 words of chapter N+1",
          "Note ending type: cliffhanger, resolution, or setup",
          "Note opening type: continuation, new scene, or flashback"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 642,
      "line_count": 162
    },
    "current-project-updater": {
      "file": ".claude\\agents\\current-project-updater.md",
      "name": "current-project-updater",
      "type": "agent",
      "lines": 205,
      "description": "Updates the current project pointer for project switching",
      "thinking": "Manage current project pointer systematically - validate new project existence and essential file structure, record previous project for history tracking, create comprehensive pointer metadata with validation status, update activity timestamps in project files, handle special cases for creation versus switching, provide clear error messages for missing projects, ensure fast operation with simple overwrite logic, and maintain project context consistency. Focus on reliable pointer management and validation.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{new_project}/project.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "*Return Confirmation Format:**",
          "Success indicator with new project name",
          "Previous project reference",
          "Book count summary",
          "Chapter count status",
          "Last activity timestamp"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "New Project",
          "Project Exists**",
          "for essential files:**",
          "book_1 directory exists",
          "project directory exists",
          "directory exists:**",
          "current pointer:**",
          "current without switching:",
          "for required files",
          "new project existence and essential file structure, record previous project for history tracking, create comprehensive pointer metadata with validation status, update activity timestamps in project files, handle special cases for creation versus switching, provide clear error messages for missing projects, ensure fast operation with simple overwrite logic, and maintain project context consistency"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "special cases for creation versus switching, provide clear error messages for missing projects, ensure fast operation with simple overwrite logic, and maintain project context consistency. Focus on reliable pointer management and validation.",
          "\"Project '{new_project}' does not exist\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate New Project",
          "2: Load Current Pointer (if exists)",
          "3: Create New Pointer",
          "4: Save Current Pointer",
          "5: Update Project Activity",
          "6: Load Project Context (Optional)"
        ],
        "decision_points": [
          "switching between projects.",
          "for required files",
          "`project-switch` command is executed",
          "new project is created",
          "not found, ERROR"
        ],
        "validation_logic": [
          "new project existence and essential file structure, record previous project for history tracking, create comprehensive pointer metadata with validation status, update activity timestamps in project files, handle special cases for creation versus switching, provide clear error messages for missing projects, ensure fast operation with simple overwrite logic, and maintain project context consistency. Focus on reliable pointer management and validation.",
          "Project Exists**",
          "project directory exists",
          "for required files",
          "New Project"
        ],
        "business_rules": [
          "Correct project pointer set",
          "Previous project recorded",
          "Validation performed",
          "Activity timestamp updated",
          "Clear user confirmation"
        ],
        "success_criteria": [
          "- Correct project pointer set"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 790,
      "line_count": 205
    },
    "dialogue-character-specialist": {
      "file": ".claude\\agents\\dialogue-character-specialist.md",
      "name": "dialogue-character-specialist",
      "type": "agent",
      "lines": 286,
      "description": "Enhances both dialogue quality and character depth through behavior",
      "thinking": "Enhance dialogue authenticity and character psychology through behavioral showing - make each character's voice distinct with speech patterns reflecting background, replace mental state labels with physical actions and environmental interactions, add natural speech imperfections like interruptions and false starts, reveal psychology through body language and subtext rather than exposition, eliminate AI patterns like 'realized/noticed' overuse, integrate dialogue beats with meaningful actions, and ensure every conversation shows character depth while advancing plot. Focus on authentic human behavior over perfect communication.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 279,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 279"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v01_initial_draft.md",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v02_dialogue_character.md"
        ],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "1: Revealing Character Through Dialogue\n**Before**: \n\"I don't want to go,\" she said nervously, realizing he might be upset.",
          "2: Power Dynamics in Speech\n**Before**: \nThey both wanted to lead the investigation.",
          "3: Subtext and Tension\n**Before**: \nHe was suspicious of her story.",
          "4: Character Revealed Through Interaction\n**Before**: \nThe nervous baker was worried about the competition."
        ],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY edit the content and save it",
          "names, titles, relationships",
          "every conversation shows character depth while advancing plot",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "objects (gentle or rough)",
          "bent under his grip."
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: ENHANCE DIALOGUE & CHARACTER (MERGED)",
          "3: APPLY ALL DIALOGUE & CHARACTER ENHANCEMENTS",
          "4: SAVE ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "names, titles, relationships",
          "you think I'm going to...\"",
          "operation fails mid-write",
          "appropriate)"
        ],
        "validation_logic": [
          "every conversation shows character depth while advancing plot. Focus on authentic human behavior over perfect communication.",
          "names, titles, relationships"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1346,
      "line_count": 286
    },
    "emotion-specialist": {
      "file": ".claude\\agents\\emotion-specialist.md",
      "name": "emotion-specialist",
      "type": "agent",
      "lines": 296,
      "description": "Manages emotional resonance through subtle triggers and natural emotional arcs",
      "thinking": "Enhance emotional depth through subtle triggers and natural progression - plant sensory triggers with delayed emotional payloads, replace emotional labels with physical manifestations, create natural emotional arcs using gradual build and saw-tooth patterns, use environmental emotional reflection instead of direct statements, apply genre-specific emotional calibration, integrate delayed reactions and displacement patterns, maintain emotional variety requirements with contradictions, and eliminate AI patterns like emotional over-explanation. Focus on showing emotion through body language and environmental interaction.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 289,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 289"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v04_continuity_checked.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v05_emotions_woven.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Document emotional arc created\n   - Confirm: \"[x] Emotionally enriched draft saved atomically to v05_emotions_woven.md\"",
          "1: Anger Without Labels\n**Before**: \nShe was furious about the judgment.",
          "2: Grief Through Action\n**Before**:\nThe memory of her grandmother made her sad.",
          "3: Fear Through Senses\n**Before**:\nHe was afraid something was wrong.",
          "4: Joy Through Movement\n**Before**:\nShe was happy about the news."
        ],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY edit the content and save it",
          "file exists",
          "file has content (>1000 characters)",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "\"v04_continuity_checked.md not found or empty - continuity step failed\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: ENHANCE EMOTIONAL LANDSCAPE",
          "3: GENRE-SPECIFIC EMOTIONAL CALIBRATION",
          "4: APPLY EMOTIONAL ENHANCEMENTS",
          "5: SAVE ENHANCED VERSION (ATOMIC)"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "file has content (>1000 characters)",
          "file missing or empty",
          "sad, rough handling when angry, avoiding touch when guilty",
          "feeling small, spreading out when confident, seeking corners when afraid"
        ],
        "validation_logic": [
          "file exists",
          "file has content (>1000 characters)"
        ],
        "business_rules": [
          "--",
          "Identify genre emotional conventions",
          "Confirm: \"[x] Emotional blueprint loaded\"",
          "*",
          "At least 3 different emotions",
          "Both positive and negative moments",
          "One unexpected emotional response",
          "One delayed emotional reaction"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1372,
      "line_count": 296
    },
    "emotion-weaver-specialist": {
      "file": ".claude\\agents\\emotion-weaver-specialist.md",
      "name": "emotion-weaver-specialist",
      "type": "agent",
      "lines": 151,
      "description": "Manages emotional curves and resonance",
      "thinking": "Weave emotional depth expertly - analyze current emotional content and identify dominant emotions across scenes, design sophisticated emotional curves balancing tension peaks with relief valleys, apply multi-layered expression techniques using sensory details and body language, enhance universal resonance through relatable emotional experiences, ensure authentic emotional progression and natural transitions, create complex emotional responses through subtle layering, and maintain reader engagement through varied expression artistry. Focus on emotional authenticity over melodrama.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "progression feels natural",
          "natural emotional flow",
          "authentic emotional progression and natural transitions, create complex emotional responses through subtle layering, and maintain reader engagement through varied expression artistry",
          "resonate throughout the narrative",
          "variety in expression methods",
          "satisfying emotional resolution",
          "emotional authenticity"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "8: for emotional curve design",
          "1: Emotional Curve Design",
          "2: Emotional Resonance Mechanism",
          "3: Emotional Expression Art",
          "1: Reads the chapter draft",
          "2: Analyzes emotional content and progression",
          "3: Identifies areas lacking emotional depth",
          "4: Applies enhancement techniques",
          "5: Reports emotional quality metrics"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "Weaving Emotions",
          "progression feels natural",
          "analyzing emotions, provide",
          "invoked, the agent"
        ],
        "validation_logic": [
          "authentic emotional progression and natural transitions, create complex emotional responses through subtle layering, and maintain reader engagement through varied expression artistry. Focus on emotional authenticity over melodrama.",
          "natural emotional flow",
          "satisfying emotional resolution",
          "emotional authenticity",
          "progression feels natural"
        ],
        "business_rules": [
          "Above 90: Excellent level"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 731,
      "line_count": 151
    },
    "emotional-trigger-specialist": {
      "file": ".claude\\agents\\emotional-trigger-specialist.md",
      "name": "emotional-trigger-specialist",
      "type": "agent",
      "lines": 208,
      "description": "Masters subtle emotional triggers that create lasting reader connection through micro-details and universal human experiences",
      "thinking": "Master subtle emotional triggers expertly - identify character vulnerabilities and universal fears that resonate with readers' lived experiences, plant specific micro-details that connect to childhood echoes and adult recognitions, use quiet gestures and loaded objects as emotional anchors, leverage silence and physical micro-expressions for authentic vulnerability, apply iceberg method with 90% submerged emotional weight, create lasting reader connection through specific detail + universal emotion formula, and ensure triggers feel discovered rather than forced. Focus on truth over manipulation.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "\"She still made two cups of coffee\" (specific)\n+ Loss/Hope (universal emotions)\n= Reader supplies their own experience of loss\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "triggers feel discovered rather than forced",
          "reader feel?"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "topic gets too close",
          "receiving compliment",
          "detail carries full impact",
          "Called by Chapter Generation**"
        ],
        "validation_logic": [
          "triggers feel discovered rather than forced. Focus on truth over manipulation."
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1085,
      "line_count": 208
    },
    "entity-dictionary-creator": {
      "file": ".claude\\agents\\entity-dictionary-creator.md",
      "name": "entity-dictionary-creator",
      "type": "agent",
      "lines": 236,
      "description": "Creates initial entity dictionary from Bible",
      "thinking": "Create initial entity dictionary comprehensively - extract all characters, locations, and objects from Bible source systematically, build canonical name registry with proper variation tracking framework, implement critical facts protection for unchangeable elements, establish learning threshold configuration, create structured YAML dictionary with proper metadata, generate quick reference index for performance, handle error conditions gracefully, and prepare foundation for incremental learning updates. Focus on complete Bible entity extraction and structured organization.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/shared/entity_dictionary.yaml",
          "{project}/series_bible.yaml",
          "{project}/book_1/bible.yaml",
          "{project}/shared/entity_index.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "Characters: {char_count}",
          "Locations: {loc_count}",
          "Objects: {obj_count}"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "come from Bible",
          "for existing dictionary:**",
          "Prerequisites",
          "before writing",
          "Bible source:**"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [
          "error conditions gracefully, and prepare foundation for incremental learning updates. Focus on complete Bible entity extraction and structured organization.",
          "\"Dictionary already exists - use entity-dictionary-updater instead\"",
          "\"Bible not found - create Bible first\"",
          "Handling",
          "message"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Extract Characters",
          "3: Extract Locations",
          "4: Extract Objects",
          "5: Configure Learning System",
          "6: Save Dictionary",
          "7: Create Index File"
        ],
        "decision_points": [
          "entity_dictionary.yaml doesn't exist",
          "for existing dictionary",
          "exists, ERROR",
          "missing, ERROR"
        ],
        "validation_logic": [
          "Prerequisites",
          "for existing dictionary:**",
          "Bible source:**",
          "before writing"
        ],
        "business_rules": [
          "Complete entity extraction from Bible",
          "Proper YAML structure",
          "All critical facts preserved",
          "Learning system ready",
          "Index file created"
        ],
        "success_criteria": [
          "- Complete entity extraction from Bible"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 769,
      "line_count": 236
    },
    "entity-dictionary-updater": {
      "file": ".claude\\agents\\entity-dictionary-updater.md",
      "name": "entity-dictionary-updater",
      "type": "agent",
      "lines": 205,
      "description": "Incrementally updates entity dictionary from high-quality chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/chapters/ch{chapter}/quality_report.json",
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{book}/chapters/ch{chapter}/content.md",
          "{project}/book_{book}/chapters/ch{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Character \"Sarah Mitchell\"\n   Found variations:\n   - \"Sarah\" (informal, dialogue)\n   - \"Ms. Mitchell\" (formal, narration)\n   - \"Detective Mitchell\" (professional)\n   - \"Sarge\" (nickname by team)\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "quality threshold:**",
          "if already in dictionary",
          "Prerequisites",
          "not a typo or error",
          "context makes sense",
          "existing dictionary:**",
          "variations:**"
        ]
      },
      "execution": {
        "patterns": [
          "serial",
          "pipeline"
        ],
        "dependencies": [
          "Bible"
        ],
        "error_handling": [
          "\"Chapter not qualified for learning\"",
          "\"Dictionary not found - run entity-dictionary-creator first\"",
          "\"Chapter content not found\"",
          "### Step 4: Merge with Existing Dictionary",
          "New Entities"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Read Chapter Content",
          "3: Extract New Variations",
          "4: Merge with Existing Dictionary",
          "5: Handle New Entities",
          "6: Save Updated Dictionary",
          "7: Update Chapter Meta"
        ],
        "decision_points": [
          "quality_score >= 95",
          "< 95, ERROR",
          "existing dictionary",
          "missing, ERROR",
          "missing, ERROR"
        ],
        "validation_logic": [
          "Prerequisites",
          "quality threshold:**",
          "existing dictionary:**",
          "variations:**",
          "if already in dictionary"
        ],
        "business_rules": [
          "No data loss (all existing variations preserved)",
          "Accurate variation extraction",
          "Proper categorization (formal/informal)",
          "Clean merge without duplicates",
          "Audit trail maintained"
        ],
        "success_criteria": [
          "- No data loss (all existing variations preserved)"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 723,
      "line_count": 205
    },
    "entity-validator": {
      "file": ".claude\\agents\\entity-validator.md",
      "name": "entity-validator",
      "type": "agent",
      "lines": 153,
      "description": "Validates entity naming consistency against project dictionary before chapter generation",
      "thinking": "Validate entity consistency meticulously - check all entity references against canonical dictionary, distinguish between approved variations and forbidden variations, validate critical facts remain unchanged, track entity introduction order, ensure first mentions use canonical names, flag any inconsistencies for correction before generation, and maintain strict consistency standards. Focus on preventing naming errors early in the pipeline.",
      "tools": [
        "Read",
        "Write",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 105,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 105"
        },
        {
          "type": "unicode_character",
          "line": 113,
          "char": "🆕",
          "ord": 127381,
          "message": "Unicode character '🆕' found at line 113"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [
          " not found in prompt, STOP with error: ",
          " in your prompt\n   - Extract the file path after ",
          ".claude/data/projects/{project}/shared/entity_dictionary.yaml",
          "\n   - Use Read tool to load that specific file\n   - If "
        ],
        "writes": [
          "{project}/shared/entity_dictionary.yaml",
          "{project}/shared/entity_dictionary.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "parsing:\n   - If prompt contains: \"VALIDATION TARGET: .claude/data/projects/MyProject/book_1/chapters/ch001/outline.json\"\n   - Then read: .claude/data/projects/MyProject/book_1/chapters/ch001/outline.json"
        ],
        "json_schemas": [],
        "validation_rules": [
          "each entity against canonical names and allowed variations",
          "Prerequisites:**",
          "dictionary exists: `",
          "entities - Dictionary not found",
          "specify VALIDATION TARGET in prompt",
          "entity naming consistency and maintain narrative continuity across the novel series",
          "entity consistency meticulously - check all entity references against canonical dictionary, distinguish between approved variations and forbidden variations, validate critical facts remain unchanged, track entity introduction order, ensure first mentions use canonical names, flag any inconsistencies for correction before generation, and maintain strict consistency standards",
          "DIRECTLY perform validation and save the report",
          "critical facts consistency",
          "entities, and save the validation report"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [
          "canonical",
          "context"
        ],
        "error_handling": [
          "\"Cannot validate entities - Dictionary not found. Run /novel:project-new or entity-dictionary-manager first\"",
          "\"[ ] No validation target provided. Coordinator must specify VALIDATION TARGET in prompt.\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Dictionary Loading",
          "2: Content Scanning (PARSE TARGET FROM PROMPT)",
          "3: Violation Reporting"
        ],
        "decision_points": [
          "all entity references against canonical dictionary, distinguish between approved variations and forbidden variations, validate critical facts remain unchanged, track entity introduction order, ensure first mentions use canonical names, flag any inconsistencies for correction before generation, and maintain strict consistency standards. Focus on preventing naming errors early in the pipeline.",
          "reading Bible, concentrate on",
          "each entity against canonical names and allowed variations",
          "critical naming violations found",
          "dictionary missing, STOP with error"
        ],
        "validation_logic": [
          "entity consistency meticulously - check all entity references against canonical dictionary, distinguish between approved variations and forbidden variations, validate critical facts remain unchanged, track entity introduction order, ensure first mentions use canonical names, flag any inconsistencies for correction before generation, and maintain strict consistency standards. Focus on preventing naming errors early in the pipeline.",
          "entities, and save the validation report.",
          "each entity against canonical names and allowed variations",
          "Prerequisites:**",
          "dictionary exists: `.claude/data/projects/{project}/shared/entity_dictionary.yaml`"
        ],
        "business_rules": [
          "Block generation if critical naming violations found",
          "Provide detailed validation report",
          "*",
          "Characters: strict_on_critical_facts settings",
          "Locations: allow_variations settings",
          "Objects: functional_descriptions allowance"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 809,
      "line_count": 153
    },
    "fantasy-specialist": {
      "file": ".claude\\agents\\fantasy-specialist.md",
      "name": "fantasy-specialist",
      "type": "agent",
      "lines": 347,
      "description": "Enhances drafts with authentic fantasy genre elements",
      "thinking": "Enhance drafts with authentic fantasy elements - verify genre match before processing, integrate consistent magic systems with costs and limitations, add world-building details that serve the story, weave in epic scope through personal stakes, maintain internal logic and consistency, balance wonder with believability, and avoid generic fantasy cliches. Focus on magic serving narrative rather than solving problems conveniently.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 339,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 339"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md"
        ],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "- NOT: \"She cast a powerful spell\"\n- USE: \"The translocation circle took six hours to draw, cost a month's wages in silver dust, and left her barely able to stand. But they were three hundred miles away from the assassins.\"",
          "1: Magic System Limitation\n**Before**: \"She used magic to solve the problem.\"",
          "2: World-Building Through Detail\n**Before**: \"The fantasy city was impressive.\"",
          "3: Cultural Integration\n**Before**: \"Magic users were respected in this society.\"",
          "4: Personal Cost of Power\n**Before**: \"Using magic was difficult.\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "primary_genre contains \"fantasy\"",
          "actively modify the content:",
          "genre match before processing, integrate consistent magic systems with costs and limitations, add world-building details that serve the story, weave in epic scope through personal stakes, maintain internal logic and consistency, balance wonder with believability, and avoid generic fantasy cliches"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: VERIFICATION",
          "2: FANTASY ENHANCEMENT",
          "3: PRESERVE FANTASY AUTHENTICITY",
          "4: NATURAL FANTASY INTEGRATION",
          "5: APPLY ALL FANTASY ENHANCEMENTS",
          "6: SAVE FANTASY-ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "NOT fantasy, SKIP processing and return unchanged",
          "operation fails mid-write",
          "bread was ready could save lives during siege season.\""
        ],
        "validation_logic": [
          "genre match before processing, integrate consistent magic systems with costs and limitations, add world-building details that serve the story, weave in epic scope through personal stakes, maintain internal logic and consistency, balance wonder with believability, and avoid generic fantasy cliches. Focus on magic serving narrative rather than solving problems conveniently.",
          "primary_genre contains \"fantasy\""
        ],
        "business_rules": [
          "Magic follows established rules from Bible",
          "Costs and limitations are real",
          "Power sources are defined and limited",
          "Magic affects users physically/mentally",
          "Spells/abilities have concrete effects",
          "NOT: \"Magic filled the air\"",
          "USE: \"The third ward-stone flickered. Someone was testing the barrier's weak points.\"",
          "World-building that supports story",
          "Characters affected by fantasy elements",
          "Stakes appropriate to fantastical scope",
          "Wonder balanced with believability",
          "Clear limitations and costs",
          "Logical rules that don't change arbitrarily",
          "Cultural integration (how society adapts)",
          "Personal consequences for users",
          "Geography that serves story",
          "History that explains present conditions",
          "Culture that reflects fantasy elements",
          "Economic systems adapted to magic",
          "Modern elements without explanation",
          "Deus ex machina magical resolutions",
          "35% world-building and atmosphere",
          "25% magic system demonstration",
          "25% character development through fantasy elements",
          "15% plot advancement through fantastical means",
          "Magic integration: Feels natural, not tacked on",
          "Cultural authenticity: Society reflects fantasy elements",
          "Character growth: Powers/abilities develop meaningfully",
          "AI patterns: Eliminated fantasy-specific cliches",
          "Precision and complexity in casting",
          "Academic/institutional magical culture"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1754,
      "line_count": 347
    },
    "final-quality-validator": {
      "file": ".claude\\agents\\final-quality-validator.md",
      "name": "final-quality-validator",
      "type": "agent",
      "lines": 289,
      "description": "Performs comprehensive final quality validation before book completion",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Grep",
        "Glob"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "each requirement met**:",
          "quality thresholds**:"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Report"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Individual Chapter Quality",
          "2: Cross-Chapter Analysis",
          "3: Bible Compliance Check",
          "4: Final Scoring",
          "1: Comprehensive Quality Assessment",
          "2: Cross-Chapter Consistency",
          "3: Bible Compliance Verification"
        ],
        "decision_points": [
          "Performing Final Validation",
          "1. **Load Bible requirements**",
          "req_type == 'characters'",
          "req_type == 'plot_points'",
          "req_type == 'themes'"
        ],
        "validation_logic": [
          "quality thresholds**:",
          "1. **Load Bible requirements**:",
          "each requirement met**:"
        ],
        "business_rules": [
          "Scans chapter content for patterns",
          "Analyzes cross-chapter relationships"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 747,
      "line_count": 289
    },
    "foreshadowing-payoff-mapper": {
      "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
      "name": "foreshadowing-payoff-mapper",
      "type": "agent",
      "lines": 214,
      "description": "Maps foreshadowing setups to payoffs",
      "thinking": true,
      "tools": [
        "Read",
        "Grep",
        "Glob"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [
          "Setup established but abandoned mid-story",
          "Story element that builds to major revelation"
        ],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "have payoffs",
          "theoretically be able to solve it",
          "setup-payoff pairs**",
          "serve a purpose\"",
          "be able to anticipate payoffs from setups\"",
          "have all clues to solve mystery\"",
          "Connections",
          "have at least 3 prior clues"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Identify All Setups",
          "2: Identify All Payoffs",
          "3: Validate Connections",
          "1: Foreshadowing Lifecycle Tracking",
          "2: Setup-Payoff Mapping",
          "3: Orphan Detection"
        ],
        "decision_points": [
          "Mapping Foreshadowing",
          "setup-payoff pairs**",
          "tracking foreshadowing, maintain records like",
          "validating setups",
          "no payoff exists"
        ],
        "validation_logic": [
          "Connections",
          "setup-payoff pairs**"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 805,
      "line_count": 214
    },
    "foreshadowing-specialist": {
      "file": ".claude\\agents\\foreshadowing-specialist.md",
      "name": "foreshadowing-specialist",
      "type": "agent",
      "lines": 229,
      "description": "Manages foreshadowing setup and payoff lifecycle",
      "thinking": "Manage foreshadowing lifecycle comprehensively - identify plot elements requiring setup from Bible, track all active foreshadowing threads systematically, weave hints naturally into scenes without being obvious, reinforce existing setups appropriately, execute satisfying payoffs with clear setup connections, maintain quality balance between subtlety and clarity, ensure zero forgotten threads through meticulous database management, and create 'aha' moments that feel both surprising and inevitable. Focus on reader satisfaction and story integrity.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 222,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 222"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v06_prose_polished.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database",
          "database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Include all planted hints and reinforcements\n   - Preserve all other content unchanged and maintain word count (±5% tolerance)\n   - Confirm: \"[x] Foreshadowing-enhanced version saved atomically to v07_foreshadowing_added.md\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "reader awareness without being obvious",
          "no foreshadowing is forgotten",
          "reveals feel earned, not random",
          "actively modify the content:",
          "occur at planned points",
          "readers don't forget key setups",
          "have seen this coming\" moment",
          "Bible for planned plot twists",
          "all setup elements are addressed",
          "setup-payoff distance is appropriate"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "atomic"
        ],
        "dependencies": [
          "resolution"
        ],
        "error_handling": [
          "\"v06_prose_polished.md not found or empty - prose crafting step failed\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "6: for foreshadowing setup and tracking",
          "1: READ PREVIOUS VERSION",
          "2: ANALYZE AND PLANT FORESHADOWING",
          "3: APPLY ALL FORESHADOWING ENHANCEMENTS",
          "4: SAVE ENHANCED VERSION (ATOMIC)",
          "1: Foreshadowing Lifecycle Management",
          "2: Foreshadowing Network Weaving",
          "3: Foreshadowing Quality Control",
          "1: Reads Bible for planned plot twists and reveals",
          "2: Checks existing foreshadowing tracker",
          "3: Identifies new setup opportunities",
          "4: Plans maintenance and payoff timing",
          "5: Ensures all threads are tracked and resolved"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "applicable)",
          "optimal setup timing and method",
          "each setup resolves",
          "Managing Foreshadowing"
        ],
        "validation_logic": [
          "zero forgotten threads through meticulous database management, and create 'aha' moments that feel both surprising and inevitable. Focus on reader satisfaction and story integrity.",
          "setups align with final payoffs",
          "Bible for planned plot twists",
          "theme development needs",
          "readers don't forget key setups"
        ],
        "business_rules": [
          "*",
          "*Setup Connection*: Clear relationship to earlier foreshadowing",
          "*Satisfaction Level*: Meets or exceeds reader expectations",
          "*Surprise Factor*: Unexpected yet inevitable feeling",
          "*Story Significance*: Meaningful impact on plot/character",
          "*Reader Recognition*: \"I should have seen this coming\" moment",
          "Above 95: Excellent level",
          "**Zero tolerance**: No foreshadowing can be forgotten",
          "**Timing accuracy**: Payoffs must occur at planned points",
          "**Reader satisfaction**: Must feel earned and logical"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1257,
      "line_count": 229
    },
    "humanization-specialist": {
      "file": ".claude\\agents\\humanization-specialist.md",
      "name": "humanization-specialist",
      "type": "agent",
      "lines": 249,
      "description": "Adds natural human writing characteristics and removes AI patterns",
      "thinking": "Add natural human writing characteristics systematically - detect mechanical AI patterns in previous version, apply vocabulary variations and syntax imperfections sparingly, disrupt predictable rhythms and paragraph structures, insert authentic dialogue imperfections, create natural energy variations across passages, maintain strict quality safeguards while introducing 2-3 humanizing touches per 1000 words, and ensure final content feels written by talented human author experiencing natural creative flow. Focus on breaking perfection without degrading story quality.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 118,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 118"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v09_humanized.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Document what humanization was applied\n   - Confirm: \"[x] Humanized draft saved atomically to v09_humanized.md\"",
          "1: Removing Perfect Parallelism\n**AI-like**: \n\"She opened the door. She saw the letter. She read it slowly.\"",
          "2: Natural Redundancy\n**AI-like**: \n\"The bakery filled with the aroma of fresh bread.\"",
          "3: Attention Drift\n**AI-like**:\n\"Maria kneaded the dough methodically, thinking about the competition.\"",
          "4: Energy Variation\n**AI-like** (consistent energy throughout)"
        ],
        "json_schemas": [],
        "validation_rules": [
          "versions/ directory for evolution",
          "final content feels written by talented human author experiencing natural creative flow",
          "for genre-enhanced version first**:",
          "DIRECTLY edit the content and save it",
          "actively modify the content:",
          "feel like a human writer's natural choices, not errors",
          "run LATE in the pipeline (step 8-9) after all enhancements but before final quality scoring"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: DETECT AI PATTERNS",
          "3: APPLY HUMANIZATION",
          "4: QUALITY SAFEGUARDS",
          "5: APPLY ALL HUMANIZATION CHANGES",
          "6: SAVE HUMANIZED VERSION",
          "1: Removes patterns added by earlier specialists",
          "2: Breaks up mechanical rhythms",
          "3: Adds authentic human touches",
          "4: Preserves story quality"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "for genre-enhanced version first**",
          "not exists, use",
          "versions/ directory for evolution",
          "we don't...\""
        ],
        "validation_logic": [
          "final content feels written by talented human author experiencing natural creative flow. Focus on breaking perfection without degrading story quality.",
          "for genre-enhanced version first**:",
          "versions/ directory for evolution"
        ],
        "business_rules": [
          "Word count (±5%)",
          "Reader engagement: High",
          "Quality score: 95+"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1213,
      "line_count": 249
    },
    "humor-injection-specialist": {
      "file": ".claude\\agents\\humor-injection-specialist.md",
      "name": "humor-injection-specialist",
      "type": "agent",
      "lines": 130,
      "description": "Adds natural humor and lightness to cozy mysteries",
      "thinking": "Add natural humor and lightness strategically to cozy mysteries - identify character quirks and contradictions for gentle comedy, inject situational mishaps and timing humor organically, add dialogue wit through banter and gentle teasing, insert narrative asides with wry observations, ensure humor emerges from character truth rather than forced jokes, maintain cozy atmosphere while lightening heavy sections, and create 3-5 smile moments per chapter that provide comfort and escape for readers. Focus on Christie-style irony over slapstick.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Transformations"
        ],
        "json_schemas": [],
        "validation_rules": [
          "Before submitting:",
          "NATURAL FLOW",
          "humor emerges from character truth rather than forced jokes, maintain cozy atmosphere while lightening heavy sections, and create 3-5 smile moments per chapter that provide comfort and escape for readers"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: IDENTIFY HUMOR OPPORTUNITIES",
          "3: INJECT HUMOR TYPES",
          "4: LIGHTEN HEAVY SECTIONS",
          "5: ADD CHRISTIE-STYLE IRONY",
          "6: ENSURE NATURAL FLOW"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "nothing suspicious)",
          "Before submitting"
        ],
        "validation_logic": [
          "humor emerges from character truth rather than forced jokes, maintain cozy atmosphere while lightening heavy sections, and create 3-5 smile moments per chapter that provide comfort and escape for readers. Focus on Christie-style irony over slapstick.",
          "NATURAL FLOW",
          "Before submitting:"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 733,
      "line_count": 130
    },
    "knowledge-base-updater": {
      "file": ".claude\\agents\\knowledge-base-updater.md",
      "name": "knowledge-base-updater",
      "type": "agent",
      "lines": 239,
      "description": "Manages Claude Code knowledge base, documentation fetching, and cache validation",
      "thinking": "Manage Claude Code knowledge base systematically - ensure proper directory structure exists, implement 24-hour cache validity checking, fetch official documentation only when needed, maintain accurate index with timestamps and metadata, handle fetch failures gracefully with retry logic, perform atomic file operations for safety, validate cached content before serving, and generate comprehensive update reports. Focus on minimizing API calls while keeping documentation current.",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [
          "https://docs.anthropic.com/en/docs/claude-code/commands",
          "https://docs.anthropic.com/en/docs/claude-code/tools",
          "https://docs.anthropic.com/en/docs/claude-code/hooks",
          "fetch",
          "WebFetch",
          "Fetch",
          "https://docs.anthropic.com/en/docs/claude-code/sub-agents",
          "https://docs.anthropic.com"
        ],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "local knowledge base first",
          "proper directory structure exists, implement 24-hour cache validity checking, fetch official documentation only when needed, maintain accurate index with timestamps and metadata, handle fetch failures gracefully with retry logic, perform atomic file operations for safety, validate cached content before serving, and generate comprehensive update reports",
          "permissions before operations",
          "for changes (future)",
          "proper directory structure exists",
          "can trigger full refresh",
          "if document path exists in index documents collection",
          "timestamps before fetching",
          "markdown structure",
          "if exists in index"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [
          "fetch"
        ],
        "error_handling": [
          "fetch failures gracefully with retry logic, perform atomic file operations for safety, validate cached content before serving, and generate comprehensive update reports. Focus on minimizing API calls while keeping documentation current.",
          "fetch errors gracefully",
          "Specific Requests",
          "Handling"
        ],
        "retry_logic": [
          "max_retries: 3"
        ],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Check/Create Structure",
          "2: Determine What to Fetch",
          "3: Fetch Documents",
          "4: Handle Specific Requests",
          "5: Generate Report",
          "1: Check if `.claude/knowledge/` exists",
          "2: Check for index.json",
          "1: Map topic to document URL",
          "2: Force fetch regardless of cache",
          "3: Save and update index",
          "1: Check if document path exists in index documents collection",
          "2: Extract fetched timestamp from document metadata",
          "3: Calculate document age in hours",
          "4: Compare age against 24-hour threshold",
          "1: Check local knowledge base first",
          "2: Call this manager if documents missing/stale",
          "3: Use cached documents for responses",
          "4: Trigger updates when needed"
        ],
        "decision_points": [
          "needed, maintain accurate index with timestamps and metadata, handle fetch failures gracefully with retry logic, perform atomic file operations for safety, validate cached content before serving, and generate comprehensive update reports. Focus on minimizing API calls while keeping documentation current.",
          "timestamps before fetching",
          "if `.claude/knowledge/` exists",
          "not, create directory structure",
          "for index.json"
        ],
        "validation_logic": [
          "proper directory structure exists, implement 24-hour cache validity checking, fetch official documentation only when needed, maintain accurate index with timestamps and metadata, handle fetch failures gracefully with retry logic, perform atomic file operations for safety, validate cached content before serving, and generate comprehensive update reports. Focus on minimizing API calls while keeping documentation current.",
          "proper directory structure exists",
          "timestamps before fetching",
          "if `.claude/knowledge/` exists",
          "for index.json"
        ],
        "business_rules": [
          "Documents valid for 24 hours after fetch",
          "Timestamp stored in index.json",
          "No re-fetch if within validity period"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1070,
      "line_count": 239
    },
    "manuscript-assembler": {
      "file": ".claude\\agents\\manuscript-assembler.md",
      "name": "manuscript-assembler",
      "type": "agent",
      "lines": 256,
      "description": "Assembles complete manuscript from individual chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/bible.yaml",
          "{project}/book_{N}/chapters/ch*/chapter.md",
          "{project}/book_{N}/manuscript.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "completeness**:",
          "proper chapter heading",
          "chapters are in correct order\"",
          "for gaps in numbering"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Preparation",
          "2: Front Matter Creation",
          "3: Content Assembly",
          "4: Final Assembly",
          "1: Chapter Collection and Ordering",
          "2: Manuscript Structure Assembly",
          "3: Formatting Standards"
        ],
        "decision_points": [
          "exists, prologue before Chapter 1\"",
          "exists, epilogue after final chapter\"",
          "provided in Bible\"",
          "provided in Bible\"",
          "book has multiple parts\""
        ],
        "validation_logic": [
          "chapters are in correct order\"",
          "completeness**:",
          "for gaps in numbering",
          "proper chapter heading"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 713,
      "line_count": 256
    },
    "metadata-generator": {
      "file": ".claude\\agents\\metadata-generator.md",
      "name": "metadata-generator",
      "type": "agent",
      "lines": 310,
      "description": "Generates comprehensive book metadata for publishing and archival",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{chapter}/meta.json",
          "{chapter}/chapter.md",
          "{chapter}/outline.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "{goal} before {stakes}"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Core Information Extraction",
          "2: Content Summary Generation",
          "3: Metadata Assembly",
          "1: Publication Metadata Creation",
          "2: Content Summaries",
          "3: Technical Specifications"
        ],
        "decision_points": [
          "applicable\"",
          "applicable\"",
          "Generating Metadata",
          "{protagonist} discovers {inciting_incident}, \" \\"
        ],
        "validation_logic": [],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 717,
      "line_count": 310
    },
    "novel-quality-process-analyzer": {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "name": "novel-quality-process-analyzer",
      "type": "agent",
      "lines": 530,
      "description": "Evaluates entire system for producing 95-point quality novels and provides actionable improvements",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Grep",
        "Glob"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 111,
          "char": "每",
          "ord": 27599,
          "message": "Unicode character '每' found at line 111"
        },
        {
          "type": "unicode_character",
          "line": 507,
          "char": "具",
          "ord": 20855,
          "message": "Unicode character '具' found at line 507"
        },
        {
          "type": "unicode_character",
          "line": 508,
          "char": "关",
          "ord": 20851,
          "message": "Unicode character '关' found at line 508"
        },
        {
          "type": "excessive_lines",
          "lines": 530,
          "limit": 500,
          "message": "Agent exceeds 500 lines (530 lines)"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{report_dir}/dependency-mapper_report.json",
          "{report_dir}/resource-analyzer_report.json",
          "{report_dir}/command-flow-mapper_report.json",
          "{report_dir}/system_flow_diagram.md",
          "{score}/100",
          "{score}/100",
          "{score}/100"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "`.claude/report/20250906_174550/novel_creation_capability.json`"
        ],
        "json_schemas": [],
        "validation_rules": [
          "mechanisms and scoring",
          "if the following features are really implemented:",
          "quality thresholds are set to 95",
          "earn its place",
          "all required agents are available",
          "if it claims \"4-Stream parallel\" but actually \"serial execution\"",
          "advance plot AND character",
          "engage senses",
          "actual threshold settings",
          "end with a hook"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "- report as \"Ready for Creation\"",
          "points",
          "Points:**",
          "Patterns"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "0: Extract Paths from Prompt",
          "1: Read and Analyze System Reports",
          "2: Analyze Creation Pipeline Flow (WITH FEATURE VERIFICATION)",
          "3: Detect System State and Analyze Results",
          "4: Evaluate Creative Components",
          "5: Deep Dive Problem Areas",
          "6: Benchmark Against Success Standards",
          "7: Generate Improvement Roadmap",
          "8: Create Actionable Report",
          "1: Reverse verification: When finding any feature claim, search for its implementation code",
          "2: Confidence level marking: Every conclusion must be marked with confidence (HIGH/MEDIUM/LOW_CONFIDENCE)",
          "3: Version consistency check: Compare documentation claims vs actual implementation",
          "4: Evidence-driven: Every conclusion must have specific citations",
          "1: Emotional starting point",
          "2: Emotional transformation",
          "3: New emotional state by scene end",
          "1: Implement Priority 1 fixes immediately",
          "2: Test with 3 chapter regenerations",
          "3: Measure improvement",
          "4: Iterate based on results"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "finding any feature claim, search for its implementation code",
          "if it claims \"4-Stream parallel\" but actually \"serial execution\"",
          "if the following features are really implemented",
          "actual threshold settings"
        ],
        "validation_logic": [
          "Compare documentation claims vs actual implementation",
          "if it claims \"4-Stream parallel\" but actually \"serial execution\"",
          "if the following features are really implemented:",
          "actual threshold settings",
          "mechanisms and scoring"
        ],
        "business_rules": [
          "plot_points: Story structure and narrative arc quality",
          "character_profiles: Depth and development assessment",
          "voice_profile: Narrative consistency and engagement",
          "themes: Thematic depth and resonance",
          "*Implementation:**",
          "Identifies SPECIFIC barriers to 95-point quality",
          "Provides ACTIONABLE improvements with line numbers",
          "Benchmarks against REAL bestseller standards",
          "Creates MEASURABLE success metrics",
          "Delivers CLEAR implementation roadmap"
        ],
        "success_criteria": [
          "- Identifies SPECIFIC barriers to 95-point quality"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 2320,
      "line_count": 530
    },
    "outline-generator": {
      "file": ".claude\\agents\\outline-generator.md",
      "name": "outline-generator",
      "type": "agent",
      "lines": 135,
      "description": "Chapter outline generator that MUST read context and save files",
      "thinking": "Generate comprehensive chapter outlines thoughtfully - expand book outline beats into detailed scenes, ensure logical progression between scenes, maintain character consistency, integrate plot advancement naturally, balance pacing and emotional rhythm, incorporate mystery elements appropriately, and align with Bible constraints. Think about narrative flow and reader engagement before structuring each scene.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 66,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 66"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_name}/book_{book_number}/outline.yaml",
          "{project_name}/book_{book_number}/outline.yaml",
          "{project_name}/book_{book_number}/bible.yaml",
          "{project_name}/book_{book_number}/chapters/",
          "{project_name}/shared/entity_dictionary.yaml",
          "{project_name}/book_{book_number}/outline.yaml",
          "{project_name}/book_{book_number}/bible.yaml"
        ],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "file existence BEFORE attempting to parse",
          "be in English",
          "read context and save files",
          "DIRECTLY generate the JSON outline and save it",
          "use characters and settings from the Bible",
          "save the outline using ATOMIC operations:",
          "logical progression between scenes, maintain character consistency, integrate plot advancement naturally, balance pacing and emotional rhythm, incorporate mystery elements appropriately, and align with Bible constraints",
          "be English/Western names",
          "be in ENGLISH**:",
          "file exists: `"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "* Use Read tool to check file exists: `.claude/data/projects/{project_name}/book_{book_number}/outline.yaml`",
          "CONDITIONS (RESTORED TO ORIGINAL DESIGN)",
          "clearly."
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ ALL REQUIRED FILES (MUST COMPLETE)",
          "2: GENERATE OUTLINE (MUST COMPLETE)",
          "3: SAVE THE OUTLINE (ATOMIC - MUST COMPLETE)",
          "1: Use Write tool: `Write(f\"{provided_path}.tmp\", your_json_outline)`",
          "2: Use Bash tool: `Bash(command=f'mv \"{provided_path}.tmp\" \"{provided_path}\"')`",
          "3: This prevents corruption if operation fails mid-write",
          "1: At least 3 \"[x]\" confirmations for reading files (book outline, bible, entity dict)",
          "2: The outline content showing inherited scene_beats",
          "3: One \"[x]\" confirmation for saving the file"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "file doesn't exist, IMMEDIATELY STOP with error",
          "file exists",
          "Read returns \"File does not exist\"  ->  TERMINATE execution with",
          "exists, confirm"
        ],
        "validation_logic": [
          "logical progression between scenes, maintain character consistency, integrate plot advancement naturally, balance pacing and emotional rhythm, incorporate mystery elements appropriately, and align with Bible constraints. Think about narrative flow and reader engagement before structuring each scene.",
          "file exists: `.claude/data/projects/{project_name}/book_{book_number}/outline.yaml`",
          "file existence BEFORE attempting to parse"
        ],
        "business_rules": [
          "*ALL content MUST be in ENGLISH**:",
          "Chapter titles and scene descriptions in English",
          "Character names must be English/Western names",
          "Location names must be in English",
          "NO Chinese characters, pinyin, or non-English content allowed"
        ],
        "success_criteria": [],
        "failure_modes": [
          "- You don't validate file existence BEFORE attempting to parse"
        ]
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 931,
      "line_count": 135
    },
    "plot-context-updater": {
      "file": ".claude\\agents\\plot-context-updater.md",
      "name": "plot-context-updater",
      "type": "agent",
      "lines": 299,
      "description": "Incrementally updates plot progression context from high-quality chapters",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/chapters/ch{chapter}/quality_report.json",
          "{project}/book_{book}/bible.yaml",
          "{project}/book_{book}/context/plot.json",
          "{project}/book_{book}/chapters/ch{chapter}/content.md",
          "{project}/book_{book}/context/plot.json",
          "{project}/book_{book}/chapters/ch{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "be complete",
          "chapter quality:**",
          "Prerequisites"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "\"Chapter not qualified for context learning\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Load Existing Context",
          "3: Analyze Chapter Content",
          "4: Merge with Existing Context",
          "5: Update Plot Momentum",
          "6: Save Updated Context",
          "7: Mark Chapter as Learned"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "quality_score >= 95",
          "< 95, ERROR",
          "if plot.json exists",
          "missing, create initial structure"
        ],
        "validation_logic": [
          "Prerequisites",
          "chapter quality:**",
          "if plot.json exists:**",
          "into inn\"]",
          "threshold)"
        ],
        "business_rules": [
          "Complete event timeline maintained",
          "All plot threads tracked",
          "Clue/revelation balance monitored",
          "Cause-effect chains preserved",
          "Clear plot progression visibility"
        ],
        "success_criteria": [
          "- Complete event timeline maintained"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 835,
      "line_count": 299
    },
    "plot-hole-validator": {
      "file": ".claude\\agents\\plot-hole-validator.md",
      "name": "plot-hole-validator",
      "type": "agent",
      "lines": 358,
      "description": "Detects plot holes and consistency problems",
      "thinking": "Detect plot holes intelligently with genre and cultural awareness - distinguish between genuine logical impossibilities and acceptable genre conventions, consider cultural context and reader expectations, validate causality chains and character knowledge boundaries, check timeline accuracy and world rule adherence, adjust severity based on genre standards, and recognize artistic choices. Focus on deep analysis of logical consistency while respecting narrative conventions.",
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 325,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 325"
        },
        {
          "type": "unicode_character",
          "line": 335,
          "char": "📊",
          "ord": 128202,
          "message": "Unicode character '📊' found at line 335"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Quick community mobilization (appropriate for island setting)\n- Example: Professional expertise recognized in crisis (realistic)"
        ],
        "json_schemas": [],
        "validation_rules": [
          "Cultural Appropriateness**",
          "established world rules",
          "be plausible",
          "causality chains and character knowledge boundaries, check timeline accuracy and world rule adherence, adjust severity based on genre standards, and recognize artistic choices",
          "Against Genre Conventions**",
          "be believable",
          "context first"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "- description: Inconsistency with established facts"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Genre-Aware Logic Standards",
          "2: Cultural Context Reasonableness",
          "3: Reader Expectation Models",
          "1: GENUINE Plot Holes (Must Fix)",
          "2: NOT Plot Holes (Genre/Culture Appropriate)",
          "1: Context-Aware Analysis",
          "2: Severity Classification with Context",
          "3: Cultural Reasonableness Validator"
        ],
        "decision_points": [
          "timeline accuracy and world rule adherence, adjust severity based on genre standards, and recognize artistic choices. Focus on deep analysis of logical consistency while respecting narrative conventions.",
          "reading Bible, concentrate on",
          "applicable)",
          "analyzing content, think deeply about logical consistency. Keep thinking about",
          "reading Bible, concentrate on"
        ],
        "validation_logic": [
          "causality chains and character knowledge boundaries, check timeline accuracy and world rule adherence, adjust severity based on genre standards, and recognize artistic choices. Focus on deep analysis of logical consistency while respecting narrative conventions.",
          "established world rules",
          "Against Genre Conventions**",
          "Cultural Appropriateness**",
          "context first"
        ],
        "business_rules": [
          "--",
          "mystery_structure: clue placement and fair play principles (if applicable)",
          "convenient_gathering: All suspects in one place",
          "instant_attraction: Love at first sight trope",
          "perfect_timing: Meeting at right moment",
          "misunderstanding_plot: Classic romance conflict",
          "*Cultural norms that are NOT plot holes:**",
          "Is this expected in this genre?",
          "Would readers find it acceptable?",
          "Does it match genre patterns?",
          "No genuine plot holes detected",
          "Continuity maintained",
          "Genre conventions respected",
          "Cultural context appropriate"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1412,
      "line_count": 358
    },
    "prerequisites-validator": {
      "file": ".claude\\agents\\prerequisites-validator.md",
      "name": "prerequisites-validator",
      "type": "agent",
      "lines": 155,
      "description": "Validates all required files exist and are accessible for quality validation",
      "thinking": "Check existence of all prerequisite files systematically - verify chapter content exists, Bible is accessible, entity dictionary is present, and any other required resources are available. Report clearly which files are missing if validation fails.",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_root}/book_{N}/chapters/ch{NNN}/content.md",
          "{project_root}/book_{N}/bible.yaml",
          "{project_root}/shared/entity_dictionary.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "chapter generation is complete first",
          "## Validation Process",
          "that all required files and resources exist before quality validation can proceed",
          "all required files are present",
          "files are readable",
          "existence of all prerequisite files systematically - verify chapter content exists, Bible is accessible, entity dictionary is present, and any other required resources are available"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "Handling",
          "messages for missing files"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Parse Input",
          "2: Systematic File Checking",
          "3: Compile Results",
          "4: Return Decision",
          "1: Clear validation status (ready/blocked)",
          "2: List of all files checked with results",
          "3: Specific list of missing files if any",
          "4: Actionable next steps if blocked"
        ],
        "decision_points": [
          "existence of all prerequisite files systematically - verify chapter content exists, Bible is accessible, entity dictionary is present, and any other required resources are available. Report clearly which files are missing if validation fails.",
          "all required files are present",
          "## Validation Process",
          "re-validation)",
          "all required files exist"
        ],
        "validation_logic": [
          "existence of all prerequisite files systematically - verify chapter content exists, Bible is accessible, entity dictionary is present, and any other required resources are available. Report clearly which files are missing if validation fails.",
          "that all required files and resources exist before quality validation can proceed.",
          "all required files are present",
          "files are readable",
          "## Validation Process"
        ],
        "business_rules": [
          "All required files verified to exist",
          "Clear reporting of validation results",
          "Helpful error messages for missing files",
          "Fast execution (< 2 seconds)"
        ],
        "success_criteria": [
          "- All required files verified to exist"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 570,
      "line_count": 155
    },
    "project-initializer": {
      "file": ".claude\\agents\\project-initializer.md",
      "name": "project-initializer",
      "type": "agent",
      "lines": 239,
      "description": "Creates complete project directory structure and initializes project files",
      "thinking": "Create comprehensive directory structure for new novel project - establish all required directories, initialize tracking files, register project in system, and ensure proper structure for future operations. Handle both series and standalone formats appropriately.",
      "tools": [
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_name}/book_1/chapters",
          "{project_name}/book_1/context",
          "{project_name}/book_1/outlines",
          "{project_name}/shared",
          "{project_name}/shared/templates",
          "{project_name}/learning_reports",
          "{project_name}/quality_reports",
          "{project_name}/series_reviews",
          "{project_name}/archive",
          "{project_name}/project.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Project name (validated and unique)",
          "Project type (series/standalone/trilogy)",
          "Initial book count (default: 1)",
          "Directory structure requirements"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "if project exists",
          "proper structure for future operations"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "both series and standalone formats appropriately.",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Create Root Structure",
          "2: Initialize Project Metadata",
          "3: Register Project in System",
          "4: Initialize Context Files",
          "5: Set Current Project",
          "6: Generate Initialization Report",
          "1: Read existing: `.claude/data/projects/project_list.json`",
          "2: Add new project:",
          "3: Write back to registry",
          "1: Create Bible: /novel:bible-create",
          "2: Start brainstorming: Continue with series-brainstormer",
          "3: View project: /novel:status"
        ],
        "decision_points": [
          "if project exists"
        ],
        "validation_logic": [
          "proper structure for future operations. Handle both series and standalone formats appropriately.",
          "if project exists"
        ],
        "business_rules": [
          "Project name (validated and unique)",
          "Project type (series/standalone/trilogy)",
          "Initial book count (default: 1)",
          "Directory structure requirements",
          "All directories created successfully",
          "All initial files written",
          "Project registered in system",
          "Current project pointer updated",
          "Clear next steps provided"
        ],
        "success_criteria": [
          "- All directories created successfully"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 634,
      "line_count": 239
    },
    "project-stats-updater": {
      "file": ".claude\\agents\\project-stats-updater.md",
      "name": "project-stats-updater",
      "type": "agent",
      "lines": 251,
      "description": "Aggregates and updates project-wide statistics",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "project.json",
          "{project}/book_*/",
          "{project}/book_{N}/chapters/ch*/",
          "{project}/{chapter['path']}/meta.json",
          "{project}/project.json",
          "{project}/project.json",
          "{completed}/{total}",
          "{completed}/{total}"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "project structure:**",
          "if completed (quality >= 95)",
          "Prerequisites"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "\"Project directory not found\"",
          "# Chapter exists but no meta yet (not completed)",
          "Handling",
          "missing data gracefully**: Not all chapters have meta.json",
          "missing/incomplete chapters"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Discover All Books and Chapters",
          "3: Aggregate Statistics",
          "4: Create Project Statistics Structure",
          "5: Save Project Statistics",
          "4: - Format with 2-space indentation"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "quality_score >= 95",
          "missing, ERROR",
          "if completed (quality >= 95)",
          "meta['quality_score'] >= 95"
        ],
        "validation_logic": [
          "Prerequisites",
          "project structure:**",
          "if completed (quality >= 95)",
          "if project.json exists:**"
        ],
        "business_rules": [
          "continuity_framework: consistency metrics and validation requirements",
          "Accurate word count aggregation",
          "Correct chapter counting",
          "Proper quality averaging (only from completed)",
          "Handle missing/incomplete chapters",
          "Fast execution even with many chapters"
        ],
        "success_criteria": [
          "- Accurate word count aggregation"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 791,
      "line_count": 251
    },
    "prose-craft-specialist": {
      "file": ".claude\\agents\\prose-craft-specialist.md",
      "name": "prose-craft-specialist",
      "type": "agent",
      "lines": 190,
      "description": "Manages literary expression and rhetorical techniques",
      "thinking": "Manage literary expression and rhetorical techniques expertly - apply dramatic sentence length variation (5-45 words), break repetitive paragraph structures, ensure voice consistency throughout narrative, control pacing rhythms for optimal reading experience, use precise vocabulary and vivid sensory details, implement effective metaphors and imagery patterns, create irregular rhythm patterns to avoid AI detection, balance complexity with accessibility, and polish prose to 91%+ quality while maintaining author voice recognition. Focus on reading experience optimization over technical perfection.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 160,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 160"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v05_emotions_woven.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v06_prose_polished.md"
        ],
        "temp_files": [
          "path.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Maintain original plot, dialogue, and word count (±5% tolerance)\n   - Focus on prose quality improvements\n   - **Document rhythm changes made**\n   - Confirm: \"[x] Prose-polished version saved atomically to v06_prose_polished.md\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "file has content (>1000 characters)",
          "smooth reading progression",
          "vary between 5-45 words",
          "author voice recognition",
          "file exists",
          "vary between 1-15 sentences",
          "vocabulary diversity",
          "DIRECTLY edit the content and save it",
          "actively modify the content:",
          "voice consistency throughout narrative, control pacing rhythms for optimal reading experience, use precise vocabulary and vivid sensory details, implement effective metaphors and imagery patterns, create irregular rhythm patterns to avoid AI detection, balance complexity with accessibility, and polish prose to 91%+ quality while maintaining author voice recognition"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [
          "significant"
        ],
        "error_handling": [
          "\"v05_emotions_woven.md not found or empty - emotion enhancement step failed\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "7: for prose enhancement",
          "1: ANTI-AI RHYTHM RULES (CRITICAL):",
          "1: Writing Style Management",
          "2: Rhetorical Technique Optimization",
          "3: Reading Experience Optimization",
          "1: Reads the current draft",
          "2: Analyzes prose quality",
          "3: Applies enhancements",
          "4: Saves improved version",
          "5: Reports quality metrics"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "Enhancing Prose",
          "file has content (>1000 characters)",
          "file missing or empty",
          "too uniform)"
        ],
        "validation_logic": [
          "voice consistency throughout narrative, control pacing rhythms for optimal reading experience, use precise vocabulary and vivid sensory details, implement effective metaphors and imagery patterns, create irregular rhythm patterns to avoid AI detection, balance complexity with accessibility, and polish prose to 91%+ quality while maintaining author voice recognition. Focus on reading experience optimization over technical perfection.",
          "author voice recognition",
          "smooth reading progression",
          "file exists",
          "file has content (>1000 characters)"
        ],
        "business_rules": [
          "*",
          "*Character Voice*: Distinguish individual speaking patterns",
          "*Narrative Consistency*: Maintain POV and tense consistency",
          "*Genre Adherence*: Follow established genre conventions"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1059,
      "line_count": 190
    },
    "quality-gate-validator": {
      "file": ".claude\\agents\\quality-gate-validator.md",
      "name": "quality-gate-validator",
      "type": "agent",
      "lines": 256,
      "description": "Validates chapter quality scores and determines sync eligibility for learning",
      "thinking": "Systematically scan all chapter quality reports to determine learning eligibility - identify chapters meeting the 95+ threshold, detect any blocking low-quality chapters below 90, validate Bible compliance and entity consistency, and make go/no-go decision for context synchronization. This is the quality gatekeeper for system learning.",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 204,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 204"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project_root}/book_{N}/chapters/ch*/quality_report.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "report"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "the system's learned patterns and knowledge come only from the best content, preventing degradation over time",
          "Bible compliance and entity consistency, and make go/no-go decision for context synchronization",
          "which chapters are eligible for context learning based on strict quality criteria"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Locate All Quality Reports",
          "2: Extract Quality Scores",
          "3: Categorize Chapters",
          "4: Apply Gate Logic",
          "5: Generate Validation Report",
          "6: Return Decision Summary",
          "1: Run: /novel:smart-fix 8",
          "2: Achieve 90+ score",
          "3: Retry sync",
          "1: Generate more chapters: /novel:next-chapter",
          "2: Fix existing chapters: /novel:smart-fix",
          "3: Retry when 3+ chapters reach 95+"
        ],
        "decision_points": [
          "learning eligibility - identify chapters meeting the 95+ threshold, detect any blocking low-quality chapters below 90, validate Bible compliance and entity consistency, and make go/no-go decision for context synchronization. This is the quality gatekeeper for system learning.",
          "[ -f \"$report\" ];",
          "(score >= 95 && bible_compliance == 100 && critical_issues == 0)",
          "(score >= 90)",
          "(score >= 85)"
        ],
        "validation_logic": [
          "Bible compliance and entity consistency, and make go/no-go decision for context synchronization. This is the quality gatekeeper for system learning.",
          "which chapters are eligible for context learning based on strict quality criteria.",
          "first",
          "the system's learned patterns and knowledge come only from the best content, preventing degradation over time."
        ],
        "business_rules": [
          "All quality reports scanned",
          "Clear gate decision made",
          "Blocking issues identified",
          "Actionable recommendations provided",
          "Fast execution (< 5 seconds for 50 chapters)"
        ],
        "success_criteria": [
          "- All quality reports scanned"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 868,
      "line_count": 256
    },
    "quality-report-generator": {
      "file": ".claude\\agents\\quality-report-generator.md",
      "name": "quality-report-generator",
      "type": "agent",
      "lines": 212,
      "description": "Generates comprehensive quality reports with actionable insights and visualizations",
      "thinking": "Aggregate multiple validation reports into unified quality assessment - compile scores from all validators, create visual representations of quality dimensions, prioritize improvement recommendations, and format everything into clear actionable report. Focus on actionability and clarity.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 67,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 67"
        },
        {
          "type": "unicode_character",
          "line": 68,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 68"
        },
        {
          "type": "unicode_character",
          "line": 69,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 69"
        },
        {
          "type": "unicode_character",
          "line": 70,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 70"
        },
        {
          "type": "unicode_character",
          "line": 71,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 71"
        },
        {
          "type": "unicode_character",
          "line": 72,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 72"
        },
        {
          "type": "unicode_character",
          "line": 75,
          "char": "█",
          "ord": 9608,
          "message": "Unicode character '█' found at line 75"
        },
        {
          "type": "unicode_character",
          "line": 154,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 154"
        },
        {
          "type": "unicode_character",
          "line": 155,
          "char": "️",
          "ord": 65039,
          "message": "Unicode character '️' found at line 155"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/quality_assessment.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "Fix for 95+)"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [
          "Minor",
          "Work"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Aggregate Validation Results",
          "2: Generate Quality Visualization",
          "3: Prioritize Issues",
          "4: Generate Actionable Recommendations",
          "5: Create Final Report",
          "2: - Continuity validation results",
          "2: validators + Phase 3 quality-scorer",
          "1: Fix timeline inconsistency in scene 3",
          "2: Adjust Sarah's dialogue patterns (3 instances)",
          "3: Add sensory details to bakery scene",
          "1: Run dialogue-character-specialist on scenes 1 & 4",
          "2: Enhance emotional beats in climax scene",
          "3: Strengthen foreshadowing in opening"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [
          "Clear, actionable report generated",
          "All validator results integrated",
          "Prioritized improvement list provided",
          "Visual representation included",
          "Next steps clearly defined"
        ],
        "success_criteria": [
          "- Clear, actionable report generated"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 739,
      "line_count": 212
    },
    "quality-scorer": {
      "file": ".claude\\agents\\quality-scorer.md",
      "name": "quality-scorer",
      "type": "agent",
      "lines": 334,
      "description": "Genre-aware quality scoring with variation tolerance",
      "thinking": "Perform genre-aware quality scoring with variation tolerance - apply genre-specific rubrics for evaluation, recognize and reward natural language variations, check language variant consistency, validate against entity dictionary, mark high-quality chapters for learning, calculate multi-dimensional scores, award bonuses for excellence, and balance technical precision with artistic expression. Focus on contextual excellence rather than rigid standards.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/shared/entity_dictionary.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "consistency with Bible's language_variant setting",
          "facts (entity-dict aware)",
          "consistency (genre-aware)",
          "Language Variant Consistency**",
          "arc structure",
          "story elements",
          "Each Reference**",
          "Variation Quality**",
          "language variant consistency, validate against entity dictionary, mark high-quality chapters for learning, calculate multi-dimensional scores, award bonuses for excellence, and balance technical precision with artistic expression"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "improvement"
        ],
        "error_handling": [
          "->  -10 points"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Genre-Specific Rubrics (NEW)",
          "2: Variation Tolerance Scoring (NEW)",
          "3: Multi-dimensional Quality Assessment (Enhanced)",
          "4: Learning Qualification System (NEW)",
          "5: Intelligent Consistency Scoring"
        ],
        "decision_points": [
          "language variant consistency, validate against entity dictionary, mark high-quality chapters for learning, calculate multi-dimensional scores, award bonuses for excellence, and balance technical precision with artistic expression. Focus on contextual excellence rather than rigid standards.",
          "reading Bible, concentrate on",
          "performing quality assessment",
          "arc structure",
          "facts (entity-dict aware)"
        ],
        "validation_logic": [
          "language variant consistency, validate against entity dictionary, mark high-quality chapters for learning, calculate multi-dimensional scores, award bonuses for excellence, and balance technical precision with artistic expression. Focus on contextual excellence rather than rigid standards.",
          "arc structure",
          "consistency (genre-aware)",
          "facts (entity-dict aware)",
          "Variation Quality**"
        ],
        "business_rules": [
          "language_variant: chosen English variant (UK/US/International)",
          "spelling_rules: variant-specific spelling conventions",
          "vocabulary_preferences: preferred terminology for variant",
          "*Positive indicators (bonus points):**",
          "natural_reference_evolution: +2 points",
          "dialogue_variety: +3 points",
          "avoiding_repetition: +2 points",
          "context_appropriate_language: +3 points",
          "consistent_variant_usage: +5 points (UK/US/International consistency)",
          "*What NOT to penalize:**",
          "approved_entity_variations (Casa Vista vs Casa Vista Verde)",
          "natural_progression (Mrs. Mitchell -> Sarah)",
          "perspective_based_references (home vs the inn)",
          "genre_appropriate_informality",
          "regional_spelling_consistency (colour/color based on variant)",
          "*What TO penalize:**",
          "critical_fact_errors (25 years vs 30 years)",
          "character_name_confusion (Wrong names)",
          "timeline_inconsistencies",
          "world_rule_violations",
          "language_variant_mixing (Using both \"colour\" and \"color\")",
          "vocabulary_inconsistency (Mixing \"flat\" and \"apartment\" incorrectly)",
          "*Threshold:** 95 (minimum score to qualify)",
          "*Requirements:**",
          "overall_score: >= 95",
          "bible_compliance: 100% (No Bible violations)",
          "critical_errors: 0 (No factual errors)",
          "genre_compliance: >= 90% (Strong genre adherence)",
          "*Benefits when qualified:**",
          "patterns_extracted_for_learning",
          "entity_variations_captured",
          "character_development_tracked",
          "world_details_accumulated",
          "*Tracking mechanisms:**",
          "mark_in_report: \"[Star] Learning Qualified\"",
          "add_to_metadata: learning_eligible: true",
          "trigger_suggestion: \"Ready for context-sync\"",
          "Note readiness for context-sync",
          "Note bonus/penalty criteria"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1311,
      "line_count": 334
    },
    "report-deduplication-specialist": {
      "file": ".claude\\agents\\report-deduplication-specialist.md",
      "name": "report-deduplication-specialist",
      "type": "agent",
      "lines": 163,
      "description": "Deduplicates and merges overlapping analysis reports (v4.0)",
      "thinking": "Deduplicate and merge overlapping analysis reports systematically - build deduplication map using fingerprint matching for duplicate patterns, consolidate numerical statistics using MAX values to avoid double-counting, resolve confidence conflicts through weighted averaging based on source authority, prioritize recommendations by consensus level and occurrence count, generate clean consolidated report eliminating redundant findings while preserving critical information, and maintain deduplication metrics for transparency. Focus on semantic similarity over exact matching.",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "parallel"
        ],
        "dependencies": [],
        "error_handling": [
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Load All Reports",
          "2: Identify Duplicate Findings",
          "3: Merge Statistics",
          "4: Resolve Confidence Conflicts",
          "5: Prioritize Recommendations",
          "6: Generate Deduplicated Report",
          "1: Foundation (6 reports)",
          "2: Flow (2 reports)",
          "3: Safety (3 reports)",
          "4: Compliance (3 reports)",
          "5: Final (2 reports)",
          "1: Note missing reports",
          "2: Continue with available data",
          "3: Adjust confidence accordingly",
          "4: Flag gaps in coverage"
        ],
        "decision_points": [
          "no valid weights available",
          "reports missing or malformed"
        ],
        "validation_logic": [],
        "business_rules": [
          "- Sort by priority level (CRITICAL > HIGH > MEDIUM > LOW)",
          "Secondary sort by source count (consensus level)",
          "Higher consensus increases recommendation authority",
          "Final list ordered by actionability and agreement",
          "All duplicate findings identified and merged",
          "Statistics properly consolidated (no double-counting)",
          "Confidence scores intelligently resolved",
          "Recommendations prioritized by consensus",
          "Clean, actionable output produced"
        ],
        "success_criteria": [
          "- All duplicate findings identified and merged"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 796,
      "line_count": 163
    },
    "romance-specialist": {
      "file": ".claude\\agents\\romance-specialist.md",
      "name": "romance-specialist",
      "type": "agent",
      "lines": 335,
      "description": "Enhances drafts with authentic romance genre elements",
      "thinking": "Enhance drafts with authentic romance elements - verify genre match before processing, build chemistry through subtle physical awareness and emotional connection, create romantic tension through restraint and anticipation, show character growth through love authentically, maintain individual character agency and goals, respect consent and healthy dynamics, and avoid romance cliches. Focus on emotional intimacy over superficial attraction.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 327,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 327"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md"
        ],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "- NOT: \"They were perfect together\"\n- USE: \"She organized her spices alphabetically. He kept his coffee mugs wherever they landed. Somehow this felt like the beginning of everything.\"",
          "1: Chemistry Through Small Details\n**Before**: \"She was attracted to him.\"",
          "2: Emotional Connection Through Understanding\n**Before**: \"They understood each other perfectly.\"",
          "3: Romantic Tension Through Restraint\n**Before**: \"The sexual tension was obvious.\"",
          "4: Growth Through Love\n**Before**: \"Love made him want to be better.\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "genre match before processing, build chemistry through subtle physical awareness and emotional connection, create romantic tension through restraint and anticipation, show character growth through love authentically, maintain individual character agency and goals, respect consent and healthy dynamics, and avoid romance cliches",
          "genre contains \"romance\" or romantic subplot",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: VERIFICATION",
          "2: ROMANCE ENHANCEMENT",
          "3: PRESERVE ROMANCE AUTHENTICITY",
          "4: NATURAL ROMANCE INTEGRATION",
          "5: APPLY ALL ROMANCE ENHANCEMENTS",
          "6: SAVE ROMANCE-ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "NO romance elements indicated, SKIP processing and return unchanged",
          "she saw him\"",
          "his voice came from behind her.\"",
          "thunder crashed, they both jumped."
        ],
        "validation_logic": [
          "genre match before processing, build chemistry through subtle physical awareness and emotional connection, create romantic tension through restraint and anticipation, show character growth through love authentically, maintain individual character agency and goals, respect consent and healthy dynamics, and avoid romance cliches. Focus on emotional intimacy over superficial attraction.",
          "genre contains \"romance\" or romantic subplot"
        ],
        "business_rules": [
          "Respect and consent",
          "Individual character goals",
          "Communication development",
          "Realistic relationship progression",
          "Vulnerability and trust building",
          "Moments of pure joy/contentment",
          "Fear/anxiety about loss",
          "Growth through supporting each other",
          "40% emotional development and connection",
          "30% relationship tension and chemistry",
          "20% individual character growth",
          "10% external obstacles/challenges"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1628,
      "line_count": 335
    },
    "scene-generator": {
      "file": ".claude\\agents\\scene-generator.md",
      "name": "scene-generator",
      "type": "agent",
      "lines": 150,
      "description": "Chapter draft writer that generates complete chapter narratives",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 140,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 140"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/shared/entity_dictionary.yaml",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v01_initial_draft.md"
        ],
        "temp_files": [
          "{provided_path}.tmp",
          "{output_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "implementation**:\n```\nWrite(file_path=f\"{output_path}.tmp\", content=your_complete_chapter)\nBash(command=f'mv \"{output_path}.tmp\" \"{output_path}\"')\n```"
        ],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY write the chapter content and save it",
          "be in English",
          "read these files:",
          "be in ENGLISH**:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "\"No outline found\"",
          "CONDITIONS"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: WRITE THE CHAPTER",
          "3: SAVE THE DRAFT (ATOMIC)"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "missing, STOP with error",
          "operation fails mid-write"
        ],
        "validation_logic": [],
        "business_rules": [
          "*ALL content MUST be in ENGLISH**:",
          "Character names and dialogue must be in English",
          "Location descriptions must be in English",
          "NO Chinese characters, pinyin, or non-English content allowed",
          "Follow the language variant specified in Bible (US/UK/International English)",
          "themes: central themes that need expression in this chapter",
          "Used Read tool at least 3 times",
          "Generated narrative matching word_target from outline (±5%)",
          "Used Write tool exactly once",
          "File exists after completion"
        ],
        "success_criteria": [
          "- Used Read tool at least 3 times"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 781,
      "line_count": 149
    },
    "series-bible-architect": {
      "file": ".claude\\agents\\series-bible-architect.md",
      "name": "series-bible-architect",
      "type": "agent",
      "lines": 287,
      "description": "Creates and extends series planning incrementally",
      "thinking": "Design comprehensive series-level planning with architectural expertise - detect operation mode for initial creation versus extension, create extensible framework spanning multiple books, manage character evolution trajectories across series, schedule revelation timing and plot thread management, design market-responsive modular structure with satisfying conclusion points, maintain strict consistency with existing content during extensions, extract author voice signature from brainstorming for series-wide standards, and ensure long-term vision considers multi-book reader engagement patterns. Focus on series sustainability over individual book optimization.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/series_bible.yaml",
          "{project}/project.json",
          "{project}/brainstorming_results.yaml",
          "{project}/series_bible.yaml",
          "{project}/project.json",
          "{project}/project.json",
          "{project}/series_bible.yaml",
          "{project}/series_bible.yaml",
          "{project}/series_bible.yaml"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "series follows genre expectations",
          "for existing Series Bible:**",
          "long-term vision considers multi-book reader engagement patterns",
          "DIRECTLY create the series Bible YAML and save it",
          "Series Bible",
          "no painted-into-corner situations",
          "proper mystery/revelation pacing",
          "no contradictions within the bible",
          "structure supports future growth",
          "character arcs are logical"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Detect Operation Mode",
          "2: Execute Based on Mode",
          "3: Generate Series Bible Content",
          "4: Validate Series Bible",
          "1: planning section",
          "1: Planning (or Extension Phase)"
        ],
        "decision_points": [
          "reading existing Series Bible, concentrate on",
          "designing series components, think about the long-term vision spanning multiple books. Consider",
          "for existing Series Bible",
          "file not found",
          "file exists"
        ],
        "validation_logic": [
          "long-term vision considers multi-book reader engagement patterns. Focus on series sustainability over individual book optimization.",
          "for existing Series Bible:**",
          "integration",
          "#### 3.4 Author Voice Signature (Series-Level Standard)",
          "Series Bible"
        ],
        "business_rules": [
          "author_voice_signature: established voice patterns and language standards",
          "characters: series-wide character development trajectories and relationships",
          "universe: world consistency rules and series-wide setting elements",
          "themes: overarching thematic content spanning multiple books",
          "Confirm: \"[x] Extension context loaded\"",
          "*",
          "character_knowledge: Track what each character knows",
          "timeline_management: Maintain chronological order",
          "world_rules: No contradictions allowed",
          "Used Read tool to understand context and current state",
          "Generated appropriate series bible structure (initial or extension)",
          "Used Write tool to save series bible",
          "Updated project metadata appropriately",
          "Maintained consistency with existing content (for extensions)",
          "Created extensible framework for future growth"
        ],
        "success_criteria": [
          "- Used Read tool to understand context and current state"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1435,
      "line_count": 287
    },
    "series-bible-reviewer": {
      "file": ".claude\\agents\\series-bible-reviewer.md",
      "name": "series-bible-reviewer",
      "type": "agent",
      "lines": 296,
      "description": "Reviews series bible quality and coherence",
      "thinking": "Review series bible quality comprehensively using multi-book specific criteria - analyze series coherence across planned books, evaluate character development sustainability and relationship evolution, assess plot thread management and revelation timing, verify reader experience design and engagement sustainability, check market viability and commercial structure, ensure technical excellence and extensibility framework, generate actionable improvement recommendations prioritized by impact, and provide specific scores with concrete solutions. Focus on series-wide success rather than individual book quality.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/project.json",
          "{project}/brainstorming_results.yaml",
          "{project}/series_reviews/series_review_v{N}.json",
          "{score}/100",
          "{score}/100"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "character arc continuity from previous phase",
          "plot threads connect logically",
          "be maintained in revisions",
          "Fix - Score < 60)",
          "reader experience design and engagement sustainability, check market viability and commercial structure, ensure technical excellence and extensibility framework, generate actionable improvement recommendations prioritized by impact, and provide specific scores with concrete solutions",
          "no conflicts with existing phases",
          "Fix - Score 60-79)",
          "compatibility with existing series elements"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Determine Review Scope and Context",
          "2: Execute Targeted Review",
          "3: Calculate Overall Score",
          "4: Generate Comprehensive Review Report",
          "5: Save Review Report"
        ],
        "decision_points": [
          "market viability and commercial structure, ensure technical excellence and extensibility framework, generate actionable improvement recommendations prioritized by impact, and provide specific scores with concrete solutions. Focus on series-wide success rather than individual book quality.",
          "reading Series Bible for review, concentrate on",
          "reviewing a series bible, thoroughly analyze multi-book coherence, long-term sustainability, and extensibility. Think about",
          "evaluating incremental additions)",
          "Review Scope and Context"
        ],
        "validation_logic": [
          "reader experience design and engagement sustainability, check market viability and commercial structure, ensure technical excellence and extensibility framework, generate actionable improvement recommendations prioritized by impact, and provide specific scores with concrete solutions. Focus on series-wide success rather than individual book quality.",
          "no conflicts with existing phases",
          "compatibility with existing series elements",
          "character arc continuity from previous phase",
          "plot threads connect logically"
        ],
        "business_rules": [
          "analyze series coherence across planned books, evaluate character development sustainability and relationship evolution, assess plot thread management and revelation timing, verify reader experience design and engagement sustainability, check market viability and commercial structure, ensure technical excellence and extensibility framework, generate actionable improvement recommendations prioritized by impact, and provide specific scores with concrete solutions. Focus on series-wide success rather than individual book quality.",
          "--",
          "*",
          "World expansion feels natural and planned",
          "No contradictions between book environments",
          "Verify no conflicts with existing phases",
          "Used Read tool to load series bible and context",
          "Determined appropriate review scope",
          "Applied series-specific quality criteria",
          "Generated specific, actionable improvement recommendations",
          "Saved comprehensive review using Write tool",
          "Provided clear guidance on readiness for next phase"
        ],
        "success_criteria": [
          "- Used Read tool to load series bible and context"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1582,
      "line_count": 296
    },
    "series-brainstormer": {
      "file": ".claude\\agents\\series-brainstormer.md",
      "name": "series-brainstormer",
      "type": "agent",
      "lines": 265,
      "description": "Guides comprehensive interactive brainstorming for novel series planning",
      "thinking": "Guide user through systematic creative exploration - facilitate brainstorming across multiple dimensions including genre, characters, world, plot, and series architecture. Ask thoughtful questions, offer creative suggestions, help crystallize ideas, and document all decisions for Bible generation. Balance creativity with practical storytelling considerations.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [
          "name: character_name"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Series Format & Structure",
          "2: Genre & Market Positioning",
          "3: Character Architecture",
          "4: World Building",
          "5: Plot & Series Planning",
          "6: Voice & Style",
          "1: SERIES FORMAT:",
          "2: READING EXPERIENCE:",
          "3: SERIES ARC:",
          "1: PRIMARY GENRE:",
          "2: GENRE BLENDING:",
          "3: TARGET AUDIENCE:",
          "4: UNIQUE SELLING PROPOSITION:",
          "1: PROTAGONIST:",
          "2: SUPPORTING CAST:",
          "3: ANTAGONISTS:",
          "4: CHARACTER DYNAMICS:",
          "1: SETTING:",
          "2: ATMOSPHERE:",
          "3: WORLD RULES:",
          "4: CULTURAL ELEMENTS:",
          "1: BOOK 1 SETUP:",
          "2: SERIES PROGRESSION:",
          "3: MYSTERY/CONFLICT STRUCTURE:",
          "4: THEMES:",
          "1: NARRATIVE VOICE:",
          "2: LANGUAGE STYLE:",
          "3: PACING:"
        ],
        "decision_points": [],
        "validation_logic": [],
        "business_rules": [
          "Any special rules? (Magic systems, technology, social structures?)",
          "What are the limitations and consequences?",
          "How do these rules affect the plot?",
          "All 6 phases explored thoroughly",
          "User feels excited and clear about their series",
          "Comprehensive documentation captured",
          "Ready for Bible generation",
          "Creative vision crystallized"
        ],
        "success_criteria": [
          "- All 6 phases explored thoroughly"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1010,
      "line_count": 265
    },
    "series-progress-updater": {
      "file": ".claude\\agents\\series-progress-updater.md",
      "name": "series-progress-updater",
      "type": "agent",
      "lines": 296,
      "description": "Updates series-level progress tracking and cumulative statistics",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/series_bible.yaml",
          "{project}/project.json",
          "{project}/book_*/",
          "{book_dir}/completed.json",
          "{project}/book_{current}/statistics.json",
          "{project}/book_{current}/chapters/ch{last}/chapter.md",
          "{project}/book_{current}/plot_threads.json",
          "{project}/series_progress.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "if book is complete"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "to"
        ],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Load Series Context",
          "2: Calculate Cumulative Statistics",
          "3: Update Continuity Bridge",
          "4: Prepare Next Book Foundation",
          "1: Series Progress Tracking",
          "2: Cross-Book Continuity Management",
          "3: Next Book Preparation"
        ],
        "decision_points": [
          "series began\"",
          "Updating Series Progress",
          "if book is complete",
          "file_exists(completion_marker)",
          "t['status'] == 'resolved'],"
        ],
        "validation_logic": [
          "if book is complete"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 825,
      "line_count": 296
    },
    "status-report-generator": {
      "file": ".claude\\agents\\status-report-generator.md",
      "name": "status-report-generator",
      "type": "agent",
      "lines": 322,
      "description": "Generates comprehensive project status reports with bilingual formatting and intelligent recommendations",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Glob"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 4,
          "char": "🚨",
          "ord": 128680,
          "message": "Unicode character '🚨' found at line 4"
        },
        {
          "type": "unicode_character",
          "line": 9,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 9"
        },
        {
          "type": "unicode_character",
          "line": 30,
          "char": "📋",
          "ord": 128203,
          "message": "Unicode character '📋' found at line 30"
        },
        {
          "type": "unicode_character",
          "line": 139,
          "char": "╔",
          "ord": 9556,
          "message": "Unicode character '╔' found at line 139"
        },
        {
          "type": "unicode_character",
          "line": 140,
          "char": "║",
          "ord": 9553,
          "message": "Unicode character '║' found at line 140"
        },
        {
          "type": "unicode_character",
          "line": 141,
          "char": "║",
          "ord": 9553,
          "message": "Unicode character '║' found at line 141"
        },
        {
          "type": "unicode_character",
          "line": 142,
          "char": "╚",
          "ord": 9562,
          "message": "Unicode character '╚' found at line 142"
        },
        {
          "type": "unicode_character",
          "line": 144,
          "char": "📖",
          "ord": 128214,
          "message": "Unicode character '📖' found at line 144"
        },
        {
          "type": "unicode_character",
          "line": 145,
          "char": "📚",
          "ord": 128218,
          "message": "Unicode character '📚' found at line 145"
        },
        {
          "type": "unicode_character",
          "line": 146,
          "char": "📅",
          "ord": 128197,
          "message": "Unicode character '📅' found at line 146"
        },
        {
          "type": "unicode_character",
          "line": 147,
          "char": "⏱",
          "ord": 9201,
          "message": "Unicode character '⏱' found at line 147"
        },
        {
          "type": "unicode_character",
          "line": 152,
          "char": "进",
          "ord": 36827,
          "message": "Unicode character '进' found at line 152"
        },
        {
          "type": "unicode_character",
          "line": 153,
          "char": "─",
          "ord": 9472,
          "message": "Unicode character '─' found at line 153"
        },
        {
          "type": "unicode_character",
          "line": 154,
          "char": "章",
          "ord": 31456,
          "message": "Unicode character '章' found at line 154"
        },
        {
          "type": "unicode_character",
          "line": 155,
          "char": "章",
          "ord": 31456,
          "message": "Unicode character '章' found at line 155"
        },
        {
          "type": "unicode_character",
          "line": 157,
          "char": "字",
          "ord": 23383,
          "message": "Unicode character '字' found at line 157"
        },
        {
          "type": "unicode_character",
          "line": 158,
          "char": "平",
          "ord": 24179,
          "message": "Unicode character '平' found at line 158"
        },
        {
          "type": "unicode_character",
          "line": 160,
          "char": "当",
          "ord": 24403,
          "message": "Unicode character '当' found at line 160"
        },
        {
          "type": "unicode_character",
          "line": 161,
          "char": "状",
          "ord": 29366,
          "message": "Unicode character '状' found at line 161"
        },
        {
          "type": "unicode_character",
          "line": 166,
          "char": "质",
          "ord": 36136,
          "message": "Unicode character '质' found at line 166"
        },
        {
          "type": "unicode_character",
          "line": 167,
          "char": "─",
          "ord": 9472,
          "message": "Unicode character '─' found at line 167"
        },
        {
          "type": "unicode_character",
          "line": 168,
          "char": "平",
          "ord": 24179,
          "message": "Unicode character '平' found at line 168"
        },
        {
          "type": "unicode_character",
          "line": 169,
          "char": "一",
          "ord": 19968,
          "message": "Unicode character '一' found at line 169"
        },
        {
          "type": "unicode_character",
          "line": 170,
          "char": "上",
          "ord": 19978,
          "message": "Unicode character '上' found at line 170"
        },
        {
          "type": "unicode_character",
          "line": 184,
          "char": "💡",
          "ord": 128161,
          "message": "Unicode character '💡' found at line 184"
        },
        {
          "type": "unicode_character",
          "line": 185,
          "char": "写",
          "ord": 20889,
          "message": "Unicode character '写' found at line 185"
        },
        {
          "type": "unicode_character",
          "line": 186,
          "char": "质",
          "ord": 36136,
          "message": "Unicode character '质' found at line 186"
        },
        {
          "type": "unicode_character",
          "line": 187,
          "char": "查",
          "ord": 26597,
          "message": "Unicode character '查' found at line 187"
        },
        {
          "type": "unicode_character",
          "line": 188,
          "char": "智",
          "ord": 26234,
          "message": "Unicode character '智' found at line 188"
        },
        {
          "type": "unicode_character",
          "line": 282,
          "char": "🎯",
          "ord": 127919,
          "message": "Unicode character '🎯' found at line 282"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{completed_chapters}/{total_chapters}",
          "{average_score}/100",
          "{consistency_score}/100"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "and smart-fix",
          "project exists",
          "for latest chapters\", \"Update context files\"],",
          "for data validation\"",
          "data sources",
          "Operation Mode**:",
          "Quality assessment / 质量检查",
          "/ 上次检查: {last_quality_check}",
          "Data Availability**:"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "Return clear error with recovery commands",
          "with supported modes",
          "Handling & Resilience",
          "Scenarios",
          "handling** (always provide graceful degradation)"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Input Processing",
          "2: Operation Execution",
          "3: Output Generation"
        ],
        "decision_points": [
          "progress < 10%",
          "quality < 90",
          "and smart-fix",
          "no recent activity",
          "near completion"
        ],
        "validation_logic": [
          "project exists",
          "Operation Mode**:",
          "data sources",
          "Data Availability**:",
          "Existence:"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1208,
      "line_count": 322
    },
    "story-thread-tracker": {
      "file": ".claude\\agents\\story-thread-tracker.md",
      "name": "story-thread-tracker",
      "type": "agent",
      "lines": 190,
      "description": "Tracks plot threads across chapters",
      "thinking": "Track story threads comprehensively - monitor all narrative threads across chapters, detect abandoned or rushed plot lines, analyze character arc progression and completion, validate thematic development consistency, identify unresolved mysteries, track relationship dynamics evolution, ensure proper pacing of thread resolution, and verify story cohesion. Focus on maintaining narrative continuity and satisfying thread closure.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "Database"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "* name: \"Missing Hiker Mystery\"\n  * type: \"main_plot\"\n  * introduced: \"ch001\"\n  * developed: [\"ch002\", \"ch004\", \"ch007\"]\n  * status: \"active\"\n  * complexity: \"high\"\n  * dependencies: [\"thread_003\", \"thread_005\"]",
          "* character: \"Sarah Chen\"\n  * arc_type: \"redemption\"\n  * start_state: \"guilt-ridden ex-detective\"\n  * current_state: \"finding purpose\"\n  * milestones:\n    - ch001: \"arrives on island\"\n    - ch003: \"first investigation\"\n    - ch007: \"breakthrough\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "pacing appropriateness",
          "all threads have purpose",
          "thematic development consistency, identify unresolved mysteries, track relationship dynamics evolution, ensure proper pacing of thread resolution, and verify story cohesion",
          "major threads get resolution"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Plot Thread Management",
          "2: Character Arc Tracking",
          "3: Theme Development Monitoring"
        ],
        "decision_points": [
          "Tracking Story Threads",
          "pacing appropriateness"
        ],
        "validation_logic": [
          "thematic development consistency, identify unresolved mysteries, track relationship dynamics evolution, ensure proper pacing of thread resolution, and verify story cohesion. Focus on maintaining narrative continuity and satisfying thread closure.",
          "pacing appropriateness",
          "all threads have purpose",
          "major threads get resolution"
        ],
        "business_rules": [
          "*",
          "logical_progression: Character changes follow believable path",
          "motivation_consistency: Actions align with established goals",
          "growth_evidence: Clear demonstration of character development",
          "arc_resolution: Character journey reaches satisfying conclusion",
          "thematic_alignment: Character growth supports story themes"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 799,
      "line_count": 190
    },
    "system-analyzer": {
      "file": ".claude\\agents\\system-analyzer.md",
      "name": "system-analyzer",
      "type": "agent",
      "lines": 302,
      "description": "Analyzes scan results to identify relationships, patterns, and compliance violations",
      "thinking": "Read scan results JSON, build complete relationship graph from command to agent calls, identify orphan and missing components, check all CLAUDE.md compliance rules, calculate health scores, and output comprehensive analysis for reporting",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{report_directory}/system_scan.json",
          "{report_directory}/{output_name}",
          "{report_directory}/system_scan.json",
          "{report_directory}/{output_name"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "**From Main Claude**:",
          "**NEW FORMAT**: Directory path + scan type (e.g., \"report_directory: .claude/report/xxx, scan_type: system\")",
          "**AGENT CONSTRUCTS**: Full file paths internally to avoid trigger words",
          "**DO NOT**: Pass file contents in prompt (will exceed token limits)",
          "**AGENT RESPONSIBILITY**: Read file using chunked approach internally",
          "Large files (1MB+) require chunked reading with Read tool"
        ],
        "output_format": [
          "**Returns to Main Claude**: Analysis summary with health score",
          "**File Output**: Comprehensive JSON with relationships, violations, and metrics"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "for a file with 25000 lines:\n   chunk_size = 2000  # Read 2000 lines at a time"
        ],
        "json_schemas": [
          {
            "command_name": {
              "file": "path/to/command.md",
              "calls": [
                {
                  "name": "coordinator-1",
                  "type": "coordinator"
                },
                {
                  "name": "agent-2",
                  "type": "agent"
                }
              ]
            }
          },
          {
            "files": {
              "path/to/file.json": {
                "readers": [
                  "agent-1",
                  "agent-2"
                ],
                "writers": [
                  "agent-3"
                ],
                "flow": "agent-3 -> file -> agent-1,agent-2"
              }
            }
          }
        ],
        "validation_rules": [
          "compliance with CLAUDE",
          "if any agent references create cycles",
          "all standards from CLAUDE",
          "be used directly"
        ]
      },
      "execution": {
        "patterns": [
          "serial"
        ],
        "dependencies": [
          "fixing"
        ],
        "error_handling": [
          "chunk boundaries carefully (don't split JSON objects)",
          "Handling",
          "with details"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "0: Note on Orphan Detection",
          "1: Construct File Path and Load Scan Data",
          "2: Build Relationship Graph",
          "3: Identify Architectural Patterns",
          "4: Find Anomalies (Using V5 Data)",
          "5: Validate CLAUDE.md Compliance",
          "6: Calculate Health Metrics",
          "7: Generate Analysis Report"
        ],
        "decision_points": [
          "all CLAUDE.md compliance rules, calculate health scores, and output comprehensive analysis for reporting",
          "if any agent references create cycles",
          "all standards from CLAUDE.md (V5 provides comprehensive violations data)",
          "scan data invalid",
          "analysis partially fails"
        ],
        "validation_logic": [
          "all CLAUDE.md compliance rules, calculate health scores, and output comprehensive analysis for reporting",
          "compliance with CLAUDE.md standards, and calculate system health metrics.",
          "if any agent references create cycles",
          "CLAUDE.md Compliance",
          "all standards from CLAUDE.md (V5 provides comprehensive violations data):"
        ],
        "business_rules": [
          "**From Main Claude**:",
          "**NEW FORMAT**: Directory path + scan type (e.g., \"report_directory: .claude/report/xxx, scan_type: system\")",
          "**AGENT CONSTRUCTS**: Full file paths internally to avoid trigger words",
          "**DO NOT**: Pass file contents in prompt (will exceed token limits)",
          "**AGENT RESPONSIBILITY**: Read file using chunked approach internally",
          "Large files (1MB+) require chunked reading with Read tool",
          "All relationships correctly mapped",
          "All violations accurately identified",
          "Health score fairly calculated",
          "Actionable recommendations provided",
          "No false positives in violation detection"
        ],
        "success_criteria": [
          "- All relationships correctly mapped"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1173,
      "line_count": 302
    },
    "system-reporter": {
      "file": ".claude\\agents\\system-reporter.md",
      "name": "system-reporter",
      "type": "agent",
      "lines": 267,
      "description": "Generates comprehensive markdown report from analysis results showing complete system architecture",
      "thinking": "Read analysis JSON, transform data into human-readable markdown report with architecture diagrams, relationship maps, violation details, health scores, and actionable recommendations formatted for easy understanding",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{input_path}/system_analysis.json",
          "{output_path}/system_report.md"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "**From Main Claude**:",
          "Input path for analysis results (e.g., `.claude/report/TIMESTAMP/system_analysis.json`)",
          "Output path for report (e.g., `.claude/report/TIMESTAMP/system_report.md`)"
        ],
        "output_format": [
          "**Returns to Main Claude**: Report generation success with summary",
          "**File Output**: Detailed markdown report with all findings"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [],
        "dependencies": [
          "Attention"
        ],
        "error_handling": [
          "handling",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Load Analysis Data",
          "2: Generate Report Header",
          "3: Generate Executive Summary",
          "4: Generate Architecture Visualization",
          "5: Generate Component Details",
          "6: Generate Relationship Maps",
          "7: Generate Violations Report",
          "8: Generate Recommendations",
          "9: Generate Appendix",
          "1: Remove Task tool from all coordinators/agents",
          "2: Fix missing component references",
          "3: Resolve circular dependencies",
          "1: Reduce oversized components to meet line limits",
          "2: Add missing I/O documentation",
          "3: Remove or integrate orphan components",
          "1: Standardize naming conventions",
          "2: Improve test coverage",
          "3: Enhance error handling",
          "1: Run fixes for critical violations:",
          "2: Verify fixes:",
          "3: Review detailed findings above for specific file locations"
        ],
        "decision_points": [
          "analysis data missing",
          "sections incomplete"
        ],
        "validation_logic": [
          "fixes:",
          "```",
          "v2.0*"
        ],
        "business_rules": [
          "**From Main Claude**:",
          "Input path for analysis results (e.g., `.claude/report/TIMESTAMP/system_analysis.json`)",
          "Output path for report (e.g., `.claude/report/TIMESTAMP/system_report.md`)",
          "Report is clear and actionable",
          "All violations are documented with fixes",
          "Architecture is clearly visualized",
          "Relationships are easy to understand",
          "Health score is prominently displayed"
        ],
        "success_criteria": [
          "- Report is clear and actionable"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 917,
      "line_count": 267
    },
    "system-scanner": {
      "file": ".claude\\agents\\system-scanner.md",
      "name": "system-scanner",
      "type": "agent",
      "lines": 120,
      "description": "Executes Python script to collect comprehensive raw system data",
      "thinking": "Execute system_check_v5.py with complete semantic extraction and enhanced orphan detection - monitor execution for errors, verify JSON output file is created with full data completeness, extract statistics from output, and report success/failure status back to Main Claude",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{output_path}/system_scan.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "**From Main Claude**:",
          "Output directory path (e.g., `.claude/report/20250114153045/`)",
          "Should be an absolute or relative path where scan results will be saved"
        ],
        "output_format": [
          "**Returns to Main Claude**:",
          "Success/failure status",
          "Number of components scanned",
          "Violation counts by category",
          "Path to generated system_scan.json"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "JSON output file is created with full data completeness, extract statistics from output, and report success/failure status back to Main Claude",
          "be an absolute or relative path where scan results will be saved",
          "successful output generation",
          "it's valid JSON (with proper encoding):"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [
          "status back to Main Claude",
          "status",
          "messages",
          "Handling",
          "information"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "bulk operations supported"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: Execute Python Scanner Script",
          "2: Monitor Execution",
          "3: Verify Output",
          "4: Report Results",
          "1: Capture script output to check for:",
          "2: Script capabilities (system_check_v5.py combining V3 completeness + V4 accuracy):"
        ],
        "decision_points": [],
        "validation_logic": [
          "JSON output file is created with full data completeness, extract statistics from output, and report success/failure status back to Main Claude",
          "successful output generation.",
          "for:",
          "Output",
          "```bash"
        ],
        "business_rules": [
          "**From Main Claude**:",
          "Output directory path (e.g., `.claude/report/20250114153045/`)",
          "Should be an absolute or relative path where scan results will be saved",
          "Script executes without Python errors",
          "system_scan.json is created successfully",
          "File contains valid JSON data",
          "All system components are scanned",
          "Statistics are extracted and reported"
        ],
        "success_criteria": [
          "- Script executes without Python errors"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 562,
      "line_count": 120
    },
    "test-cleanup-agent": {
      "file": ".claude\\agents\\test-cleanup-agent.md",
      "name": "test-cleanup-agent",
      "type": "agent",
      "lines": 187,
      "description": "Safely cleans up test artifacts while preserving important files",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [
          "CLEAN_FIXTURES",
          "file_count"
        ],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Cleanup scope confirmation",
          "Files to preserve list",
          "Safety verification requirements"
        ],
        "output_format": [
          "Cleanup completion status",
          "Files deleted count",
          "Files preserved count",
          "Cleanup log location"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "fails, I abort cleanup and report the issue",
          "reports exist**: Use Bash to verify `",
          "reports are saved",
          "directories",
          "results** using Bash tool to check directories",
          "cleanup paths**: Ensure all paths start with `",
          "results**: Write verification status to cleanup log",
          "safety before deletion**"
        ]
      },
      "execution": {
        "patterns": [
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Safety Verification",
          "2: Execute Cleanup",
          "3: Validation"
        ],
        "decision_points": [
          "called by Main Claude, I execute real cleanup operations with multiple safety checks",
          "reports exist**",
          "ANY safety check fails, I abort cleanup and report the issue.",
          "[ -d \".claude/testing/temp\" ];",
          "explicitly requested)"
        ],
        "validation_logic": [
          "reports are saved",
          "1. **Check reports exist**: Use Bash to verify `.claude/testing/reports/` has files",
          "cleanup paths**: Ensure all paths start with `.claude/testing/`",
          "no `.claude/commands/` or `.claude/agents/` in scope",
          "results**: Write verification status to cleanup log"
        ],
        "business_rules": [
          "Cleanup scope confirmation",
          "Files to preserve list",
          "Safety verification requirements",
          "[x] Only temp files deleted",
          "[x] All reports preserved",
          "[x] No production files touched",
          "[x] Cleanup log generated",
          "[x] Safety validation passed"
        ],
        "success_criteria": [
          "Safe cleanup achieved when:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 734,
      "line_count": 187
    },
    "test-content-draft-agent": {
      "file": ".claude\\agents\\test-content-draft-agent.md",
      "name": "test-content-draft-agent",
      "type": "agent",
      "lines": 127,
      "description": "Generates initial draft content for human-in-loop testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "timestamp_placeholder",
          "message": "Timestamp placeholder not replaced with actual timestamp"
        },
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow state",
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Content requirements",
          "Any revision feedback (if re-executing)",
          "Output file path"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "agent": "test-content-draft-agent",
            "status": "success",
            "draft_created": true,
            "revision_number": 0,
            "file_path": ".claude/testing/human_in_loop/draft_v1.md",
            "ready_for_review": true
          }
        ],
        "validation_rules": [
          "for feedback)",
          "if this is a revision by attempting to read workflow state:",
          "for revision feedback**:"
        ]
      },
      "execution": {
        "patterns": [
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [
          "- This is the first execution"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Read previous draft",
          "2: Apply feedback changes",
          "3: Mark as revision in content",
          "4: Maintain revision history"
        ],
        "decision_points": [
          "re-executing)",
          "for feedback)",
          "called by Main Claude, I execute the following",
          "for revision feedback**",
          "if this is a revision by attempting to read workflow state"
        ],
        "validation_logic": [
          "for feedback)",
          "for revision feedback**:",
          "if this is a revision by attempting to read workflow state:"
        ],
        "business_rules": [
          "Content requirements",
          "Any revision feedback (if re-executing)",
          "Output file path"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 415,
      "line_count": 127
    },
    "test-content-enhancer-agent": {
      "file": ".claude\\agents\\test-content-enhancer-agent.md",
      "name": "test-content-enhancer-agent",
      "type": "agent",
      "lines": 121,
      "description": "Enhances draft content based on human approval for workflow testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Input draft file path",
          "Enhancement requirements",
          "Any revision feedback",
          "Output file path"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "agent": "test-content-enhancer-agent",
            "status": "success",
            "enhancement_complete": true,
            "input_file": "draft_v1.md",
            "output_file": "draft_v2.md",
            "improvements_applied": 5,
            "ready_for_review": true
          }
        ],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "2: processing successfully applied.",
          "2: sequential processing",
          "1: Read previous enhancement",
          "2: Apply specific improvements",
          "3: Track enhancement iterations"
        ],
        "decision_points": [
          "called by Main Claude, I execute real operations",
          "revision feedback for phase 2"
        ],
        "validation_logic": [],
        "business_rules": [
          "Input draft file path",
          "Enhancement requirements",
          "Any revision feedback",
          "Output file path"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 357,
      "line_count": 121
    },
    "test-content-finalizer-agent": {
      "file": ".claude\\agents\\test-content-finalizer-agent.md",
      "name": "test-content-finalizer-agent",
      "type": "agent",
      "lines": 142,
      "description": "Finalizes content for publication after human approvals in workflow test",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [
          ".claude/testing/human_in_loop/final.md"
        ],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Input enhanced file path",
          "Finalization requirements",
          "Publication format preferences",
          "Output file path"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "document_id": "unique_id",
            "workflow_complete": true,
            "phases_completed": 3,
            "human_approvals": 2,
            "awaiting_final_approval": true,
            "publication_ready": true,
            "timestamp": "ISO-8601"
          },
          {
            "agent": "test-content-finalizer-agent",
            "status": "success",
            "finalization_complete": true,
            "input_file": "draft_v2.md",
            "output_file": "final.md",
            "metadata_created": true,
            "ready_for_final_approval": true,
            "workflow_validation": "complete"
          }
        ],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "serial",
          "pipeline",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: [x] | Phase 2 [x] | Phase 3 (pending)",
          "1: Human approved initial draft",
          "2: Human approved enhancements",
          "3: Awaiting final publication approval",
          "1: Initial Draft: Approved at [timestamp]",
          "2: Enhancement: Approved at [timestamp]",
          "3: Finalization: Completed at [timestamp]"
        ],
        "decision_points": [
          "called by Main Claude, I execute real finalization"
        ],
        "validation_logic": [],
        "business_rules": [
          "Input enhanced file path",
          "Finalization requirements",
          "Publication format preferences",
          "Output file path"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 403,
      "line_count": 142
    },
    "test-data-analyzer-agent": {
      "file": ".claude\\agents\\test-data-analyzer-agent.md",
      "name": "test-data-analyzer-agent",
      "type": "agent",
      "lines": 166,
      "description": "Analyzes processed data and generates insights for multi-coordinator testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Analysis type (statistical, trend, pattern)",
          "Data source file path",
          "Analysis depth level"
        ],
        "output_format": [
          "Analysis completion status",
          "Number of insights generated",
          "Key findings summary",
          "Recommendation count"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Analysis",
          "2: coordinator will use"
        ],
        "decision_points": [
          "called by Main Claude, I",
          "values else 0,",
          "values else 0,",
          "values else 0,",
          "values else 0"
        ],
        "validation_logic": [],
        "business_rules": [
          "Analysis type (statistical, trend, pattern)",
          "Data source file path",
          "Analysis depth level",
          "[x] Successfully analyze processed data",
          "[x] Generate statistical insights",
          "[x] Detect data patterns",
          "[x] Create actionable recommendations",
          "[x] Prepare data for content generation phase"
        ],
        "success_criteria": [
          "- [x] Successfully analyze processed data"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 538,
      "line_count": 166
    },
    "test-data-parser-agent": {
      "file": ".claude\\agents\\test-data-parser-agent.md",
      "name": "test-data-parser-agent",
      "type": "agent",
      "lines": 121,
      "description": "Parses and processes test data for multi-coordinator collaboration testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Data file path to process",
          "Processing parameters (complexity, size)",
          "Output format requirements"
        ],
        "output_format": [
          "Processing completion status",
          "Number of records processed",
          "Output file paths",
          "Processing statistics"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "processing\n            'category': classify_item(item),\n            'processed_at': datetime.now().isoformat()\n        }\n        processed_items.append(processed_item)"
        ],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Loading",
          "2: Results Generation",
          "2: coordinator to use."
        ],
        "decision_points": [
          "called by Main Claude, I",
          "value < 100"
        ],
        "validation_logic": [],
        "business_rules": [
          "Data file path to process",
          "Processing parameters (complexity, size)",
          "Output format requirements",
          "[x] Successfully parse input data file",
          "[x] Apply processing transformations",
          "[x] Generate processing statistics",
          "[x] Output valid JSON results",
          "[x] Create processing log file"
        ],
        "success_criteria": [
          "- [x] Successfully parse input data file"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 398,
      "line_count": 121
    },
    "test-environment-setup-agent": {
      "file": ".claude\\agents\\test-environment-setup-agent.md",
      "name": "test-environment-setup-agent",
      "type": "agent",
      "lines": 126,
      "description": "Creates complete test environment for Claude Code architecture validation",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Test type to prepare for",
          "Directory structure requirements",
          "Component generation needs"
        ],
        "output_format": [
          "Environment setup completion status",
          "Created directories list",
          "Generated test components count",
          "Ready flag location"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "proper hierarchy for test isolation",
          "all directories exist using Bash tool:",
          "be detected)"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Setting up directory structure",
          "2: Generating test fixtures",
          "3: Creating test data files",
          "4: Initializing test framework",
          "1: Execute bash commands to create directories:",
          "2: Use Write tool to create test configuration at `.claude/testing/test_config.json`:",
          "3: Generate test fixture agents using Write tool:",
          "4: Create environment ready flag:"
        ],
        "decision_points": [
          "called, I execute the following setup operations",
          "Main Claude calls me, I will",
          "`.claude/testing/framework` exists",
          "`.claude/testing/fixtures` exists",
          "`.claude/testing/reports` exists"
        ],
        "validation_logic": [
          "proper hierarchy for test isolation",
          "all directories exist using Bash tool:",
          "`.claude/testing/framework` exists",
          "`.claude/testing/fixtures` exists",
          "`.claude/testing/reports` exists"
        ],
        "business_rules": [
          "Test type to prepare for",
          "Directory structure requirements",
          "Component generation needs"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 507,
      "line_count": 126
    },
    "test-execution-agent": {
      "file": ".claude\\agents\\test-execution-agent.md",
      "name": "test-execution-agent",
      "type": "agent",
      "lines": 199,
      "description": "Executes comprehensive Claude Code architecture validation tests",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash",
        "Grep"
      ],
      "violations": [
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapter_{NNN}.md'"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Test scenarios to execute",
          "Test parameters and thresholds",
          "Environment ready confirmation"
        ],
        "output_format": [
          "Test execution summary",
          "Pass/fail status for each test",
          "Performance metrics",
          "Violation details if any"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "file I/O isolation by:",
          "all coordinator and agent files for Task tool violations by:",
          "the 5-layer architecture by checking:"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "Handling Test",
          "handling scenarios by:",
          "handling",
          "handling",
          "handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Reading each '.md' file in '.claude/agents/'",
          "2: Parsing the frontmatter YAML",
          "3: Checking if 'Task' appears in the tools list",
          "4: Recording any violations found",
          "1: Creating multiple Python threads",
          "2: Simulating agent work in parallel",
          "3: Comparing parallel vs serial execution time",
          "4: Calculating efficiency gain percentage",
          "1: Testing atomic write operations (.tmp file + rename)",
          "2: Testing concurrent read operations",
          "3: Verifying file integrity after operations",
          "1: Commands layer: Line count < 120",
          "2: Coordinators layer: Line count < 250, returns JSON plans",
          "3: Agents layer: Line count < 500, single responsibility",
          "4: File system layer: All communication via files",
          "1: Launching 5 threads that write to the same file",
          "2: Detecting conflicts and corrupted data",
          "3: Demonstrating why atomic operations are critical",
          "1: Testing patterns like 'projects/{project}/book_{N}/chapter_{NNN}.md'",
          "2: Replacing variables with actual values",
          "3: Verifying correct path resolution",
          "1: Launching 15 tasks (exceeds 10-task limit)",
          "2: Tracking maximum concurrent tasks",
          "3: Verifying limit enforcement",
          "1: Testing FileNotFoundError handling",
          "2: Testing JSONDecodeError handling",
          "3: Testing ValidationError handling"
        ],
        "decision_points": [
          "called by Main Claude, I execute real tests using Python code through the Bash tool.",
          "all coordinator and agent files for Task tool violations by",
          "'Task' appears in the tools list",
          "efficiency > 50%",
          "atomic operations work"
        ],
        "validation_logic": [
          "Writes to:",
          "all coordinator and agent files for Task tool violations by:",
          "file I/O isolation by:",
          "the 5-layer architecture by checking:"
        ],
        "business_rules": [
          "Test scenarios to execute",
          "Test parameters and thresholds",
          "Environment ready confirmation",
          "[x] Zero recursion violations (no Task in coordinators/agents)",
          "[x] >50% parallel execution efficiency",
          "[x] 100% I/O operation success",
          "[x] Complete 5-layer architecture compliance"
        ],
        "success_criteria": [
          "All tests must pass:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 828,
      "line_count": 199
    },
    "test-io-patterns-agent": {
      "file": ".claude\\agents\\test-io-patterns-agent.md",
      "name": "test-io-patterns-agent",
      "type": "agent",
      "lines": 127,
      "description": "Tests advanced I/O patterns including producer-consumer, shared reference, and version control",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Test scenario type (producer-consumer/shared-reference/version-control)",
          "Test parameters and configuration",
          "Expected behavior criteria"
        ],
        "output_format": [
          "Pattern test completion status",
          "Success/failure for each pattern",
          "Performance metrics",
          "Recommendations"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "demonstrate:",
          "no corruption during reads",
          "no conflicts**: All readers get consistent data",
          "no corruption**: Final file is complete",
          "proper file-based communication:",
          "all Data Layer patterns from ARCHITECTURE_data_layer"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "for each pattern",
          "recovery**: Handle partial writes"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Producer-Consumer pattern validation",
          "2: Shared Reference pattern testing",
          "3: Version Control pattern verification",
          "4: Atomic operation enforcement"
        ],
        "decision_points": [
          "called by Main Claude, I execute real I/O pattern tests using Python through the Bash tool.",
          "Main Claude calls me, I execute all I/O pattern tests by"
        ],
        "validation_logic": [
          "proper file-based communication:",
          "no conflicts**: All readers get consistent data",
          "no corruption during reads",
          "no corruption**: Final file is complete",
          "all Data Layer patterns from ARCHITECTURE_data_layer.md"
        ],
        "business_rules": [
          "Test scenario type (producer-consumer/shared-reference/version-control)",
          "Test parameters and configuration",
          "Expected behavior criteria",
          "[x] Producer-Consumer decoupling",
          "[x] Shared Reference without conflicts",
          "[x] Version Control tracking",
          "[x] Atomic operations prevent corruption",
          "[x] No direct agent-to-agent calls"
        ],
        "success_criteria": [
          "All I/O patterns must demonstrate:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 542,
      "line_count": 127
    },
    "test-parallel-agent-a": {
      "file": ".claude\\agents\\test-parallel-agent-a.md",
      "name": "test-parallel-agent-a",
      "type": "agent",
      "lines": 83,
      "description": "Parallel test agent A for real concurrency testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path"
        ],
        "output_format": [
          "Execution completion status",
          "Performance metrics",
          "File paths for result collection"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "parallel",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Initialize",
          "2: Simulate Work",
          "3: Complete"
        ],
        "decision_points": [
          "called by Main Claude, I"
        ],
        "validation_logic": [],
        "business_rules": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path",
          "[x] Complete execution without errors",
          "[x] Generate valid result JSON",
          "[x] Successfully access shared data",
          "[x] Record accurate timing metrics",
          "[x] Execute independently of other agents"
        ],
        "success_criteria": [
          "- [x] Complete execution without errors"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 325,
      "line_count": 83
    },
    "test-parallel-agent-b": {
      "file": ".claude\\agents\\test-parallel-agent-b.md",
      "name": "test-parallel-agent-b",
      "type": "agent",
      "lines": 83,
      "description": "Parallel test agent B for real concurrency testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path"
        ],
        "output_format": [
          "Execution completion status",
          "Performance metrics",
          "File paths for result collection"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "parallel",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Initialize",
          "2: Simulate Work",
          "3: Complete"
        ],
        "decision_points": [
          "called by Main Claude, I"
        ],
        "validation_logic": [],
        "business_rules": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path",
          "[x] Complete execution without errors",
          "[x] Generate valid result JSON",
          "[x] Successfully access shared data",
          "[x] Record accurate timing metrics",
          "[x] Execute independently of other agents"
        ],
        "success_criteria": [
          "- [x] Complete execution without errors"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 325,
      "line_count": 83
    },
    "test-parallel-agent-c": {
      "file": ".claude\\agents\\test-parallel-agent-c.md",
      "name": "test-parallel-agent-c",
      "type": "agent",
      "lines": 83,
      "description": "Parallel test agent C for real concurrency testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path"
        ],
        "output_format": [
          "Execution completion status",
          "Performance metrics",
          "File paths for result collection"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "parallel",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Initialize",
          "2: Simulate Work",
          "3: Complete"
        ],
        "decision_points": [
          "called by Main Claude, I"
        ],
        "validation_logic": [],
        "business_rules": [
          "Parallel execution test parameters",
          "Work simulation duration",
          "Result file path",
          "[x] Complete execution without errors",
          "[x] Generate valid result JSON",
          "[x] Successfully access shared data",
          "[x] Record accurate timing metrics",
          "[x] Execute independently of other agents"
        ],
        "success_criteria": [
          "- [x] Complete execution without errors"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 327,
      "line_count": 83
    },
    "test-python-analyzer-agent": {
      "file": ".claude\\agents\\test-python-analyzer-agent.md",
      "name": "test-python-analyzer-agent",
      "type": "agent",
      "lines": 102,
      "description": "Analyzes transformed data from stage 2 using Python script for pipeline testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Input file path (stage2_data.json)",
          "Analysis parameters",
          "Output file paths"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "agent": "test-python-analyzer-agent",
            "status": "success",
            "python_script_created": "data_analyzer.py",
            "analysis_completed": true,
            "items_analyzed": 100,
            "analysis_types": 6,
            "output_files": [
              "stage3_final.json",
              "stage3_report.json"
            ],
            "pipeline_complete": true,
            "ready_for_presentation": true
          }
        ],
        "validation_rules": [
          "input files exist**:",
          "analyzer script exists**:",
          "if the Python script exists:",
          "final outputs**:",
          "all required input files:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "called by Main Claude, I execute the following",
          "all required input files",
          "if the Python script exists"
        ],
        "validation_logic": [
          "input files exist**:",
          "all required input files:",
          "analyzer script exists**:",
          "if the Python script exists:",
          "final outputs**:"
        ],
        "business_rules": [
          "Input file path (stage2_data.json)",
          "Analysis parameters",
          "Output file paths"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 328,
      "line_count": 102
    },
    "test-python-generator-agent": {
      "file": ".claude\\agents\\test-python-generator-agent.md",
      "name": "test-python-generator-agent",
      "type": "agent",
      "lines": 80,
      "description": "Generates test data using Python script for pipeline testing",
      "thinking": "",
      "tools": [
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Data size (small/medium/large)",
          "Output file paths",
          "Data generation parameters"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "agent": "test-python-generator-agent",
            "status": "success",
            "python_script_created": "data_generator.py",
            "data_generated": true,
            "output_files": [
              "stage1_data.json",
              "stage1_report.json"
            ],
            "items_generated": 100,
            "ready_for_next_stage": true
          }
        ],
        "validation_rules": [
          "if the Python script exists:",
          "outputs created**:",
          "script exists**:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "called by Main Claude, I execute the following",
          "if the Python script exists"
        ],
        "validation_logic": [
          "script exists**:",
          "if the Python script exists:",
          "outputs created**:"
        ],
        "business_rules": [
          "Data size (small/medium/large)",
          "Output file paths",
          "Data generation parameters"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 243,
      "line_count": 80
    },
    "test-python-transformer-agent": {
      "file": ".claude\\agents\\test-python-transformer-agent.md",
      "name": "test-python-transformer-agent",
      "type": "agent",
      "lines": 92,
      "description": "Transforms data from stage 1 using Python script for pipeline testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Input file path (stage1_data.json)",
          "Transformation parameters",
          "Output file paths"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "agent": "test-python-transformer-agent",
            "status": "success",
            "python_script_created": "data_transformer.py",
            "data_transformed": true,
            "input_items": 100,
            "output_items": 100,
            "transformations_applied": 8,
            "output_files": [
              "stage2_data.json",
              "stage2_report.json"
            ],
            "ready_for_next_stage": true
          }
        ],
        "validation_rules": [
          "input files exist**:",
          "transformer script exists**:",
          "if the Python script exists:",
          "outputs created**:",
          "input files:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "called by Main Claude, I execute the following",
          "input files",
          "if the Python script exists"
        ],
        "validation_logic": [
          "input files exist**:",
          "input files:",
          "transformer script exists**:",
          "if the Python script exists:",
          "outputs created**:"
        ],
        "business_rules": [
          "Input file path (stage1_data.json)",
          "Transformation parameters",
          "Output file paths"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 276,
      "line_count": 92
    },
    "test-rejection-logger-agent": {
      "file": ".claude\\agents\\test-rejection-logger-agent.md",
      "name": "test-rejection-logger-agent",
      "type": "agent",
      "lines": 131,
      "description": "Logs rejection reasons and workflow termination details for human-in-loop testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "Workflow state",
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Rejection phase",
          "Rejection reason",
          "Workflow state at rejection",
          "Files created before rejection"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "rejection_id": "unique_id",
            "timestamp": "ISO-8601",
            "workflow_id": "test_workflow_id",
            "rejection_point": {
              "phase": "phase_2",
              "after_agent": "test-content-enhancer-agent",
              "files_reviewed": [
                "draft_v2.md"
              ]
            },
            "rejection_details": {
              "reason": "Quality standards not met",
              "human_feedback": "Content lacks required technical depth",
              "workflow_state": "terminated"
            },
            "workflow_progress": {
              "phases_completed": [
                "phase_1"
              ],
              "phases_rejected": [
                "phase_2"
              ],
              "total_revisions": 0,
              "time_to_rejection": "5 minutes"
            },
            "artifacts_created": [
              "draft_v1.md",
              "draft_v2.md",
              "workflow_state.json"
            ]
          },
          {
            "agent": "test-rejection-logger-agent",
            "status": "success",
            "rejection_logged": true,
            "termination_report_created": true,
            "workflow_terminated_gracefully": true,
            "test_validation": "rejection_path_confirmed"
          }
        ],
        "validation_rules": []
      },
      "execution": {
        "patterns": [
          "pipeline",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "2: - Content Enhancement",
          "1: - Approved)",
          "2: - Rejected)"
        ],
        "decision_points": [
          "called by Main Claude after a REJECT response"
        ],
        "validation_logic": [],
        "business_rules": [
          "Rejection phase",
          "Rejection reason",
          "Workflow state at rejection",
          "Files created before rejection"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 374,
      "line_count": 131
    },
    "test-report-generator-agent": {
      "file": ".claude\\agents\\test-report-generator-agent.md",
      "name": "test-report-generator-agent",
      "type": "agent",
      "lines": 191,
      "description": "Generates test reports based on data analysis results for multi-coordinator testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Report type (summary, detailed, executive)",
          "Analysis data source path",
          "Output format preferences"
        ],
        "output_format": [
          "Report generation completion status",
          "Report sections generated",
          "Output file paths",
          "Report statistics"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "that coordinators can manage complex workflows through agents",
          "multi-coordinator collaboration"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Content Generation",
          "1: Success",
          "2: Success",
          "1: coordinator managed data processing agents effectively",
          "2: coordinator successfully consumed Phase 1 results",
          "2: dependency on Phase 1 results",
          "1: analysis",
          "1: Phase 1 coordinator managed data processing agents effectively",
          "2: Phase 2 coordinator successfully consumed Phase 1 results",
          "3: Real work was performed by agents under coordinator guidance",
          "4: File-based communication enabled seamless collaboration"
        ],
        "decision_points": [
          "called by Main Claude, I"
        ],
        "validation_logic": [
          "multi-coordinator collaboration",
          "that coordinators can manage complex workflows through agents"
        ],
        "business_rules": [
          "Report type (summary, detailed, executive)",
          "Analysis data source path",
          "Output format preferences",
          "[x] Successfully generate comprehensive report",
          "[x] Include all analysis findings",
          "[x] Format report for readability",
          "[x] Demonstrate Phase 2 dependency on Phase 1 results",
          "[x] Validate multi-coordinator collaboration"
        ],
        "success_criteria": [
          "- [x] Successfully generate comprehensive report"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 664,
      "line_count": 191
    },
    "test-result-collector-agent": {
      "file": ".claude\\agents\\test-result-collector-agent.md",
      "name": "test-result-collector-agent",
      "type": "agent",
      "lines": 173,
      "description": "Collects and synthesizes test results into comprehensive reports",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Test execution completion confirmation",
          "Report format requirements",
          "Analysis depth level"
        ],
        "output_format": [
          "Test summary statistics",
          "Critical findings",
          "Report file locations",
          "Next steps recommendations"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "Phase 1 results**: '",
          "dependency chain**: Phase 2 used Phase 1 data",
          "Phase 2 results**: '"
        ]
      },
      "execution": {
        "patterns": [
          "parallel",
          "serial",
          "pipeline",
          "multi_coordinator",
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Collect All Test Results",
          "2: Analyze Test Data",
          "3: Generate Comprehensive Report",
          "4: Create Summary Statistics",
          "5: Generate Violations Report",
          "1: completion status",
          "2: dependency handling",
          "1: results**: '.claude/testing/multi_coordinator_test/phase1_analysis.json'",
          "2: results**: '.claude/testing/multi_coordinator_test/phase2_content.json'",
          "2: used Phase 1 data"
        ],
        "decision_points": [
          "called by Main Claude, I perform real result collection and synthesis",
          "multi-coordinator success**",
          "violations exist, I create '.claude/testing/reports/violations.md'",
          "Main Claude calls me, I",
          "Phase 1 results**"
        ],
        "validation_logic": [
          "Phase 1 results**: '.claude/testing/multi_coordinator_test/phase1_analysis.json'",
          "Phase 2 results**: '.claude/testing/multi_coordinator_test/phase2_content.json'",
          "dependency chain**: Phase 2 used Phase 1 data"
        ],
        "business_rules": [
          "Test execution completion confirmation",
          "Report format requirements",
          "Analysis depth level",
          "[x] Gathers all test results",
          "[x] Analyzes multi-coordinator collaboration",
          "[x] Generates comprehensive report",
          "[x] Provides actionable recommendations",
          "[x] Calculates system health score"
        ],
        "success_criteria": [
          "The collector successfully:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 672,
      "line_count": 173
    },
    "test-state-updater-agent": {
      "file": ".claude\\agents\\test-state-updater-agent.md",
      "name": "test-state-updater-agent",
      "type": "agent",
      "lines": 132,
      "description": "Updates workflow state after human responses in human-in-loop testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow state",
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Current phase",
          "Human response (APPROVE/REJECT/REVISE)",
          "Feedback (if REVISE or REJECT)",
          "Timestamp"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "current phase matches expected phase",
          "revision count doesn't exceed maximum (3)",
          "workflow isn't already terminated"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "REVISE or REJECT)",
          "called by Main Claude after human response",
          "revision count doesn't exceed maximum (3)",
          "applicable]"
        ],
        "validation_logic": [
          "current phase matches expected phase",
          "revision count doesn't exceed maximum (3)",
          "workflow isn't already terminated"
        ],
        "business_rules": [
          "Current phase",
          "Human response (APPROVE/REJECT/REVISE)",
          "Feedback (if REVISE or REJECT)",
          "Timestamp"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 319,
      "line_count": 132
    },
    "test-summary-generator-agent": {
      "file": ".claude\\agents\\test-summary-generator-agent.md",
      "name": "test-summary-generator-agent",
      "type": "agent",
      "lines": 171,
      "description": "Generates executive summaries from analysis results for multi-coordinator testing",
      "thinking": "",
      "tools": [
        "Read",
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Summary type (executive, technical, overview)",
          "Source data file paths",
          "Target audience specifications"
        ],
        "output_format": [
          "Summary generation completion status",
          "Summary sections created",
          "Key metrics extracted",
          "Output file locations"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "the success of multi-coordinator collaboration",
          "collaboration success"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "multi_coordinator"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Data Synthesis",
          "1: coordinator managed data processing agents effectively",
          "2: coordinator successfully consumed Phase 1 outputs",
          "2: agents can build upon Phase 1 results effectively",
          "1: Manage multiple agents to perform actual work",
          "2: Coordinate complex multi-phase workflows",
          "3: Enable seamless collaboration between phases",
          "4: Maintain architecture compliance while delivering results"
        ],
        "decision_points": [
          "called by Main Claude, I"
        ],
        "validation_logic": [
          "collaboration success",
          "the success of multi-coordinator collaboration"
        ],
        "business_rules": [
          "Summary type (executive, technical, overview)",
          "Source data file paths",
          "Target audience specifications",
          "[x] Generate executive-level summary",
          "[x] Extract key business metrics",
          "[x] Validate collaboration success",
          "[x] Provide actionable next steps",
          "[x] Demonstrate summary generation from real analysis"
        ],
        "success_criteria": [
          "- [x] Generate executive-level summary"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 583,
      "line_count": 171
    },
    "test-validation-agent": {
      "file": ".claude\\agents\\test-validation-agent.md",
      "name": "test-validation-agent",
      "type": "agent",
      "lines": 161,
      "description": "Validates documentation format standards and JSON plan structures",
      "thinking": "",
      "tools": [
        "Read",
        "Grep"
      ],
      "violations": [
        {
          "type": "agent_acts_as_coordinator",
          "message": "Agent has coordinator-like orchestration behavior"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [
          "Validation type (format/json/documentation)",
          "Files or directories to validate",
          "Standards to check against"
        ],
        "output_format": [
          "Validation pass/fail status",
          "Violation count and details",
          "Compliance percentage",
          "Improvement recommendations"
        ],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "coordinators** don't attempt execution:",
          "path patterns** using regex:",
          "agents** don't attempt coordination:",
          "component interactions by:",
          "path formats by:",
          "- Standards to check against",
          "required fields**:",
          "documentation completeness by:",
          "coordinator JSON plans by:",
          "for required sections**:"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": [
          "optimized for speed (Haiku model)",
          "high quality processing (Opus model)"
        ]
      },
      "business": {
        "workflow_steps": [
          "1: File path format validation",
          "2: JSON plan structure verification",
          "3: Documentation completeness checks",
          "4: Component length validation"
        ],
        "decision_points": [
          "called by Main Claude, I execute real validation tests using Python through Read and Grep tools.",
          "path patterns** using regex",
          "no violations",
          "required fields**",
          "documentation completeness by"
        ],
        "validation_logic": [
          "- Standards to check against",
          "system compliance with documentation and format standards:",
          "path formats by:",
          "path patterns** using regex:",
          "coordinator JSON plans by:"
        ],
        "business_rules": [
          "Validation type (format/json/documentation)",
          "Files or directories to validate",
          "Standards to check against",
          "[x] Path formats follow standards",
          "[x] JSON plans properly structured",
          "[x] Documentation complete",
          "[x] Model configurations valid",
          "[x] Component interactions correct"
        ],
        "success_criteria": [
          "All validations must pass:"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "preferred_model": "claude-opus-4-1",
        "reason": "High quality/critical operations",
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 616,
      "line_count": 161
    },
    "test-workflow-initializer-agent": {
      "file": ".claude\\agents\\test-workflow-initializer-agent.md",
      "name": "test-workflow-initializer-agent",
      "type": "agent",
      "lines": 108,
      "description": "Initializes workflow state for human-in-loop testing",
      "thinking": "",
      "tools": [
        "Write",
        "Bash"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_thinking_field",
          "severity": "minor",
          "message": "Agent missing thinking field (recommended)"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [],
        "cache_files": [],
        "state_files": [
          "workflow state",
          "Workflow state",
          "workflow_state"
        ],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [
          "Workflow ID",
          "Test scenario type (simple/complex/iterative)",
          "Initial configuration"
        ],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [
          {
            "workflow_id": "[generated_unique_id]",
            "test_scenario": "[simple/complex/iterative]",
            "started_at": "[ISO timestamp]",
            "current_phase": "not_started",
            "phases_completed": [],
            "revision_count": {
              "phase_1": 0,
              "phase_2": 0,
              "phase_3": 0
            },
            "human_responses": [],
            "feedback_history": [],
            "workflow_status": "initialized"
          },
          {
            "test_type": "human_in_loop",
            "scenario": "[simple/complex/iterative]",
            "max_revisions_per_phase": 3,
            "timeout_minutes": 30,
            "created_at": "[timestamp]"
          },
          {
            "agent": "test-workflow-initializer-agent",
            "status": "success",
            "workflow_initialized": true,
            "workflow_id": "[unique_id]",
            "state_file_created": ".claude/testing/human_in_loop/workflow_state.json",
            "config_file_created": ".claude/testing/human_in_loop/config.json",
            "ready_to_start": true
          }
        ],
        "validation_rules": [
          "directories exist:"
        ]
      },
      "execution": {
        "patterns": [
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [],
        "decision_points": [
          "called by Main Claude at workflow start",
          "requested, clean previous test files"
        ],
        "validation_logic": [
          "directories exist:"
        ],
        "business_rules": [
          "Workflow ID",
          "Test scenario type (simple/complex/iterative)",
          "Initial configuration"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 262,
      "line_count": 108
    },
    "thriller-specialist": {
      "file": ".claude\\agents\\thriller-specialist.md",
      "name": "thriller-specialist",
      "type": "agent",
      "lines": 312,
      "description": "Enhances drafts with authentic thriller genre elements",
      "thinking": "Enhance drafts with authentic thriller elements - verify genre match before processing, create time pressure through deadlines and constraints, escalate stakes progressively throughout narrative, build psychological tension through paranoia and trust erosion, maintain kinetic energy without over-relying on action, show exhaustion and resource depletion realistically, and avoid thriller cliches. Focus on competent antagonists and vulnerable protagonists.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 304,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 304"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md"
        ],
        "temp_files": [
          "path.tmp",
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Write(\"path.tmp\", content) then Bash('mv \"path.tmp\" \"path\"')\n     * This prevents corruption if operation fails mid-write\n   - Document thriller elements added",
          "1: Time Pressure Without Countdown\n**Before**: \"She had to hurry to save him.\"",
          "2: Escalating Stakes Through Implication\n**Before**: \"The situation was getting more dangerous.\"",
          "3: Skill Under Pressure\n**Before**: \"She fought expertly.\"",
          "4: Information as Threat\n**Before**: \"She discovered the truth.\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "primary_genre contains \"thriller\"",
          "genre match before processing, create time pressure through deadlines and constraints, escalate stakes progressively throughout narrative, build psychological tension through paranoia and trust erosion, maintain kinetic energy without over-relying on action, show exhaustion and resource depletion realistically, and avoid thriller cliches",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [
          "twice. The cat was gone.\""
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: VERIFICATION",
          "2: THRILLER ENHANCEMENT",
          "3: PRESERVE THRILLER AUTHENTICITY",
          "4: NATURAL THRILLER INTEGRATION",
          "5: APPLY ALL THRILLER ENHANCEMENTS",
          "6: SAVE THRILLER-ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "NOT thriller, SKIP processing and return unchanged",
          "operation fails mid-write",
          "operation fails mid-write"
        ],
        "validation_logic": [
          "genre match before processing, create time pressure through deadlines and constraints, escalate stakes progressively throughout narrative, build psychological tension through paranoia and trust erosion, maintain kinetic energy without over-relying on action, show exhaustion and resource depletion realistically, and avoid thriller cliches. Focus on competent antagonists and vulnerable protagonists.",
          "primary_genre contains \"thriller\""
        ],
        "business_rules": [
          "Skills that are realistic and earned",
          "Vulnerabilities that create genuine tension",
          "Growth under pressure",
          "Resources that are limited",
          "Alternating tension and brief relief",
          "Information revealed strategically",
          "Action scenes balanced with character moments",
          "Building to climactic confrontation",
          "40% tension and suspense building",
          "30% action and movement",
          "20% character development under pressure",
          "10% strategic thinking and planning"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1442,
      "line_count": 312
    },
    "transition-continuity-reviewer": {
      "file": ".claude\\agents\\transition-continuity-reviewer.md",
      "name": "transition-continuity-reviewer",
      "type": "agent",
      "lines": 297,
      "description": "Reviews book-to-book transition plans for continuity and generates approval report",
      "thinking": "Review book-to-book transitions systematically for logical continuity - validate time logic for character changes and world evolution, check character progression alignment with established arcs and relationship development, verify thread management addresses previous book endings while introducing new elements naturally, ensure series bible compliance with planned character development and plot progression, identify critical issues with specific fix suggestions, generate comprehensive review report with actionable recommendations, and focus on logical consistency rather than creative merit. Maintain series coherence throughout.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N-1}/final_state.yaml",
          "{project}/book_{N-1}/context/characters.json",
          "{project}/book_{N-1}/context/plot.json",
          "{project}/book_{N-1}/context/world.json",
          "{project}/book_{N}/transition_plan.yaml",
          "{project}/series_bible.yaml",
          "{project}/book_{N}/transition_review.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "Issue:*\n- Category: \"time_logic\"\n- Issue: \"3 months insufficient for character to master new language\"\n- Severity: \"HIGH\"\n- Evidence: \"Book 1 ends with Sarah knowing no Spanish, Book 2 opens with fluency\"\n- Fix: \"Either extend time gap to 1+ years OR reduce language skill to basic phrases\""
        ],
        "json_schemas": [],
        "validation_rules": [
          "time logic for character changes and world evolution, check character progression alignment with established arcs and relationship development, verify thread management addresses previous book endings while introducing new elements naturally, ensure series bible compliance with planned character development and plot progression, identify critical issues with specific fix suggestions, generate comprehensive review report with actionable recommendations, and focus on logical consistency rather than creative merit",
          "important threads aren't forgotten",
          "character progression:**",
          "plot thread handling:**",
          "that Book N naturally and logically follows from Book N-1's ending state, maintaining character progression, thread management, and series consistency",
          "time gap reasonableness:**",
          "alignment with series plan:**",
          "changes are believable given time gaps",
          "if this is Book 1 (shouldn't use this reviewer)",
          "be addressed"
        ]
      },
      "execution": {
        "patterns": [
          "human_in_loop"
        ],
        "dependencies": [],
        "error_handling": [
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Load Required Context",
          "2: Validate Continuity",
          "3: Calculate Overall Score",
          "4: Identify Critical Issues",
          "5: Generate Review Report",
          "6: Generate Summary for User",
          "1: Identify specific problem",
          "2: Classify severity (HIGH/MEDIUM/LOW)",
          "3: Provide concrete fix suggestion"
        ],
        "decision_points": [
          "character progression alignment with established arcs and relationship development, verify thread management addresses previous book endings while introducing new elements naturally, ensure series bible compliance with planned character development and plot progression, identify critical issues with specific fix suggestions, generate comprehensive review report with actionable recommendations, and focus on logical consistency rather than creative merit. Maintain series coherence throughout.",
          "reading Bible, concentrate on",
          "if transitions make logical sense",
          "time gap reasonableness",
          "character progression"
        ],
        "validation_logic": [
          "time logic for character changes and world evolution, check character progression alignment with established arcs and relationship development, verify thread management addresses previous book endings while introducing new elements naturally, ensure series bible compliance with planned character development and plot progression, identify critical issues with specific fix suggestions, generate comprehensive review report with actionable recommendations, and focus on logical consistency rather than creative merit. Maintain series coherence throughout.",
          "that Book N naturally and logically follows from Book N-1's ending state, maintaining character progression, thread management, and series consistency.",
          "if transitions make logical sense",
          "changes are believable given time gaps",
          "important threads aren't forgotten"
        ],
        "business_rules": [
          "\"recommendation\": Final assessment and next steps",
          "Next steps for proceeding",
          "All required files loaded successfully",
          "Four continuity dimensions evaluated",
          "Overall score calculated correctly",
          "Critical issues identified with specific fixes",
          "Review report saved in JSON format",
          "Clear user summary provided"
        ],
        "success_criteria": [
          "- All required files loaded successfully"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "low"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1372,
      "line_count": 296
    },
    "transition-planner": {
      "file": ".claude\\agents\\transition-planner.md",
      "name": "transition-planner",
      "type": "agent",
      "lines": 326,
      "description": "Plans optimal transition strategy to next project phase",
      "thinking": true,
      "tools": [
        "Read",
        "Write",
        "Glob"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/completed.json",
          "{project}/series_progress.json",
          "{project}/book_{N}/plot_threads.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": [
          "db"
        ]
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "continuation viability"
        ]
      },
      "execution": {
        "patterns": [],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Current State Analysis",
          "2: Opportunity Identification",
          "3: Strategy Generation",
          "4: Report Generation",
          "1: Next Phase Analysis",
          "2: Readiness Assessment",
          "3: Strategic Recommendations"
        ],
        "decision_points": [
          "Planning Transition",
          "publication readiness",
          "continuation viability",
          "continue_viable and continuation_score > 80",
          "pub_ready and market_score > 70"
        ],
        "validation_logic": [
          "continuation viability"
        ],
        "business_rules": [],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 846,
      "line_count": 326
    },
    "world-building-specialist": {
      "file": ".claude\\agents\\world-building-specialist.md",
      "name": "world-building-specialist",
      "type": "agent",
      "lines": 86,
      "description": "Enriches world details and atmosphere",
      "thinking": true,
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [],
        "json_schemas": [],
        "validation_rules": [
          "save using ATOMIC operations:",
          "be reflected in world details"
        ]
      },
      "execution": {
        "patterns": [
          "atomic"
        ],
        "dependencies": [],
        "error_handling": [],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: ENRICH WITH WORLD DETAILS",
          "3: SAVE ENRICHED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "relevant to scene",
          "operation fails mid-write"
        ],
        "validation_logic": [],
        "business_rules": [
          "voice_profile: descriptive style preferences and sensory detail approaches",
          "themes: thematic elements that should be reflected in world details",
          "Don't change plot or dialogue",
          "Add details that enhance immersion",
          "Keep consistent with established world",
          "Maintain pacing (don't over-describe)",
          "Every scene has sensory details",
          "World feels lived-in and real",
          "Atmosphere supports mood",
          "File saved successfully"
        ],
        "success_criteria": [
          "- Every scene has sensory details"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 349,
      "line_count": 86
    },
    "world-clue-specialist": {
      "file": ".claude\\agents\\world-clue-specialist.md",
      "name": "world-clue-specialist",
      "type": "agent",
      "lines": 298,
      "description": "Integrates world-building details and plants plot-relevant clues naturally",
      "thinking": "Integrate world-building details with plot-relevant clues naturally - merge sensory environment development with fair play clue planting, use dual-purpose details where setting elements serve plot significance, apply zoom technique and sandwich method for organic discovery, layer clues at different visibility levels using three-times rule, weave cultural fabric with genre-specific elements, create living settings that participate in plot development, and maintain natural integration where 70% atmosphere supports 20% subtle significance and 10% important clues. Focus on seamless narrative fabric over mechanical insertion.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "unicode_character",
          "line": 291,
          "char": "±",
          "ord": 177,
          "message": "Unicode character '±' found at line 291"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{N}/chapters/ch{NNN}/versions/v02_dialogue_character.md",
          "{project}/book_{N}/chapters/ch{NNN}/versions/v03_world_clues.md"
        ],
        "temp_files": [
          "{provided_path}.tmp"
        ],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "1: Setting Detail as Clue\n**Before**: \nThe bakery was warm and smelled of cinnamon. There was a knife on the counter.",
          "2: Cultural Detail with Purpose\n**Before**:\nThe festival would have traditional foods and dancing.",
          "3: Environmental Storytelling\n**Before**:\nThe shop had been closed for two days.",
          "4: Natural Clue Discovery\n**Before**:\nShe found an important receipt in his pocket."
        ],
        "json_schemas": [],
        "validation_rules": [
          "DIRECTLY edit the content and save it",
          "potentially serve the plot:",
          "what clues/world details are needed",
          "actively modify the content:"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline",
          "atomic"
        ],
        "dependencies": [
          "foreshadowing"
        ],
        "error_handling": [
          "still dusted with flour from yesterday. Or was it yesterday?"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: READ REQUIRED FILES",
          "2: INTEGRATE WORLD & CLUES",
          "3: APPLY ALL WORLD & CLUE ENHANCEMENTS",
          "4: SAVE ENHANCED VERSION"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "- mystery_structure",
          "mystery) clues, red herrings, fair play elements",
          "applicable)",
          "what clues/world details are needed"
        ],
        "validation_logic": [
          "what clues/world details are needed"
        ],
        "business_rules": [
          "Confirm: \"[x] Outline requirements identified\"",
          "- First: Introduction (unnoticed)",
          "Second: Reminder (still unclear)",
          "Third: Revelation (significance clear)",
          "70% pure atmosphere",
          "20% subtle significance",
          "10% important clues",
          "All feeling natural"
        ],
        "success_criteria": [],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "high"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 1451,
      "line_count": 298
    },
    "world-context-updater": {
      "file": ".claude\\agents\\world-context-updater.md",
      "name": "world-context-updater",
      "type": "agent",
      "lines": 233,
      "description": "Incrementally updates world-building context from high-quality chapters",
      "thinking": "Update world-building context incrementally from high-quality chapters - verify chapter quality score >= 95 before learning, extract location descriptions with visual and sensory details, identify cultural practices and social dynamics, track environmental conditions and seasonal changes, merge details with existing context using timeline structure, maintain world consistency and preserve all historical details, monitor location relationships and temporal tracking, save comprehensive world.json with cumulative descriptions, and ensure rich sensory palette development. Focus on layering depth without replacing established world elements.",
      "tools": [
        "Read",
        "Write"
      ],
      "violations": [
        {
          "type": "double_backtick_path",
          "message": "Double backtick in path documentation"
        },
        {
          "type": "missing_io_documentation",
          "message": "Agent missing Input Requirements documentation"
        }
      ],
      "io_patterns": {
        "reads": [],
        "writes": [
          "{project}/book_{book}/chapters/ch{chapter}/quality_report.json",
          "{project}/book_{book}/bible.yaml",
          "{project}/book_{book}/context/world.json",
          "{project}/book_{book}/chapters/ch{chapter}/content.md",
          "{project}/book_{book}/context/world.json",
          "{project}/book_{book}/chapters/ch{chapter}/meta.json"
        ],
        "temp_files": [],
        "cache_files": [],
        "state_files": [],
        "env_dependencies": [],
        "api_calls": [],
        "external_services": []
      },
      "prompts": {
        "input_requirements": [],
        "output_format": [],
        "prompt_templates": [],
        "expected_inputs": [],
        "example_prompts": [
          "**",
          "- Casa Vista Verde Inn:*\n- Type: \"lodging\"\n- Timeline shows progression from Chapter 001 (three-story colonial) to Chapter 003 (hidden rooms discovered)\n- Cumulative description builds from \"welcoming but mysterious\" to \"historic charm hiding secrets\"",
          "relationships: inn_to_caldera (2 hour drive), inn_to_town (5 minute walk)\n- Maintain spatial consistency across chapters"
        ],
        "json_schemas": [],
        "validation_rules": [
          "rich sensory palette development",
          "Prerequisites",
          "chapter quality score >= 95 before learning, extract location descriptions with visual and sensory details, identify cultural practices and social dynamics, track environmental conditions and seasonal changes, merge details with existing context using timeline structure, maintain world consistency and preserve all historical details, monitor location relationships and temporal tracking, save comprehensive world",
          "chapter quality:**",
          "stay consistent"
        ]
      },
      "execution": {
        "patterns": [
          "pipeline"
        ],
        "dependencies": [],
        "error_handling": [
          "\"Chapter not qualified for context learning\"",
          "Handling"
        ],
        "retry_logic": [],
        "timeout_configs": [],
        "concurrency_limits": [],
        "performance_hints": []
      },
      "business": {
        "workflow_steps": [
          "1: Validate Prerequisites",
          "2: Load Existing Context",
          "3: Analyze Chapter Content",
          "4: Merge with Existing Context",
          "5: Track World Coherence",
          "6: Save Updated Context",
          "7: Mark Chapter as Learned"
        ],
        "decision_points": [
          "reading Bible, concentrate on",
          "quality_score >= 95",
          "< 95, ERROR",
          "if world.json exists",
          "missing, create initial structure"
        ],
        "validation_logic": [
          "chapter quality score >= 95 before learning, extract location descriptions with visual and sensory details, identify cultural practices and social dynamics, track environmental conditions and seasonal changes, merge details with existing context using timeline structure, maintain world consistency and preserve all historical details, monitor location relationships and temporal tracking, save comprehensive world.json with cumulative descriptions, and ensure rich sensory palette development. Focus on layering depth without replacing established world elements.",
          "Prerequisites",
          "chapter quality:**",
          "if world.json exists:**",
          "threshold)"
        ],
        "business_rules": [
          "world_building: settings, atmosphere, sensory details",
          "series_metadata: world consistency rules",
          "Established_facts preserve fundamental world constants",
          "Atmospheric_constants maintain consistent mood elements",
          "Rich location descriptions accumulated",
          "Cultural authenticity preserved",
          "Environmental continuity maintained",
          "Sensory details captured",
          "World feels increasingly real"
        ],
        "success_criteria": [
          "- Rich location descriptions accumulated"
        ],
        "failure_modes": []
      },
      "coordinator": null,
      "agents": [],
      "managed_agents": [],
      "model_hints": {
        "complexity": "medium"
      },
      "division_of_labor": {
        "issues": [],
        "role": "agent"
      },
      "word_count": 952,
      "line_count": 233
    }
  },
  "violations": [
    {
      "file": ".claude\\commands\\architecture-test.md",
      "type": "excessive_lines",
      "lines": 163,
      "limit": 120,
      "message": "Command exceeds 120 lines (163 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\architecture-test.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\parallel-test.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\bible-view.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\next.md",
      "type": "unicode_character",
      "line": 62,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 62",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\next.md",
      "type": "unicode_character",
      "line": 64,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 64",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\next.md",
      "type": "unicode_character",
      "line": 65,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 65",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\next.md",
      "type": "unicode_character",
      "line": 66,
      "char": "💡",
      "ord": 128161,
      "message": "Unicode character '💡' found at line 66",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 67,
      "char": "📈",
      "ord": 128200,
      "message": "Unicode character '📈' found at line 67",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 68,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 68",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 69,
      "char": "🔍",
      "ord": 128269,
      "message": "Unicode character '🔍' found at line 69",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 70,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 70",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 71,
      "char": "💡",
      "ord": 128161,
      "message": "Unicode character '💡' found at line 71",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 72,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 72",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\standup.md",
      "type": "unicode_character",
      "line": 73,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 73",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\status.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\commands\\novel\\system-check.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\archive-creator.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\archive-creator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\author-voice-signature-specialist.md",
      "type": "unicode_character",
      "line": 54,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 54",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\author-voice-signature-specialist.md",
      "type": "unicode_character",
      "line": 78,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 78",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\author-voice-signature-specialist.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-cache-updater.md",
      "type": "unicode_character",
      "line": 108,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 108",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-cache-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-reviewer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 245,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 245",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "unicode_character",
      "line": 255,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 255",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "excessive_lines",
      "lines": 279,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (279 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-view-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 9,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 9",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 30,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 30",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 100,
      "char": "项",
      "ord": 39033,
      "message": "Unicode character '项' found at line 100",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 103,
      "char": "📚",
      "ord": 128218,
      "message": "Unicode character '📚' found at line 103",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 106,
      "char": "标",
      "ord": 26631,
      "message": "Unicode character '标' found at line 106",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 108,
      "char": "类",
      "ord": 31867,
      "message": "Unicode character '类' found at line 108",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 114,
      "char": "👥",
      "ord": 128101,
      "message": "Unicode character '👥' found at line 114",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 116,
      "char": "中",
      "ord": 20013,
      "message": "Unicode character '中' found at line 116",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 117,
      "char": "角",
      "ord": 35282,
      "message": "Unicode character '角' found at line 117",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 118,
      "char": "性",
      "ord": 24615,
      "message": "Unicode character '性' found at line 118",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 119,
      "char": "发",
      "ord": 21457,
      "message": "Unicode character '发' found at line 119",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 122,
      "char": "📖",
      "ord": 128214,
      "message": "Unicode character '📖' found at line 122",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 124,
      "char": "主",
      "ord": 20027,
      "message": "Unicode character '主' found at line 124",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 125,
      "char": "关",
      "ord": 20851,
      "message": "Unicode character '关' found at line 125",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 128,
      "char": "🌍",
      "ord": 127757,
      "message": "Unicode character '🌍' found at line 128",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 130,
      "char": "场",
      "ord": 22330,
      "message": "Unicode character '场' found at line 130",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 131,
      "char": "地",
      "ord": 22320,
      "message": "Unicode character '地' found at line 131",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 136,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 136",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 138,
      "char": "完",
      "ord": 23436,
      "message": "Unicode character '完' found at line 138",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 139,
      "char": "已",
      "ord": 24050,
      "message": "Unicode character '已' found at line 139",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 140,
      "char": "已",
      "ord": 24050,
      "message": "Unicode character '已' found at line 140",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 141,
      "char": "剧",
      "ord": 21095,
      "message": "Unicode character '剧' found at line 141",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 143,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 143",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 145,
      "char": "建",
      "ord": 24314,
      "message": "Unicode character '建' found at line 145",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 147,
      "char": "💡",
      "ord": 128161,
      "message": "Unicode character '💡' found at line 147",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 149,
      "char": "具",
      "ord": 20855,
      "message": "Unicode character '具' found at line 149",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 151,
      "char": "增",
      "ord": 22686,
      "message": "Unicode character '增' found at line 151",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 158,
      "char": "📤",
      "ord": 128228,
      "message": "Unicode character '📤' found at line 158",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 160,
      "char": "创",
      "ord": 21019,
      "message": "Unicode character '创' found at line 160",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 162,
      "char": "使",
      "ord": 20351,
      "message": "Unicode character '使' found at line 162",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 164,
      "char": "查",
      "ord": 26597,
      "message": "Unicode character '查' found at line 164",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 166,
      "char": "获",
      "ord": 33719,
      "message": "Unicode character '获' found at line 166",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "unicode_character",
      "line": 281,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 281",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-complete-coordinator.md",
      "type": "excessive_lines",
      "lines": 471,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (471 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-complete-coordinator.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-complete-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-outline-architect.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-outline-reviewer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\book-pacing-analyzer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\brainstorming-completeness-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-planning-coordinator.md",
      "type": "excessive_lines",
      "lines": 304,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (304 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-planning-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-scanner.md",
      "type": "unicode_character",
      "line": 165,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 165",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-scanner.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 278,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 278",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "unicode_character",
      "line": 288,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 288",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "excessive_lines",
      "lines": 311,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (311 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\chapter-start-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\characters-context-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\claude-code-expert.md",
      "type": "excessive_lines",
      "lines": 675,
      "limit": 500,
      "message": "Agent exceeds 500 lines (675 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\claude-code-expert.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\claude-code-expert.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\clue-integration-specialist.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 121,
      "char": "🎉",
      "ord": 127881,
      "message": "Unicode character '🎉' found at line 121",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 139,
      "char": "🏆",
      "ord": 127942,
      "message": "Unicode character '🏆' found at line 139",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 148,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 148",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 193,
      "char": "🌟",
      "ord": 127775,
      "message": "Unicode character '🌟' found at line 193",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 195,
      "char": "🎊",
      "ord": 127882,
      "message": "Unicode character '🎊' found at line 195",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "unicode_character",
      "line": 197,
      "char": "👏",
      "ord": 128079,
      "message": "Unicode character '👏' found at line 197",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\completion-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 327,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 327",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "unicode_character",
      "line": 337,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 337",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "excessive_lines",
      "lines": 360,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (360 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-sync-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-validator.md",
      "type": "unicode_character",
      "line": 105,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 105",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\context-validator.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\continuity-final-checker.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\continuity-guard-specialist.md",
      "type": "unicode_character",
      "line": 318,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 318",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\cozy-mystery-specialist.md",
      "type": "unicode_character",
      "line": 284,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 284",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\cross-chapter-flow-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\dialogue-character-specialist.md",
      "type": "unicode_character",
      "line": 279,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 279",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\emotion-specialist.md",
      "type": "unicode_character",
      "line": 289,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 289",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\emotional-trigger-specialist.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\entity-dictionary-creator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\entity-dictionary-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\entity-validator.md",
      "type": "unicode_character",
      "line": 105,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 105",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\entity-validator.md",
      "type": "unicode_character",
      "line": 113,
      "char": "🆕",
      "ord": 127381,
      "message": "Unicode character '🆕' found at line 113",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\extend-series-coordinator.md",
      "type": "excessive_lines",
      "lines": 498,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (498 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\extend-series-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\fantasy-specialist.md",
      "type": "unicode_character",
      "line": 339,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 339",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\final-quality-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\foreshadowing-specialist.md",
      "type": "unicode_character",
      "line": 222,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 222",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\github-sync-coordinator.md",
      "type": "unicode_character",
      "line": 175,
      "char": "📖",
      "ord": 128214,
      "message": "Unicode character '📖' found at line 175",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\github-sync-coordinator.md",
      "type": "excessive_lines",
      "lines": 440,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (440 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\github-sync-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\humanization-specialist.md",
      "type": "unicode_character",
      "line": 118,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 118",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\knowledge-base-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\manuscript-assembler.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\metadata-generator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-book-coordinator.md",
      "type": "excessive_lines",
      "lines": 435,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (435 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-book-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-chapter-coordinator.md",
      "type": "excessive_lines",
      "lines": 396,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (396 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-chapter-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 268,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 268",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "unicode_character",
      "line": 278,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 278",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "excessive_lines",
      "lines": 301,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (301 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\next-recommendation-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "unicode_character",
      "line": 111,
      "char": "每",
      "ord": 27599,
      "message": "Unicode character '每' found at line 111",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "unicode_character",
      "line": 507,
      "char": "具",
      "ord": 20855,
      "message": "Unicode character '具' found at line 507",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "unicode_character",
      "line": 508,
      "char": "关",
      "ord": 20851,
      "message": "Unicode character '关' found at line 508",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "excessive_lines",
      "lines": 530,
      "limit": 500,
      "message": "Agent exceeds 500 lines (530 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\outline-generator.md",
      "type": "unicode_character",
      "line": 66,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 66",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\plot-context-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\plot-hole-validator.md",
      "type": "unicode_character",
      "line": 325,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 325",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\plot-hole-validator.md",
      "type": "unicode_character",
      "line": 335,
      "char": "📊",
      "ord": 128202,
      "message": "Unicode character '📊' found at line 335",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\prerequisites-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-initializer.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-initializer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 395,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 395",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "unicode_character",
      "line": 405,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 405",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "excessive_lines",
      "lines": 428,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (428 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-new-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-stats-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-switch-coordinator.md",
      "type": "excessive_lines",
      "lines": 335,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (335 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\project-switch-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\prose-craft-specialist.md",
      "type": "unicode_character",
      "line": 160,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 160",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-check-cross-coordinator.md",
      "type": "excessive_lines",
      "lines": 424,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (424 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-check-cross-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-check-individual-coordinator.md",
      "type": "excessive_lines",
      "lines": 400,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (400 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-check-individual-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-gate-validator.md",
      "type": "unicode_character",
      "line": 204,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 204",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-gate-validator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 67,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 67",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 68,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 68",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 69,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 69",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 70,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 70",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 71,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 71",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 72,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 72",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 75,
      "char": "█",
      "ord": 9608,
      "message": "Unicode character '█' found at line 75",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 154,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 154",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "unicode_character",
      "line": 155,
      "char": "️",
      "ord": 65039,
      "message": "Unicode character '️' found at line 155",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\report-deduplication-specialist.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\romance-specialist.md",
      "type": "unicode_character",
      "line": 327,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 327",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\scene-generator.md",
      "type": "unicode_character",
      "line": 140,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 140",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\scene-generator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\series-brainstormer.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\series-brainstormer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\series-progress-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\smart-fix-coordinator.md",
      "type": "excessive_lines",
      "lines": 401,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (401 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\smart-fix-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\smart-fix-cross-coordinator.md",
      "type": "excessive_lines",
      "lines": 406,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (406 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\smart-fix-cross-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\standup-coordinator.md",
      "type": "excessive_lines",
      "lines": 442,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (442 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\standup-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 10,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 10",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 15,
      "char": "🧠",
      "ord": 129504,
      "message": "Unicode character '🧠' found at line 15",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 17,
      "char": "🔴",
      "ord": 128308,
      "message": "Unicode character '🔴' found at line 17",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 25,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 25",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 256,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 256",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "unicode_character",
      "line": 266,
      "char": "📏",
      "ord": 128207,
      "message": "Unicode character '📏' found at line 266",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "excessive_lines",
      "lines": 289,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (289 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 4,
      "char": "🚨",
      "ord": 128680,
      "message": "Unicode character '🚨' found at line 4",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 9,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 9",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 30,
      "char": "📋",
      "ord": 128203,
      "message": "Unicode character '📋' found at line 30",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 139,
      "char": "╔",
      "ord": 9556,
      "message": "Unicode character '╔' found at line 139",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 140,
      "char": "║",
      "ord": 9553,
      "message": "Unicode character '║' found at line 140",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 141,
      "char": "║",
      "ord": 9553,
      "message": "Unicode character '║' found at line 141",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 142,
      "char": "╚",
      "ord": 9562,
      "message": "Unicode character '╚' found at line 142",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 144,
      "char": "📖",
      "ord": 128214,
      "message": "Unicode character '📖' found at line 144",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 145,
      "char": "📚",
      "ord": 128218,
      "message": "Unicode character '📚' found at line 145",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 146,
      "char": "📅",
      "ord": 128197,
      "message": "Unicode character '📅' found at line 146",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 147,
      "char": "⏱",
      "ord": 9201,
      "message": "Unicode character '⏱' found at line 147",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 152,
      "char": "进",
      "ord": 36827,
      "message": "Unicode character '进' found at line 152",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 153,
      "char": "─",
      "ord": 9472,
      "message": "Unicode character '─' found at line 153",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 154,
      "char": "章",
      "ord": 31456,
      "message": "Unicode character '章' found at line 154",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 155,
      "char": "章",
      "ord": 31456,
      "message": "Unicode character '章' found at line 155",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 157,
      "char": "字",
      "ord": 23383,
      "message": "Unicode character '字' found at line 157",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 158,
      "char": "平",
      "ord": 24179,
      "message": "Unicode character '平' found at line 158",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 160,
      "char": "当",
      "ord": 24403,
      "message": "Unicode character '当' found at line 160",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 161,
      "char": "状",
      "ord": 29366,
      "message": "Unicode character '状' found at line 161",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 166,
      "char": "质",
      "ord": 36136,
      "message": "Unicode character '质' found at line 166",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 167,
      "char": "─",
      "ord": 9472,
      "message": "Unicode character '─' found at line 167",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 168,
      "char": "平",
      "ord": 24179,
      "message": "Unicode character '平' found at line 168",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 169,
      "char": "一",
      "ord": 19968,
      "message": "Unicode character '一' found at line 169",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 170,
      "char": "上",
      "ord": 19978,
      "message": "Unicode character '上' found at line 170",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 184,
      "char": "💡",
      "ord": 128161,
      "message": "Unicode character '💡' found at line 184",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 185,
      "char": "写",
      "ord": 20889,
      "message": "Unicode character '写' found at line 185",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 186,
      "char": "质",
      "ord": 36136,
      "message": "Unicode character '质' found at line 186",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 187,
      "char": "查",
      "ord": 26597,
      "message": "Unicode character '查' found at line 187",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 188,
      "char": "智",
      "ord": 26234,
      "message": "Unicode character '智' found at line 188",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "unicode_character",
      "line": 282,
      "char": "🎯",
      "ord": 127919,
      "message": "Unicode character '🎯' found at line 282",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-analyzer.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-check-coordinator.md",
      "type": "excessive_lines",
      "lines": 311,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (311 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-check-coordinator.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-check-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-reporter.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\system-scanner.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-architecture-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-architecture-coordinator.md",
      "type": "coordinator_executes",
      "message": "Coordinator has execution logic (should only plan)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-cleanup-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-content-draft-agent.md",
      "type": "timestamp_placeholder",
      "message": "Timestamp placeholder not replaced with actual timestamp",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-content-draft-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-content-enhancer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-content-finalizer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-content-generation-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-data-analysis-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-data-analyzer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-data-parser-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-environment-setup-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-human-in-loop-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-human-in-loop-coordinator.md",
      "type": "coordinator_no_json_plan",
      "message": "Coordinator should return JSON execution plan",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-a.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-b.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-c.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-parallel-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-parallel-coordinator.md",
      "type": "coordinator_no_json_plan",
      "message": "Coordinator should return JSON execution plan",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-python-analyzer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-python-generator-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-python-pipeline-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-python-transformer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-rejection-logger-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-report-generator-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-state-updater-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-summary-generator-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\test-workflow-initializer-agent.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\thriller-specialist.md",
      "type": "unicode_character",
      "line": 304,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 304",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\transition-planner.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\unified-update-pipeline-coordinator.md",
      "type": "excessive_lines",
      "lines": 371,
      "limit": 250,
      "message": "Coordinator exceeds 250 lines (371 lines)",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\unified-update-pipeline-coordinator.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\world-clue-specialist.md",
      "type": "unicode_character",
      "line": 291,
      "char": "±",
      "ord": 177,
      "message": "Unicode character '±' found at line 291",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\world-context-updater.md",
      "type": "double_backtick_path",
      "message": "Double backtick in path documentation",
      "severity": "major"
    },
    {
      "file": ".claude\\agents\\archive-creator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\author-voice-signature-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-architect.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-cache-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-compliance-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-reviewer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\bible-viewer.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\book-outline-architect.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\book-outline-reviewer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\book-pacing-analyzer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\book-pacing-analyzer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\brainstorming-completeness-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\chapter-meta-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\chapter-scanner.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\chapter-scanner.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\character-voice-cross-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\character-voice-cross-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\characters-context-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\claude-code-expert.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\clue-integration-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\completion-certifier.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\completion-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\context-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\context-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\continuity-final-checker.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\continuity-guard-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\cozy-mystery-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\cross-chapter-flow-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\cross-chapter-flow-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\current-project-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\dialogue-character-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\emotion-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\emotion-weaver-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\emotional-trigger-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\entity-dictionary-creator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\entity-dictionary-creator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\entity-dictionary-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\entity-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\entity-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\fantasy-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\final-quality-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\foreshadowing-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\humanization-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\humor-injection-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\knowledge-base-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\manuscript-assembler.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\metadata-generator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\novel-quality-process-analyzer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\outline-generator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\plot-context-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\plot-hole-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\prerequisites-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\prerequisites-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\project-initializer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\project-stats-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\prose-craft-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\quality-gate-validator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\quality-gate-validator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\quality-report-generator.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\quality-scorer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\report-deduplication-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\romance-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\scene-generator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\series-bible-architect.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\series-bible-reviewer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\series-brainstormer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\series-brainstormer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\series-progress-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\status-report-generator.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\story-thread-tracker.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\story-thread-tracker.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\system-analyzer.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\system-reporter.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\system-scanner.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-cleanup-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-cleanup-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-content-draft-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-content-enhancer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-content-finalizer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-data-analyzer-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-data-analyzer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-data-parser-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-data-parser-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-environment-setup-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-environment-setup-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-execution-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-execution-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-io-patterns-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-a.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-a.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-b.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-b.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-c.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-parallel-agent-c.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-python-analyzer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-python-generator-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-python-transformer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-rejection-logger-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-report-generator-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-report-generator-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-result-collector-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-result-collector-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-state-updater-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-summary-generator-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-summary-generator-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-validation-agent.md",
      "type": "agent_acts_as_coordinator",
      "message": "Agent has coordinator-like orchestration behavior",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\test-validation-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\test-workflow-initializer-agent.md",
      "type": "missing_thinking_field",
      "severity": "minor",
      "message": "Agent missing thinking field (recommended)"
    },
    {
      "file": ".claude\\agents\\thriller-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\transition-continuity-reviewer.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\transition-planner.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\world-building-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\world-clue-specialist.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "file": ".claude\\agents\\world-context-updater.md",
      "type": "missing_io_documentation",
      "message": "Agent missing Input Requirements documentation",
      "severity": "minor"
    },
    {
      "type": "orphan_coordinator",
      "component": "chapter-planning-coordinator",
      "message": "Coordinator chapter-planning-coordinator is not called by any command",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "author-voice-signature-specialist",
      "message": "Agent author-voice-signature-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "book-outline-reviewer",
      "message": "Agent book-outline-reviewer is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "brainstorming-completeness-validator",
      "message": "Agent brainstorming-completeness-validator is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "clue-integration-specialist",
      "message": "Agent clue-integration-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "context-validator",
      "message": "Agent context-validator is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "current-project-updater",
      "message": "Agent current-project-updater is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "emotional-trigger-specialist",
      "message": "Agent emotional-trigger-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "humanization-specialist",
      "message": "Agent humanization-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "humor-injection-specialist",
      "message": "Agent humor-injection-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "knowledge-base-updater",
      "message": "Agent knowledge-base-updater is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "novel-quality-process-analyzer",
      "message": "Agent novel-quality-process-analyzer is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "report-deduplication-specialist",
      "message": "Agent report-deduplication-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "series-bible-architect",
      "message": "Agent series-bible-architect is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "test-rejection-logger-agent",
      "message": "Agent test-rejection-logger-agent is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "test-state-updater-agent",
      "message": "Agent test-state-updater-agent is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "world-building-specialist",
      "message": "Agent world-building-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    },
    {
      "type": "orphan_agent",
      "component": "world-clue-specialist",
      "message": "Agent world-clue-specialist is not called by any coordinator or agent",
      "detection": "enhanced_v4",
      "severity": "info"
    }
  ],
  "violations_by_severity": {
    "critical": [],
    "major": [
      {
        "file": ".claude\\commands\\architecture-test.md",
        "type": "excessive_lines",
        "lines": 163,
        "limit": 120,
        "message": "Command exceeds 120 lines (163 lines)"
      },
      {
        "file": ".claude\\commands\\architecture-test.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\commands\\parallel-test.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\commands\\novel\\bible-view.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\commands\\novel\\next.md",
        "type": "unicode_character",
        "line": 62,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 62"
      },
      {
        "file": ".claude\\commands\\novel\\next.md",
        "type": "unicode_character",
        "line": 64,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 64"
      },
      {
        "file": ".claude\\commands\\novel\\next.md",
        "type": "unicode_character",
        "line": 65,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 65"
      },
      {
        "file": ".claude\\commands\\novel\\next.md",
        "type": "unicode_character",
        "line": 66,
        "char": "💡",
        "ord": 128161,
        "message": "Unicode character '💡' found at line 66"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 67,
        "char": "📈",
        "ord": 128200,
        "message": "Unicode character '📈' found at line 67"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 68,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 68"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 69,
        "char": "🔍",
        "ord": 128269,
        "message": "Unicode character '🔍' found at line 69"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 70,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 70"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 71,
        "char": "💡",
        "ord": 128161,
        "message": "Unicode character '💡' found at line 71"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 72,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 72"
      },
      {
        "file": ".claude\\commands\\novel\\standup.md",
        "type": "unicode_character",
        "line": 73,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 73"
      },
      {
        "file": ".claude\\commands\\novel\\status.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\commands\\novel\\system-check.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\archive-creator.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\archive-creator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\author-voice-signature-specialist.md",
        "type": "unicode_character",
        "line": 54,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 54"
      },
      {
        "file": ".claude\\agents\\author-voice-signature-specialist.md",
        "type": "unicode_character",
        "line": 78,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 78"
      },
      {
        "file": ".claude\\agents\\author-voice-signature-specialist.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\bible-cache-updater.md",
        "type": "unicode_character",
        "line": 108,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 108"
      },
      {
        "file": ".claude\\agents\\bible-cache-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\bible-reviewer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 245,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 245"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "unicode_character",
        "line": 255,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 255"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "excessive_lines",
        "lines": 279,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (279 lines)"
      },
      {
        "file": ".claude\\agents\\bible-view-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 9,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 9"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 30,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 30"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 100,
        "char": "项",
        "ord": 39033,
        "message": "Unicode character '项' found at line 100"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 103,
        "char": "📚",
        "ord": 128218,
        "message": "Unicode character '📚' found at line 103"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 106,
        "char": "标",
        "ord": 26631,
        "message": "Unicode character '标' found at line 106"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 108,
        "char": "类",
        "ord": 31867,
        "message": "Unicode character '类' found at line 108"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 114,
        "char": "👥",
        "ord": 128101,
        "message": "Unicode character '👥' found at line 114"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 116,
        "char": "中",
        "ord": 20013,
        "message": "Unicode character '中' found at line 116"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 117,
        "char": "角",
        "ord": 35282,
        "message": "Unicode character '角' found at line 117"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 118,
        "char": "性",
        "ord": 24615,
        "message": "Unicode character '性' found at line 118"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 119,
        "char": "发",
        "ord": 21457,
        "message": "Unicode character '发' found at line 119"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 122,
        "char": "📖",
        "ord": 128214,
        "message": "Unicode character '📖' found at line 122"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 124,
        "char": "主",
        "ord": 20027,
        "message": "Unicode character '主' found at line 124"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 125,
        "char": "关",
        "ord": 20851,
        "message": "Unicode character '关' found at line 125"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 128,
        "char": "🌍",
        "ord": 127757,
        "message": "Unicode character '🌍' found at line 128"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 130,
        "char": "场",
        "ord": 22330,
        "message": "Unicode character '场' found at line 130"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 131,
        "char": "地",
        "ord": 22320,
        "message": "Unicode character '地' found at line 131"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 136,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 136"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 138,
        "char": "完",
        "ord": 23436,
        "message": "Unicode character '完' found at line 138"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 139,
        "char": "已",
        "ord": 24050,
        "message": "Unicode character '已' found at line 139"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 140,
        "char": "已",
        "ord": 24050,
        "message": "Unicode character '已' found at line 140"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 141,
        "char": "剧",
        "ord": 21095,
        "message": "Unicode character '剧' found at line 141"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 143,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 143"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 145,
        "char": "建",
        "ord": 24314,
        "message": "Unicode character '建' found at line 145"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 147,
        "char": "💡",
        "ord": 128161,
        "message": "Unicode character '💡' found at line 147"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 149,
        "char": "具",
        "ord": 20855,
        "message": "Unicode character '具' found at line 149"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 151,
        "char": "增",
        "ord": 22686,
        "message": "Unicode character '增' found at line 151"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 158,
        "char": "📤",
        "ord": 128228,
        "message": "Unicode character '📤' found at line 158"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 160,
        "char": "创",
        "ord": 21019,
        "message": "Unicode character '创' found at line 160"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 162,
        "char": "使",
        "ord": 20351,
        "message": "Unicode character '使' found at line 162"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 164,
        "char": "查",
        "ord": 26597,
        "message": "Unicode character '查' found at line 164"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 166,
        "char": "获",
        "ord": 33719,
        "message": "Unicode character '获' found at line 166"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "unicode_character",
        "line": 281,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 281"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\book-complete-coordinator.md",
        "type": "excessive_lines",
        "lines": 471,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (471 lines)"
      },
      {
        "file": ".claude\\agents\\book-complete-coordinator.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\book-complete-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\book-outline-architect.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\book-outline-reviewer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\book-pacing-analyzer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\brainstorming-completeness-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\chapter-planning-coordinator.md",
        "type": "excessive_lines",
        "lines": 304,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (304 lines)"
      },
      {
        "file": ".claude\\agents\\chapter-planning-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\chapter-scanner.md",
        "type": "unicode_character",
        "line": 165,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 165"
      },
      {
        "file": ".claude\\agents\\chapter-scanner.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 278,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 278"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "unicode_character",
        "line": 288,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 288"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "excessive_lines",
        "lines": 311,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (311 lines)"
      },
      {
        "file": ".claude\\agents\\chapter-start-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\characters-context-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\claude-code-expert.md",
        "type": "excessive_lines",
        "lines": 675,
        "limit": 500,
        "message": "Agent exceeds 500 lines (675 lines)"
      },
      {
        "file": ".claude\\agents\\claude-code-expert.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\claude-code-expert.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\clue-integration-specialist.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 121,
        "char": "🎉",
        "ord": 127881,
        "message": "Unicode character '🎉' found at line 121"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 139,
        "char": "🏆",
        "ord": 127942,
        "message": "Unicode character '🏆' found at line 139"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 148,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 148"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 193,
        "char": "🌟",
        "ord": 127775,
        "message": "Unicode character '🌟' found at line 193"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 195,
        "char": "🎊",
        "ord": 127882,
        "message": "Unicode character '🎊' found at line 195"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "unicode_character",
        "line": 197,
        "char": "👏",
        "ord": 128079,
        "message": "Unicode character '👏' found at line 197"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\completion-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 327,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 327"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "unicode_character",
        "line": 337,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 337"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "excessive_lines",
        "lines": 360,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (360 lines)"
      },
      {
        "file": ".claude\\agents\\context-sync-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\context-validator.md",
        "type": "unicode_character",
        "line": 105,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 105"
      },
      {
        "file": ".claude\\agents\\context-validator.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\continuity-final-checker.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\continuity-guard-specialist.md",
        "type": "unicode_character",
        "line": 318,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 318"
      },
      {
        "file": ".claude\\agents\\cozy-mystery-specialist.md",
        "type": "unicode_character",
        "line": 284,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 284"
      },
      {
        "file": ".claude\\agents\\cross-chapter-flow-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\dialogue-character-specialist.md",
        "type": "unicode_character",
        "line": 279,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 279"
      },
      {
        "file": ".claude\\agents\\emotion-specialist.md",
        "type": "unicode_character",
        "line": 289,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 289"
      },
      {
        "file": ".claude\\agents\\emotional-trigger-specialist.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\entity-dictionary-creator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\entity-dictionary-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\entity-validator.md",
        "type": "unicode_character",
        "line": 105,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 105"
      },
      {
        "file": ".claude\\agents\\entity-validator.md",
        "type": "unicode_character",
        "line": 113,
        "char": "🆕",
        "ord": 127381,
        "message": "Unicode character '🆕' found at line 113"
      },
      {
        "file": ".claude\\agents\\extend-series-coordinator.md",
        "type": "excessive_lines",
        "lines": 498,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (498 lines)"
      },
      {
        "file": ".claude\\agents\\extend-series-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\fantasy-specialist.md",
        "type": "unicode_character",
        "line": 339,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 339"
      },
      {
        "file": ".claude\\agents\\final-quality-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\foreshadowing-specialist.md",
        "type": "unicode_character",
        "line": 222,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 222"
      },
      {
        "file": ".claude\\agents\\github-sync-coordinator.md",
        "type": "unicode_character",
        "line": 175,
        "char": "📖",
        "ord": 128214,
        "message": "Unicode character '📖' found at line 175"
      },
      {
        "file": ".claude\\agents\\github-sync-coordinator.md",
        "type": "excessive_lines",
        "lines": 440,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (440 lines)"
      },
      {
        "file": ".claude\\agents\\github-sync-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\humanization-specialist.md",
        "type": "unicode_character",
        "line": 118,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 118"
      },
      {
        "file": ".claude\\agents\\knowledge-base-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\manuscript-assembler.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\metadata-generator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\next-book-coordinator.md",
        "type": "excessive_lines",
        "lines": 435,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (435 lines)"
      },
      {
        "file": ".claude\\agents\\next-book-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\next-chapter-coordinator.md",
        "type": "excessive_lines",
        "lines": 396,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (396 lines)"
      },
      {
        "file": ".claude\\agents\\next-chapter-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 268,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 268"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "unicode_character",
        "line": 278,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 278"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "excessive_lines",
        "lines": 301,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (301 lines)"
      },
      {
        "file": ".claude\\agents\\next-recommendation-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "unicode_character",
        "line": 111,
        "char": "每",
        "ord": 27599,
        "message": "Unicode character '每' found at line 111"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "unicode_character",
        "line": 507,
        "char": "具",
        "ord": 20855,
        "message": "Unicode character '具' found at line 507"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "unicode_character",
        "line": 508,
        "char": "关",
        "ord": 20851,
        "message": "Unicode character '关' found at line 508"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "excessive_lines",
        "lines": 530,
        "limit": 500,
        "message": "Agent exceeds 500 lines (530 lines)"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\outline-generator.md",
        "type": "unicode_character",
        "line": 66,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 66"
      },
      {
        "file": ".claude\\agents\\plot-context-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\plot-hole-validator.md",
        "type": "unicode_character",
        "line": 325,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 325"
      },
      {
        "file": ".claude\\agents\\plot-hole-validator.md",
        "type": "unicode_character",
        "line": 335,
        "char": "📊",
        "ord": 128202,
        "message": "Unicode character '📊' found at line 335"
      },
      {
        "file": ".claude\\agents\\prerequisites-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\project-initializer.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\project-initializer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 395,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 395"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "unicode_character",
        "line": 405,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 405"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "excessive_lines",
        "lines": 428,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (428 lines)"
      },
      {
        "file": ".claude\\agents\\project-new-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\project-stats-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\project-switch-coordinator.md",
        "type": "excessive_lines",
        "lines": 335,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (335 lines)"
      },
      {
        "file": ".claude\\agents\\project-switch-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\prose-craft-specialist.md",
        "type": "unicode_character",
        "line": 160,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 160"
      },
      {
        "file": ".claude\\agents\\quality-check-cross-coordinator.md",
        "type": "excessive_lines",
        "lines": 424,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (424 lines)"
      },
      {
        "file": ".claude\\agents\\quality-check-cross-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\quality-check-individual-coordinator.md",
        "type": "excessive_lines",
        "lines": 400,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (400 lines)"
      },
      {
        "file": ".claude\\agents\\quality-check-individual-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\quality-gate-validator.md",
        "type": "unicode_character",
        "line": 204,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 204"
      },
      {
        "file": ".claude\\agents\\quality-gate-validator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 67,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 67"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 68,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 68"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 69,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 69"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 70,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 70"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 71,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 71"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 72,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 72"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 75,
        "char": "█",
        "ord": 9608,
        "message": "Unicode character '█' found at line 75"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 154,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 154"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "unicode_character",
        "line": 155,
        "char": "️",
        "ord": 65039,
        "message": "Unicode character '️' found at line 155"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\report-deduplication-specialist.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\romance-specialist.md",
        "type": "unicode_character",
        "line": 327,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 327"
      },
      {
        "file": ".claude\\agents\\scene-generator.md",
        "type": "unicode_character",
        "line": 140,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 140"
      },
      {
        "file": ".claude\\agents\\scene-generator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\series-brainstormer.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\series-brainstormer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\series-progress-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\smart-fix-coordinator.md",
        "type": "excessive_lines",
        "lines": 401,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (401 lines)"
      },
      {
        "file": ".claude\\agents\\smart-fix-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\smart-fix-cross-coordinator.md",
        "type": "excessive_lines",
        "lines": 406,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (406 lines)"
      },
      {
        "file": ".claude\\agents\\smart-fix-cross-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\standup-coordinator.md",
        "type": "excessive_lines",
        "lines": 442,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (442 lines)"
      },
      {
        "file": ".claude\\agents\\standup-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 10,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 10"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 15,
        "char": "🧠",
        "ord": 129504,
        "message": "Unicode character '🧠' found at line 15"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 17,
        "char": "🔴",
        "ord": 128308,
        "message": "Unicode character '🔴' found at line 17"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 25,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 25"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 256,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 256"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "unicode_character",
        "line": 266,
        "char": "📏",
        "ord": 128207,
        "message": "Unicode character '📏' found at line 266"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "excessive_lines",
        "lines": 289,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (289 lines)"
      },
      {
        "file": ".claude\\agents\\status-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 4,
        "char": "🚨",
        "ord": 128680,
        "message": "Unicode character '🚨' found at line 4"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 9,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 9"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 30,
        "char": "📋",
        "ord": 128203,
        "message": "Unicode character '📋' found at line 30"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 139,
        "char": "╔",
        "ord": 9556,
        "message": "Unicode character '╔' found at line 139"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 140,
        "char": "║",
        "ord": 9553,
        "message": "Unicode character '║' found at line 140"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 141,
        "char": "║",
        "ord": 9553,
        "message": "Unicode character '║' found at line 141"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 142,
        "char": "╚",
        "ord": 9562,
        "message": "Unicode character '╚' found at line 142"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 144,
        "char": "📖",
        "ord": 128214,
        "message": "Unicode character '📖' found at line 144"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 145,
        "char": "📚",
        "ord": 128218,
        "message": "Unicode character '📚' found at line 145"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 146,
        "char": "📅",
        "ord": 128197,
        "message": "Unicode character '📅' found at line 146"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 147,
        "char": "⏱",
        "ord": 9201,
        "message": "Unicode character '⏱' found at line 147"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 152,
        "char": "进",
        "ord": 36827,
        "message": "Unicode character '进' found at line 152"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 153,
        "char": "─",
        "ord": 9472,
        "message": "Unicode character '─' found at line 153"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 154,
        "char": "章",
        "ord": 31456,
        "message": "Unicode character '章' found at line 154"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 155,
        "char": "章",
        "ord": 31456,
        "message": "Unicode character '章' found at line 155"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 157,
        "char": "字",
        "ord": 23383,
        "message": "Unicode character '字' found at line 157"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 158,
        "char": "平",
        "ord": 24179,
        "message": "Unicode character '平' found at line 158"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 160,
        "char": "当",
        "ord": 24403,
        "message": "Unicode character '当' found at line 160"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 161,
        "char": "状",
        "ord": 29366,
        "message": "Unicode character '状' found at line 161"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 166,
        "char": "质",
        "ord": 36136,
        "message": "Unicode character '质' found at line 166"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 167,
        "char": "─",
        "ord": 9472,
        "message": "Unicode character '─' found at line 167"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 168,
        "char": "平",
        "ord": 24179,
        "message": "Unicode character '平' found at line 168"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 169,
        "char": "一",
        "ord": 19968,
        "message": "Unicode character '一' found at line 169"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 170,
        "char": "上",
        "ord": 19978,
        "message": "Unicode character '上' found at line 170"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 184,
        "char": "💡",
        "ord": 128161,
        "message": "Unicode character '💡' found at line 184"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 185,
        "char": "写",
        "ord": 20889,
        "message": "Unicode character '写' found at line 185"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 186,
        "char": "质",
        "ord": 36136,
        "message": "Unicode character '质' found at line 186"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 187,
        "char": "查",
        "ord": 26597,
        "message": "Unicode character '查' found at line 187"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 188,
        "char": "智",
        "ord": 26234,
        "message": "Unicode character '智' found at line 188"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "unicode_character",
        "line": 282,
        "char": "🎯",
        "ord": 127919,
        "message": "Unicode character '🎯' found at line 282"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\system-analyzer.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\system-check-coordinator.md",
        "type": "excessive_lines",
        "lines": 311,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (311 lines)"
      },
      {
        "file": ".claude\\agents\\system-check-coordinator.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\system-check-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\system-reporter.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\system-scanner.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-architecture-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-architecture-coordinator.md",
        "type": "coordinator_executes",
        "message": "Coordinator has execution logic (should only plan)"
      },
      {
        "file": ".claude\\agents\\test-cleanup-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-content-draft-agent.md",
        "type": "timestamp_placeholder",
        "message": "Timestamp placeholder not replaced with actual timestamp"
      },
      {
        "file": ".claude\\agents\\test-content-draft-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-content-enhancer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-content-finalizer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-content-generation-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-data-analysis-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-data-analyzer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-data-parser-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-environment-setup-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-human-in-loop-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-human-in-loop-coordinator.md",
        "type": "coordinator_no_json_plan",
        "message": "Coordinator should return JSON execution plan"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-a.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-b.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-c.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-parallel-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-parallel-coordinator.md",
        "type": "coordinator_no_json_plan",
        "message": "Coordinator should return JSON execution plan"
      },
      {
        "file": ".claude\\agents\\test-python-analyzer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-python-generator-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-python-pipeline-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-python-transformer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-rejection-logger-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-report-generator-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-state-updater-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-summary-generator-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\test-workflow-initializer-agent.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\thriller-specialist.md",
        "type": "unicode_character",
        "line": 304,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 304"
      },
      {
        "file": ".claude\\agents\\transition-planner.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\unified-update-pipeline-coordinator.md",
        "type": "excessive_lines",
        "lines": 371,
        "limit": 250,
        "message": "Coordinator exceeds 250 lines (371 lines)"
      },
      {
        "file": ".claude\\agents\\unified-update-pipeline-coordinator.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      },
      {
        "file": ".claude\\agents\\world-clue-specialist.md",
        "type": "unicode_character",
        "line": 291,
        "char": "±",
        "ord": 177,
        "message": "Unicode character '±' found at line 291"
      },
      {
        "file": ".claude\\agents\\world-context-updater.md",
        "type": "double_backtick_path",
        "message": "Double backtick in path documentation"
      }
    ],
    "minor": [
      {
        "file": ".claude\\agents\\archive-creator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\author-voice-signature-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\bible-architect.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\bible-cache-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\bible-compliance-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\bible-reviewer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\bible-viewer.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\book-outline-architect.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\book-outline-reviewer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\book-pacing-analyzer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\book-pacing-analyzer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\brainstorming-completeness-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\chapter-meta-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\chapter-scanner.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\chapter-scanner.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\character-voice-cross-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\character-voice-cross-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\characters-context-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\claude-code-expert.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\clue-integration-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\completion-certifier.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\completion-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\context-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\context-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\continuity-final-checker.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\continuity-guard-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\cozy-mystery-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\cross-chapter-flow-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\cross-chapter-flow-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\current-project-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\dialogue-character-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\emotion-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\emotion-weaver-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\emotional-trigger-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\entity-dictionary-creator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\entity-dictionary-creator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\entity-dictionary-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\entity-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\entity-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\fantasy-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\final-quality-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\foreshadowing-payoff-mapper.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\foreshadowing-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\humanization-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\humor-injection-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\knowledge-base-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\manuscript-assembler.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\metadata-generator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\novel-quality-process-analyzer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\outline-generator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\plot-context-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\plot-hole-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\prerequisites-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\prerequisites-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\project-initializer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\project-stats-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\prose-craft-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\quality-gate-validator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\quality-gate-validator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\quality-report-generator.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\quality-scorer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\report-deduplication-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\romance-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\scene-generator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\series-bible-architect.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\series-bible-reviewer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\series-brainstormer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\series-brainstormer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\series-progress-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\status-report-generator.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\story-thread-tracker.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\story-thread-tracker.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\system-analyzer.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\system-reporter.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\system-scanner.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-cleanup-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-cleanup-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-content-draft-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-content-enhancer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-content-finalizer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-data-analyzer-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-data-analyzer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-data-parser-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-data-parser-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-environment-setup-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-environment-setup-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-execution-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-execution-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-io-patterns-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-a.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-a.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-b.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-b.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-c.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-parallel-agent-c.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-python-analyzer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-python-generator-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-python-transformer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-rejection-logger-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-report-generator-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-report-generator-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-result-collector-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-result-collector-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-state-updater-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-summary-generator-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-summary-generator-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-validation-agent.md",
        "type": "agent_acts_as_coordinator",
        "message": "Agent has coordinator-like orchestration behavior"
      },
      {
        "file": ".claude\\agents\\test-validation-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\test-workflow-initializer-agent.md",
        "type": "missing_thinking_field",
        "severity": "minor",
        "message": "Agent missing thinking field (recommended)"
      },
      {
        "file": ".claude\\agents\\thriller-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\transition-continuity-reviewer.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\transition-planner.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\world-building-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\world-clue-specialist.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      },
      {
        "file": ".claude\\agents\\world-context-updater.md",
        "type": "missing_io_documentation",
        "message": "Agent missing Input Requirements documentation"
      }
    ],
    "info": [
      {
        "type": "orphan_coordinator",
        "component": "chapter-planning-coordinator",
        "message": "Coordinator chapter-planning-coordinator is not called by any command",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "author-voice-signature-specialist",
        "message": "Agent author-voice-signature-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "book-outline-reviewer",
        "message": "Agent book-outline-reviewer is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "brainstorming-completeness-validator",
        "message": "Agent brainstorming-completeness-validator is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "clue-integration-specialist",
        "message": "Agent clue-integration-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "context-validator",
        "message": "Agent context-validator is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "current-project-updater",
        "message": "Agent current-project-updater is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "emotional-trigger-specialist",
        "message": "Agent emotional-trigger-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "humanization-specialist",
        "message": "Agent humanization-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "humor-injection-specialist",
        "message": "Agent humor-injection-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "knowledge-base-updater",
        "message": "Agent knowledge-base-updater is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "novel-quality-process-analyzer",
        "message": "Agent novel-quality-process-analyzer is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "report-deduplication-specialist",
        "message": "Agent report-deduplication-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "series-bible-architect",
        "message": "Agent series-bible-architect is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "test-rejection-logger-agent",
        "message": "Agent test-rejection-logger-agent is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "test-state-updater-agent",
        "message": "Agent test-state-updater-agent is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "world-building-specialist",
        "message": "Agent world-building-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      },
      {
        "type": "orphan_agent",
        "component": "world-clue-specialist",
        "message": "Agent world-clue-specialist is not called by any coordinator or agent",
        "detection": "enhanced_v4"
      }
    ]
  },
  "division_of_labor": {
    "critical": [],
    "warning": [],
    "info": []
  },
  "orphan_analysis": {
    "total_coordinators": 26,
    "used_coordinators": 25,
    "total_agents": 92,
    "used_agents": 75,
    "total_components": 118,
    "total_orphans": 18,
    "orphan_rate": 15.254237288135593,
    "orphan_coordinators": [
      "chapter-planning-coordinator"
    ],
    "orphan_agents": [
      "author-voice-signature-specialist",
      "book-outline-reviewer",
      "brainstorming-completeness-validator",
      "clue-integration-specialist",
      "context-validator",
      "current-project-updater",
      "emotional-trigger-specialist",
      "humanization-specialist",
      "humor-injection-specialist",
      "knowledge-base-updater",
      "novel-quality-process-analyzer",
      "report-deduplication-specialist",
      "series-bible-architect",
      "test-rejection-logger-agent",
      "test-state-updater-agent",
      "world-building-specialist",
      "world-clue-specialist"
    ],
    "coordinator_usage": {
      "bible-view-coordinator": [
        "bible-view"
      ],
      "book-complete-coordinator": [
        "book-complete"
      ],
      "chapter-planning-coordinator": [],
      "chapter-start-coordinator": [
        "next-chapter",
        "chapter-start"
      ],
      "context-sync-coordinator": [
        "context-sync"
      ],
      "extend-series-coordinator": [
        "extend-series"
      ],
      "github-sync-coordinator": [
        "github-sync"
      ],
      "next-book-coordinator": [
        "next-book"
      ],
      "next-chapter-coordinator": [
        "next-chapter"
      ],
      "next-recommendation-coordinator": [
        "next"
      ],
      "project-new-coordinator": [
        "project-new"
      ],
      "project-switch-coordinator": [
        "project-switch"
      ],
      "quality-check-cross-coordinator": [
        "quality-check-cross"
      ],
      "quality-check-individual-coordinator": [
        "quality-check-individual"
      ],
      "smart-fix-coordinator": [
        "smart-fix"
      ],
      "smart-fix-cross-coordinator": [
        "smart-fix-cross"
      ],
      "standup-coordinator": [
        "standup"
      ],
      "status-coordinator": [
        "status"
      ],
      "system-check-coordinator": [
        "system-check"
      ],
      "test-architecture-coordinator": [
        "architecture-test"
      ],
      "test-content-generation-coordinator": [
        "multi-coordinator-test"
      ],
      "test-data-analysis-coordinator": [
        "multi-coordinator-test"
      ],
      "test-human-in-loop-coordinator": [
        "human-in-loop-test"
      ],
      "test-parallel-coordinator": [
        "architecture-test",
        "parallel-test"
      ],
      "test-python-pipeline-coordinator": [
        "python-pipeline-test"
      ],
      "unified-update-pipeline-coordinator": [
        "unified-update-pipeline"
      ]
    },
    "agent_usage": {
      "archive-creator": [
        "book-complete-coordinator"
      ],
      "author-voice-signature-specialist": [],
      "bible-architect": [
        "project-new-coordinator",
        "next-book-coordinator",
        "series-brainstormer"
      ],
      "bible-cache-updater": [
        "bible-compliance-validator",
        "plot-hole-validator",
        "quality-scorer",
        "continuity-guard-specialist",
        "cross-chapter-flow-validator"
      ],
      "bible-compliance-validator": [
        "quality-check-individual-coordinator",
        "chapter-start-coordinator"
      ],
      "bible-reviewer": [
        "project-new-coordinator",
        "bible-viewer"
      ],
      "bible-viewer": [
        "bible-view-coordinator"
      ],
      "book-outline-architect": [
        "next-book-coordinator",
        "outline-generator"
      ],
      "book-outline-reviewer": [],
      "book-pacing-analyzer": [
        "smart-fix-cross-coordinator"
      ],
      "brainstorming-completeness-validator": [],
      "chapter-meta-updater": [
        "world-context-updater",
        "unified-update-pipeline-coordinator",
        "characters-context-updater",
        "project-stats-updater",
        "entity-dictionary-updater",
        "plot-context-updater"
      ],
      "chapter-scanner": [
        "next-chapter-coordinator"
      ],
      "character-voice-cross-validator": [
        "smart-fix-cross-coordinator",
        "quality-check-individual-coordinator"
      ],
      "characters-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ],
      "claude-code-expert": [
        "knowledge-base-updater"
      ],
      "clue-integration-specialist": [],
      "completion-certifier": [
        "book-complete-coordinator"
      ],
      "completion-validator": [
        "book-complete-coordinator"
      ],
      "context-validator": [],
      "continuity-final-checker": [
        "book-complete-coordinator"
      ],
      "continuity-guard-specialist": [
        "smart-fix-cross-coordinator",
        "cross-chapter-flow-validator",
        "quality-check-individual-coordinator",
        "smart-fix-coordinator"
      ],
      "cozy-mystery-specialist": [
        "bible-architect"
      ],
      "cross-chapter-flow-validator": [
        "smart-fix-cross-coordinator",
        "quality-check-cross-coordinator",
        "book-pacing-analyzer"
      ],
      "current-project-updater": [],
      "dialogue-character-specialist": [
        "smart-fix-cross-coordinator",
        "quality-report-generator",
        "world-clue-specialist",
        "smart-fix-coordinator"
      ],
      "emotion-specialist": [
        "smart-fix-coordinator"
      ],
      "emotion-weaver-specialist": [
        "book-pacing-analyzer"
      ],
      "emotional-trigger-specialist": [],
      "entity-dictionary-creator": [
        "entity-dictionary-updater",
        "chapter-start-coordinator"
      ],
      "entity-dictionary-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator",
        "entity-dictionary-creator"
      ],
      "entity-validator": [
        "chapter-start-coordinator"
      ],
      "fantasy-specialist": [
        "bible-architect"
      ],
      "final-quality-validator": [
        "claude-code-expert",
        "book-complete-coordinator"
      ],
      "foreshadowing-payoff-mapper": [
        "smart-fix-cross-coordinator"
      ],
      "foreshadowing-specialist": [
        "smart-fix-cross-coordinator",
        "foreshadowing-payoff-mapper",
        "story-thread-tracker"
      ],
      "humanization-specialist": [],
      "humor-injection-specialist": [],
      "knowledge-base-updater": [],
      "manuscript-assembler": [
        "book-complete-coordinator"
      ],
      "metadata-generator": [
        "book-complete-coordinator"
      ],
      "novel-quality-process-analyzer": [],
      "outline-generator": [
        "chapter-planning-coordinator",
        "chapter-start-coordinator"
      ],
      "plot-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ],
      "plot-hole-validator": [
        "quality-check-individual-coordinator"
      ],
      "prerequisites-validator": [
        "quality-check-individual-coordinator"
      ],
      "project-initializer": [
        "project-new-coordinator"
      ],
      "project-stats-updater": [
        "unified-update-pipeline-coordinator"
      ],
      "prose-craft-specialist": [
        "smart-fix-cross-coordinator",
        "smart-fix-coordinator"
      ],
      "quality-gate-validator": [
        "context-sync-coordinator"
      ],
      "quality-report-generator": [
        "quality-check-individual-coordinator"
      ],
      "quality-scorer": [
        "quality-report-generator",
        "novel-quality-process-analyzer",
        "smart-fix-coordinator",
        "chapter-start-coordinator",
        "chapter-meta-updater",
        "smart-fix-cross-coordinator",
        "quality-check-individual-coordinator",
        "claude-code-expert"
      ],
      "report-deduplication-specialist": [],
      "romance-specialist": [
        "bible-architect"
      ],
      "scene-generator": [
        "dialogue-character-specialist",
        "system-reporter",
        "chapter-start-coordinator",
        "novel-quality-process-analyzer"
      ],
      "series-bible-architect": [],
      "series-bible-reviewer": [
        "project-new-coordinator"
      ],
      "series-brainstormer": [
        "project-new-coordinator",
        "project-initializer"
      ],
      "series-progress-updater": [
        "book-complete-coordinator"
      ],
      "status-report-generator": [
        "status-coordinator"
      ],
      "story-thread-tracker": [
        "smart-fix-cross-coordinator"
      ],
      "system-analyzer": [
        "system-check-coordinator"
      ],
      "system-reporter": [
        "system-check-coordinator"
      ],
      "system-scanner": [
        "system-check-coordinator"
      ],
      "test-cleanup-agent": [
        "test-architecture-coordinator"
      ],
      "test-content-draft-agent": [
        "test-human-in-loop-coordinator"
      ],
      "test-content-enhancer-agent": [
        "test-rejection-logger-agent",
        "test-human-in-loop-coordinator"
      ],
      "test-content-finalizer-agent": [
        "test-human-in-loop-coordinator"
      ],
      "test-data-analyzer-agent": [
        "test-data-analysis-coordinator"
      ],
      "test-data-parser-agent": [
        "test-data-analysis-coordinator"
      ],
      "test-environment-setup-agent": [
        "test-architecture-coordinator"
      ],
      "test-execution-agent": [
        "test-architecture-coordinator",
        "test-environment-setup-agent"
      ],
      "test-io-patterns-agent": [
        "test-architecture-coordinator"
      ],
      "test-parallel-agent-a": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-parallel-agent-b": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-parallel-agent-c": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-python-analyzer-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-python-generator-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-python-transformer-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-rejection-logger-agent": [],
      "test-report-generator-agent": [
        "test-content-generation-coordinator"
      ],
      "test-result-collector-agent": [
        "test-architecture-coordinator"
      ],
      "test-state-updater-agent": [],
      "test-summary-generator-agent": [
        "test-content-generation-coordinator"
      ],
      "test-validation-agent": [
        "test-architecture-coordinator"
      ],
      "test-workflow-initializer-agent": [
        "test-human-in-loop-coordinator"
      ],
      "thriller-specialist": [
        "bible-architect"
      ],
      "transition-continuity-reviewer": [
        "next-book-coordinator"
      ],
      "transition-planner": [
        "book-complete-coordinator"
      ],
      "world-building-specialist": [],
      "world-clue-specialist": [],
      "world-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ]
    }
  },
  "statistics": {
    "total_components": 145,
    "total_commands": 27,
    "pattern_parallel": 47,
    "pattern_serial": 51,
    "pattern_pipeline": 57,
    "pattern_multi_coordinator": 13,
    "pattern_human_in_loop": 13,
    "total_agents": 92,
    "tool_Read": 115,
    "tool_Write": 110,
    "tool_Bash": 53,
    "tool_Glob": 8,
    "pattern_atomic": 30,
    "tool_Grep": 45,
    "total_coordinators": 26,
    "tool_WebSearch": 1,
    "tool_WebFetch": 1,
    "violations_summary": {
      "total": 422,
      "critical": 0,
      "major": 284,
      "minor": 120,
      "info": 18
    }
  },
  "relationships": {
    "command_to_coordinator": {
      "multi-coordinator-test": "test-data-analysis-coordinator",
      "parallel-test": "test-parallel-coordinator",
      "bible-view": "bible-view-coordinator",
      "book-complete": "book-complete-coordinator",
      "chapter-start": "chapter-start-coordinator",
      "context-sync": "context-sync-coordinator",
      "extend-series": "extend-series-coordinator",
      "github-sync": "github-sync-coordinator",
      "next-book": "next-book-coordinator",
      "next-chapter": "next-chapter-coordinator",
      "next": "next-recommendation-coordinator",
      "project-new": "project-new-coordinator",
      "project-switch": "project-switch-coordinator",
      "quality-check-cross": "quality-check-cross-coordinator",
      "quality-check-individual": "quality-check-individual-coordinator",
      "smart-fix-cross": "smart-fix-cross-coordinator",
      "smart-fix": "smart-fix-coordinator",
      "standup": "standup-coordinator",
      "status": "status-coordinator",
      "system-check": "system-check-coordinator",
      "unified-update-pipeline": "unified-update-pipeline-coordinator"
    },
    "command_to_agents": {},
    "coordinator_to_agents": {
      "bible-view-coordinator": [
        "bible-viewer"
      ],
      "book-complete-coordinator": [
        "completion-validator",
        "series-progress-updater",
        "transition-planner",
        "metadata-generator",
        "manuscript-assembler",
        "continuity-final-checker",
        "archive-creator",
        "final-quality-validator",
        "completion-certifier"
      ],
      "chapter-planning-coordinator": [
        "continuity-analyzer",
        "outline-validator",
        "context-loader",
        "outline-generator"
      ],
      "chapter-start-coordinator": [
        "entity-validator",
        "bible-compliance-validator",
        "quality-scorer",
        "scene-generator",
        "outline-generator"
      ],
      "context-sync-coordinator": [
        "world-context-updater",
        "characters-context-updater",
        "sync-reporter",
        "quality-gate-validator",
        "entity-dictionary-updater",
        "plot-context-updater"
      ],
      "extend-series-coordinator": [
        "thread-expansion-planner",
        "world-expansion-architect",
        "extension-validator",
        "character-arc-extender",
        "requirements-gatherer",
        "bible-updater",
        "plot-thread-architect",
        "implementation-planner"
      ],
      "github-sync-coordinator": [
        "sync-verifier",
        "mapping-updater",
        "github-validator",
        "chapter-formatter",
        "bible-formatter",
        "sync-scope-analyzer",
        "issue-synchronizer"
      ],
      "next-book-coordinator": [
        "book-outline-architect",
        "bible-architect",
        "series-state-validator",
        "transition-documenter",
        "book-end-state-analyzer",
        "transition-continuity-reviewer",
        "book-structure-initializer"
      ],
      "next-chapter-coordinator": [
        "post-generation-validator",
        "chapter-scanner",
        "chapter-start-coordinator",
        "previous-chapter-validator",
        "delegation-planner",
        "progress-tracker"
      ],
      "next-recommendation-coordinator": [
        "recommendation-generator",
        "priority-calculator",
        "project-analyzer"
      ],
      "project-new-coordinator": [
        "project-name-resolver",
        "bible-architect",
        "series-brainstormer",
        "project-finalizer",
        "bible-reviewer",
        "series-bible-reviewer",
        "project-initializer"
      ],
      "project-switch-coordinator": [
        "project-validator",
        "context-preserver",
        "project-activator",
        "project-transition-manager"
      ],
      "quality-check-cross-coordinator": [
        "cross-chapter-aggregator",
        "range-validator",
        "character-arc-validator",
        "pacing-analyzer",
        "cross-chapter-reporter",
        "world-consistency-checker",
        "cross-chapter-flow-validator",
        "plot-thread-tracker"
      ],
      "quality-check-individual-coordinator": [
        "quality-report-generator",
        "character-voice-cross-validator",
        "bible-compliance-validator",
        "plot-hole-validator",
        "prerequisites-validator",
        "quality-scorer",
        "continuity-guard-specialist"
      ],
      "smart-fix-coordinator": [
        "emotion-specialist",
        "quality-scorer",
        "continuity-guard-specialist",
        "prose-craft-specialist",
        "dialogue-character-specialist"
      ],
      "smart-fix-cross-coordinator": [
        "character-voice-cross-validator",
        "foreshadowing-specialist",
        "quality-scorer",
        "story-thread-tracker",
        "continuity-guard-specialist",
        "prose-craft-specialist",
        "dialogue-character-specialist",
        "foreshadowing-payoff-mapper",
        "cross-chapter-flow-validator"
      ],
      "standup-coordinator": [
        "system-health-monitor",
        "quality-metrics-analyzer",
        "progress-metrics-collector",
        "insight-generator",
        "report-formatter",
        "context-learning-assessor",
        "data-aggregator",
        "issue-risk-detector"
      ],
      "status-coordinator": [
        "status-report-generator"
      ],
      "system-check-coordinator": [
        "system-scanner",
        "system-reporter",
        "system-analyzer"
      ],
      "test-content-generation-coordinator": [
        "test-report-generator",
        "test-summary-generator"
      ],
      "test-python-pipeline-coordinator": [
        "test-python-generator"
      ],
      "unified-update-pipeline-coordinator": [
        "world-context-updater",
        "characters-context-updater",
        "chapter-meta-updater",
        "quality-validator",
        "update-report-generator",
        "project-stats-updater",
        "entity-dictionary-updater",
        "plot-context-updater"
      ]
    },
    "file_io_network": {
      "{project}/book_{N}/bible.yaml": {
        "readers": [],
        "writers": [
          "bible-create",
          "bible-create",
          "bible-create",
          "bible-create",
          "bible-view",
          "bible-view",
          "bible-view",
          "chapter-start",
          "next-chapter",
          "bible-view-coordinator",
          "bible-view-coordinator",
          "chapter-planning-coordinator",
          "chapter-start-coordinator",
          "next-recommendation-coordinator",
          "author-voice-signature-specialist",
          "manuscript-assembler"
        ]
      },
      "{project}/shared/entity_dictionary.yaml": {
        "readers": [],
        "writers": [
          "bible-create",
          "bible-create",
          "chapter-start-coordinator",
          "context-sync-coordinator",
          "bible-compliance-validator",
          "bible-compliance-validator",
          "bible-compliance-validator",
          "continuity-guard-specialist",
          "dialogue-character-specialist",
          "entity-dictionary-creator",
          "entity-dictionary-updater",
          "entity-validator",
          "entity-validator",
          "quality-scorer",
          "scene-generator"
        ]
      },
      "{project}/bible_backup.yaml": {
        "readers": [],
        "writers": [
          "bible-create",
          "bible-view"
        ]
      },
      "{project}/archives/book_{N}/": {
        "readers": [],
        "writers": [
          "book-complete"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/": {
        "readers": [],
        "writers": [
          "chapter-start",
          "chapter-start-coordinator"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/outline.json": {
        "readers": [],
        "writers": [
          "chapter-start",
          "next-chapter"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "chapter-start",
          "next-chapter"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/meta.json": {
        "readers": [],
        "writers": [
          "chapter-start",
          "next-chapter"
        ]
      },
      "{project}/book_{N}/chapters/*/content.md": {
        "readers": [],
        "writers": [
          "quality-check-cross",
          "quality-check-individual"
        ]
      },
      "{project}/book_{N}/quality_scores.json": {
        "readers": [],
        "writers": [
          "quality-check-cross",
          "quality-check-cross",
          "quality-check-individual",
          "quality-check-individual"
        ]
      },
      "{project}/book_{N}/quality_report.json": {
        "readers": [],
        "writers": [
          "quality-check-cross",
          "quality-check-individual"
        ]
      },
      "{project}/project.json": {
        "readers": [],
        "writers": [
          "bible-view-coordinator",
          "chapter-start-coordinator",
          "context-sync-coordinator",
          "next-recommendation-coordinator",
          "status-coordinator",
          "completion-certifier",
          "project-stats-updater",
          "project-stats-updater",
          "series-bible-architect",
          "series-bible-architect",
          "series-bible-architect",
          "series-bible-reviewer",
          "series-progress-updater"
        ]
      },
      "{NNN}/outline.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{NNN}/content.md": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator",
          "quality-check-individual-coordinator"
        ]
      },
      "{NNN}/quality_report.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator",
          "smart-fix-coordinator"
        ]
      },
      "{\n            \"validation_report\": \"/absolute/path/to/ch{NNN}/entity_validation.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n      \"phase\": 2,\n      \"name\": \"Content Planning\",\n      \"description\": \"Generate detailed chapter outline\",\n      \"parallel\": false,\n      \"estimated_time\": \"60 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"outline-generator\",\n          \"description\": \"Generate comprehensive chapter outline from book structure\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"book_outline\": \"/absolute/path/to/book_{N}/outline.yaml": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n            \"chapter_outline\": \"/absolute/path/to/ch{NNN}/outline.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n      \"phase\": 3,\n      \"name\": \"Content Generation\",\n      \"description\": \"Generate chapter content from outline\",\n      \"parallel\": false,\n      \"estimated_time\": \"90 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"scene-generator\",\n          \"description\": \"Generate complete chapter narrative from outline\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_outline\": \"/absolute/path/to/ch{NNN}/outline.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n      \"phase\": 4,\n      \"name\": \"Quality Validation\",\n      \"description\": \"Validate content quality and compliance\",\n      \"parallel\": true,\n      \"estimated_time\": \"60 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"quality-scorer\",\n          \"description\": \"Score chapter quality against standards\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n            \"quality_score\": \"/absolute/path/to/ch{NNN}/quality_report.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n          \"agent\": \"bible-compliance-validator\",\n          \"description\": \"Validate Bible compliance\",\n          \"priority\": \"high\",\n          \"inputs\": {\n            \"chapter_content\": \"/absolute/path/to/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{\n            \"compliance_report\": \"/absolute/path/to/ch{NNN}/bible_compliance.json": {
        "readers": [],
        "writers": [
          "chapter-start-coordinator"
        ]
      },
      "{project}/book_{N}/context/": {
        "readers": [],
        "writers": [
          "context-sync-coordinator"
        ]
      },
      "{\n            \"book_bible\": \"complete_book_bible_yaml\",\n            \"bible_path\": \"/absolute/path/to/book_{N}/bible.yaml": {
        "readers": [],
        "writers": [
          "next-book-coordinator"
        ]
      },
      "{\n            \"book_outline\": \"detailed_chapter_by_chapter_plan\",\n            \"outline_path\": \"/absolute/path/to/book_{N}/outline.md": {
        "readers": [],
        "writers": [
          "next-book-coordinator"
        ]
      },
      "{project}/book_{N}/chapters/": {
        "readers": [],
        "writers": [
          "next-recommendation-coordinator",
          "status-coordinator"
        ]
      },
      "{project_name}/series_bible.yaml": {
        "readers": [],
        "writers": [
          "project-new-coordinator"
        ]
      },
      "{project_name}/book_1/bible.yaml": {
        "readers": [],
        "writers": [
          "project-new-coordinator"
        ]
      },
      "{project_name}/project.json": {
        "readers": [],
        "writers": [
          "project-new-coordinator",
          "project-initializer"
        ]
      },
      "{N}/bible.yaml": {
        "readers": [],
        "writers": [
          "quality-check-cross-coordinator",
          "quality-check-individual-coordinator",
          "quality-check-individual-coordinator"
        ]
      },
      "{\n      \"phase\": 1,\n      \"name\": \"Prerequisites Validation\",\n      \"description\": \"Verify all required files and resources exist\",\n      \"parallel\": false,\n      \"estimated_time\": \"5 seconds\",\n      \"tasks\": [\n        {\n          \"agent\": \"prerequisites-validator\",\n          \"description\": \"Validate all required files exist and are accessible\",\n          \"priority\": \"critical\",\n          \"inputs\": {\n            \"chapter_number\": \"[formatted_chapter_number]\",\n            \"project_root\": \"/absolute/path/to/project\",\n            \"required_files\": {\n              \"chapter_content\": \"chapters/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "quality-check-individual-coordinator"
        ]
      },
      "{project}/book_{N}/": {
        "readers": [],
        "writers": [
          "status-coordinator"
        ]
      },
      ".claude/testing/temp/": {
        "readers": [
          "test-architecture-coordinator"
        ],
        "writers": []
      },
      "{project}/archives/book_{N}_${timestamp}": {
        "readers": [],
        "writers": [
          "archive-creator"
        ]
      },
      "{archive_path}/chapters/ch{chapter['number']:03d}/": {
        "readers": [],
        "writers": [
          "archive-creator"
        ]
      },
      "{archive_path}/manifest.json": {
        "readers": [],
        "writers": [
          "archive-creator"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v09_humanized.md": {
        "readers": [],
        "writers": [
          "author-voice-signature-specialist",
          "humanization-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v10_voice_signature.md": {
        "readers": [],
        "writers": [
          "author-voice-signature-specialist"
        ]
      },
      "{project}/book_{book}/bible.yaml": {
        "readers": [],
        "writers": [
          "bible-cache-updater",
          "characters-context-updater",
          "plot-context-updater",
          "world-context-updater"
        ]
      },
      "{project}/book_{book_number}/bible.yaml": {
        "readers": [],
        "writers": [
          "book-outline-architect",
          "book-outline-reviewer"
        ]
      },
      "{project}/brainstorming_results.yaml": {
        "readers": [],
        "writers": [
          "book-outline-architect",
          "series-bible-architect",
          "series-bible-reviewer"
        ]
      },
      "{project}/book_{book_number}/outline.yaml": {
        "readers": [],
        "writers": [
          "book-outline-architect"
        ]
      },
      "{project}/outline_reviews/review_v{N}.json": {
        "readers": [],
        "writers": [
          "book-outline-reviewer"
        ]
      },
      "Heavy exposition chapters without breaks": {
        "readers": [
          "book-pacing-analyzer"
        ],
        "writers": []
      },
      "{project}/book_{book}/chapters/ch{chapter}/content.md": {
        "readers": [],
        "writers": [
          "chapter-meta-updater",
          "characters-context-updater",
          "entity-dictionary-updater",
          "plot-context-updater",
          "world-context-updater"
        ]
      },
      "{project}/book_{book}/chapters/ch{chapter}/quality_report.json": {
        "readers": [],
        "writers": [
          "chapter-meta-updater",
          "characters-context-updater",
          "entity-dictionary-updater",
          "plot-context-updater",
          "world-context-updater"
        ]
      },
      "{project}/book_{book}/chapters/ch{chapter}/meta.json": {
        "readers": [],
        "writers": [
          "chapter-meta-updater",
          "characters-context-updater",
          "entity-dictionary-updater",
          "plot-context-updater",
          "world-context-updater"
        ]
      },
      "{project_root}/book_{N}/chapters/ch*": {
        "readers": [],
        "writers": [
          "chapter-scanner"
        ]
      },
      "{project_root}/book_{N}/chapters/ch*;": {
        "readers": [],
        "writers": [
          "chapter-scanner"
        ]
      },
      "{project}/book_{book}/context/characters.json": {
        "readers": [],
        "writers": [
          "characters-context-updater",
          "characters-context-updater"
        ]
      },
      "output.md": {
        "readers": [],
        "writers": [
          "claude-code-expert"
        ]
      },
      "{project}/book_{book}/ch005": {
        "readers": [],
        "writers": [
          "claude-code-expert"
        ]
      },
      "{project}/book_{N}/chapter.md": {
        "readers": [],
        "writers": [
          "claude-code-expert"
        ]
      },
      "{n}/meta.json": {
        "readers": [],
        "writers": [
          "completion-certifier"
        ]
      },
      "{project}/book_{N}/chapters/ch*/": {
        "readers": [],
        "writers": [
          "completion-validator",
          "project-stats-updater"
        ]
      },
      "{timestamp}/context.json": {
        "readers": [],
        "writers": [
          "context-validator"
        ]
      },
      "{timestamp}/context.json.": {
        "readers": [],
        "writers": [
          "context-validator"
        ]
      },
      "{chapter}/chapter.md": {
        "readers": [],
        "writers": [
          "continuity-final-checker",
          "metadata-generator"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v03_world_clues.md": {
        "readers": [],
        "writers": [
          "continuity-guard-specialist",
          "world-clue-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v04_continuity_checked.md": {
        "readers": [],
        "writers": [
          "continuity-guard-specialist",
          "emotion-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v07_foreshadowing_added.md": {
        "readers": [],
        "writers": [
          "cozy-mystery-specialist",
          "fantasy-specialist",
          "foreshadowing-specialist",
          "humanization-specialist",
          "romance-specialist",
          "thriller-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v08_genre_enhanced.md": {
        "readers": [],
        "writers": [
          "cozy-mystery-specialist",
          "fantasy-specialist",
          "humanization-specialist",
          "romance-specialist",
          "thriller-specialist"
        ]
      },
      "{new_project}/project.json": {
        "readers": [],
        "writers": [
          "current-project-updater"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v01_initial_draft.md": {
        "readers": [],
        "writers": [
          "dialogue-character-specialist",
          "scene-generator"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v02_dialogue_character.md": {
        "readers": [],
        "writers": [
          "dialogue-character-specialist",
          "world-clue-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v05_emotions_woven.md": {
        "readers": [],
        "writers": [
          "emotion-specialist",
          "prose-craft-specialist"
        ]
      },
      "{project}/series_bible.yaml": {
        "readers": [],
        "writers": [
          "entity-dictionary-creator",
          "series-bible-architect",
          "series-bible-architect",
          "series-bible-architect",
          "series-bible-architect",
          "series-bible-architect",
          "series-progress-updater",
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_1/bible.yaml": {
        "readers": [],
        "writers": [
          "entity-dictionary-creator"
        ]
      },
      "{project}/shared/entity_index.json": {
        "readers": [],
        "writers": [
          "entity-dictionary-creator"
        ]
      },
      " not found in prompt, STOP with error: ": {
        "readers": [
          "entity-validator"
        ],
        "writers": []
      },
      " in your prompt\n   - Extract the file path after ": {
        "readers": [
          "entity-validator"
        ],
        "writers": []
      },
      ".claude/data/projects/{project}/shared/entity_dictionary.yaml": {
        "readers": [
          "entity-validator"
        ],
        "writers": []
      },
      "\n   - Use Read tool to load that specific file\n   - If ": {
        "readers": [
          "entity-validator"
        ],
        "writers": []
      },
      "{chapter}/meta.json": {
        "readers": [],
        "writers": [
          "final-quality-validator",
          "metadata-generator"
        ]
      },
      "Setup established but abandoned mid-story": {
        "readers": [
          "foreshadowing-payoff-mapper"
        ],
        "writers": []
      },
      "Story element that builds to major revelation": {
        "readers": [
          "foreshadowing-payoff-mapper"
        ],
        "writers": []
      },
      "{project}/book_{N}/chapters/ch{NNN}/versions/v06_prose_polished.md": {
        "readers": [],
        "writers": [
          "foreshadowing-specialist",
          "prose-craft-specialist"
        ]
      },
      "{project}/book_{N}/chapters/ch*/chapter.md": {
        "readers": [],
        "writers": [
          "manuscript-assembler"
        ]
      },
      "{project}/book_{N}/manuscript.md": {
        "readers": [],
        "writers": [
          "manuscript-assembler"
        ]
      },
      "{chapter}/outline.md": {
        "readers": [],
        "writers": [
          "metadata-generator"
        ]
      },
      "{report_dir}/dependency-mapper_report.json": {
        "readers": [],
        "writers": [
          "novel-quality-process-analyzer"
        ]
      },
      "{report_dir}/resource-analyzer_report.json": {
        "readers": [],
        "writers": [
          "novel-quality-process-analyzer"
        ]
      },
      "{report_dir}/command-flow-mapper_report.json": {
        "readers": [],
        "writers": [
          "novel-quality-process-analyzer"
        ]
      },
      "{report_dir}/system_flow_diagram.md": {
        "readers": [],
        "writers": [
          "novel-quality-process-analyzer"
        ]
      },
      "{score}/100": {
        "readers": [],
        "writers": [
          "novel-quality-process-analyzer",
          "novel-quality-process-analyzer",
          "novel-quality-process-analyzer",
          "series-bible-reviewer",
          "series-bible-reviewer"
        ]
      },
      "{project_name}/book_{book_number}/outline.yaml": {
        "readers": [],
        "writers": [
          "outline-generator",
          "outline-generator",
          "outline-generator"
        ]
      },
      "{project_name}/book_{book_number}/bible.yaml": {
        "readers": [],
        "writers": [
          "outline-generator",
          "outline-generator"
        ]
      },
      "{project_name}/book_{book_number}/chapters/": {
        "readers": [],
        "writers": [
          "outline-generator"
        ]
      },
      "{project_name}/shared/entity_dictionary.yaml": {
        "readers": [],
        "writers": [
          "outline-generator"
        ]
      },
      "{project}/book_{book}/context/plot.json": {
        "readers": [],
        "writers": [
          "plot-context-updater",
          "plot-context-updater"
        ]
      },
      "{project_root}/book_{N}/chapters/ch{NNN}/content.md": {
        "readers": [],
        "writers": [
          "prerequisites-validator"
        ]
      },
      "{project_root}/book_{N}/bible.yaml": {
        "readers": [],
        "writers": [
          "prerequisites-validator"
        ]
      },
      "{project_root}/shared/entity_dictionary.yaml": {
        "readers": [],
        "writers": [
          "prerequisites-validator"
        ]
      },
      "{project_name}/book_1/chapters": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/book_1/context": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/book_1/outlines": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/shared": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/shared/templates": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/learning_reports": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/quality_reports": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/series_reviews": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "{project_name}/archive": {
        "readers": [],
        "writers": [
          "project-initializer"
        ]
      },
      "project.json": {
        "readers": [],
        "writers": [
          "project-stats-updater"
        ]
      },
      "{project}/book_*/": {
        "readers": [],
        "writers": [
          "project-stats-updater",
          "series-progress-updater"
        ]
      },
      "{project}/{chapter['path']}/meta.json": {
        "readers": [],
        "writers": [
          "project-stats-updater"
        ]
      },
      "{completed}/{total}": {
        "readers": [],
        "writers": [
          "project-stats-updater",
          "project-stats-updater"
        ]
      },
      "{project_root}/book_{N}/chapters/ch*/quality_report.json": {
        "readers": [],
        "writers": [
          "quality-gate-validator"
        ]
      },
      "{project}/book_{N}/chapters/ch{NNN}/quality_assessment.md": {
        "readers": [],
        "writers": [
          "quality-report-generator"
        ]
      },
      "{project}/series_reviews/series_review_v{N}.json": {
        "readers": [],
        "writers": [
          "series-bible-reviewer"
        ]
      },
      "{book_dir}/completed.json": {
        "readers": [],
        "writers": [
          "series-progress-updater"
        ]
      },
      "{project}/book_{current}/statistics.json": {
        "readers": [],
        "writers": [
          "series-progress-updater"
        ]
      },
      "{project}/book_{current}/chapters/ch{last}/chapter.md": {
        "readers": [],
        "writers": [
          "series-progress-updater"
        ]
      },
      "{project}/book_{current}/plot_threads.json": {
        "readers": [],
        "writers": [
          "series-progress-updater"
        ]
      },
      "{project}/series_progress.json": {
        "readers": [],
        "writers": [
          "series-progress-updater",
          "transition-planner"
        ]
      },
      "{completed_chapters}/{total_chapters}": {
        "readers": [],
        "writers": [
          "status-report-generator"
        ]
      },
      "{average_score}/100": {
        "readers": [],
        "writers": [
          "status-report-generator"
        ]
      },
      "{consistency_score}/100": {
        "readers": [],
        "writers": [
          "status-report-generator"
        ]
      },
      "{report_directory}/system_scan.json": {
        "readers": [],
        "writers": [
          "system-analyzer",
          "system-analyzer"
        ]
      },
      "{report_directory}/{output_name}": {
        "readers": [],
        "writers": [
          "system-analyzer"
        ]
      },
      "{report_directory}/{output_name": {
        "readers": [],
        "writers": [
          "system-analyzer"
        ]
      },
      "{input_path}/system_analysis.json": {
        "readers": [],
        "writers": [
          "system-reporter"
        ]
      },
      "{output_path}/system_report.md": {
        "readers": [],
        "writers": [
          "system-reporter"
        ]
      },
      "{output_path}/system_scan.json": {
        "readers": [],
        "writers": [
          "system-scanner"
        ]
      },
      ".claude/testing/human_in_loop/final.md": {
        "readers": [
          "test-content-finalizer-agent"
        ],
        "writers": []
      },
      "{project}/book_{N}/chapter_{NNN}.md'": {
        "readers": [],
        "writers": [
          "test-execution-agent"
        ]
      },
      "{project}/book_{N-1}/final_state.yaml": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N-1}/context/characters.json": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N-1}/context/plot.json": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N-1}/context/world.json": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N}/transition_plan.yaml": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N}/transition_review.json": {
        "readers": [],
        "writers": [
          "transition-continuity-reviewer"
        ]
      },
      "{project}/book_{N}/completed.json": {
        "readers": [],
        "writers": [
          "transition-planner"
        ]
      },
      "{project}/book_{N}/plot_threads.json": {
        "readers": [],
        "writers": [
          "transition-planner"
        ]
      },
      "{project}/book_{book}/context/world.json": {
        "readers": [],
        "writers": [
          "world-context-updater",
          "world-context-updater"
        ]
      }
    },
    "execution_dependencies": {
      "architecture-test": [
        "Main",
        "the"
      ],
      "multi-coordinator-test": [
        "the"
      ],
      "extend-series": [
        "careful"
      ],
      "next-book": [
        "resolution"
      ],
      "quality-check-individual": [
        "rewrite"
      ],
      "chapter-planning-coordinator": [
        "tension"
      ],
      "quality-check-individual-coordinator": [
        "work"
      ],
      "smart-fix-cross-coordinator": [
        "timeline"
      ],
      "system-check-coordinator": [
        "previous"
      ],
      "unified-update-pipeline-coordinator": [
        "for"
      ],
      "bible-cache-updater": [
        "refresh"
      ],
      "bible-reviewer": [
        "work"
      ],
      "book-outline-architect": [
        "setup",
        "multiple",
        "chapter-level"
      ],
      "book-outline-reviewer": [
        "markers",
        "specific",
        "work"
      ],
      "brainstorming-completeness-validator": [
        "unifying"
      ],
      "character-voice-cross-validator": [
        "review"
      ],
      "cross-chapter-flow-validator": [
        "immediate"
      ],
      "entity-dictionary-updater": [
        "Bible"
      ],
      "entity-validator": [
        "canonical",
        "context"
      ],
      "foreshadowing-specialist": [
        "resolution"
      ],
      "knowledge-base-updater": [
        "fetch"
      ],
      "prose-craft-specialist": [
        "significant"
      ],
      "quality-report-generator": [
        "Minor",
        "Work"
      ],
      "quality-scorer": [
        "improvement"
      ],
      "series-progress-updater": [
        "to"
      ],
      "system-analyzer": [
        "fixing"
      ],
      "system-reporter": [
        "Attention"
      ],
      "world-clue-specialist": [
        "foreshadowing"
      ]
    },
    "model_requirements": {
      "architecture-test": {
        "complexity": "high"
      },
      "human-in-loop-test": {
        "complexity": "high"
      },
      "multi-coordinator-test": {
        "complexity": "high"
      },
      "parallel-test": {
        "complexity": "medium"
      },
      "python-pipeline-test": {
        "complexity": "medium"
      },
      "bible-create": {
        "complexity": "medium"
      },
      "bible-view": {
        "complexity": "medium"
      },
      "book-complete": {
        "complexity": "medium"
      },
      "chapter-start": {
        "complexity": "medium"
      },
      "context-sync": {
        "complexity": "medium"
      },
      "extend-series": {
        "complexity": "medium"
      },
      "flow-mapping": {
        "complexity": "high"
      },
      "github-sync": {
        "complexity": "medium"
      },
      "next-book": {
        "complexity": "medium"
      },
      "next-chapter": {
        "complexity": "medium"
      },
      "next": {
        "complexity": "medium"
      },
      "project-list": {
        "complexity": "medium"
      },
      "project-new": {
        "complexity": "medium"
      },
      "project-switch": {
        "complexity": "medium"
      },
      "quality-check-cross": {
        "complexity": "medium"
      },
      "quality-check-individual": {
        "complexity": "medium"
      },
      "smart-fix-cross": {
        "complexity": "medium"
      },
      "smart-fix": {
        "complexity": "medium"
      },
      "standup": {
        "complexity": "medium"
      },
      "status": {
        "complexity": "low"
      },
      "system-check": {
        "complexity": "medium"
      },
      "unified-update-pipeline": {
        "complexity": "medium"
      },
      "bible-view-coordinator": {
        "complexity": "high"
      },
      "book-complete-coordinator": {
        "complexity": "high"
      },
      "chapter-planning-coordinator": {
        "complexity": "high"
      },
      "chapter-start-coordinator": {
        "complexity": "high"
      },
      "context-sync-coordinator": {
        "complexity": "high"
      },
      "extend-series-coordinator": {
        "complexity": "high"
      },
      "github-sync-coordinator": {
        "complexity": "high"
      },
      "next-book-coordinator": {
        "complexity": "high"
      },
      "next-chapter-coordinator": {
        "complexity": "high"
      },
      "next-recommendation-coordinator": {
        "complexity": "high"
      },
      "project-new-coordinator": {
        "complexity": "high"
      },
      "project-switch-coordinator": {
        "complexity": "high"
      },
      "quality-check-cross-coordinator": {
        "complexity": "high"
      },
      "quality-check-individual-coordinator": {
        "complexity": "high"
      },
      "smart-fix-coordinator": {
        "complexity": "high"
      },
      "smart-fix-cross-coordinator": {
        "complexity": "high"
      },
      "standup-coordinator": {
        "complexity": "high"
      },
      "status-coordinator": {
        "complexity": "high"
      },
      "system-check-coordinator": {
        "complexity": "high"
      },
      "test-architecture-coordinator": {
        "complexity": "high"
      },
      "test-content-generation-coordinator": {
        "complexity": "high"
      },
      "test-data-analysis-coordinator": {
        "complexity": "high"
      },
      "test-human-in-loop-coordinator": {
        "complexity": "high"
      },
      "test-parallel-coordinator": {
        "complexity": "medium"
      },
      "test-python-pipeline-coordinator": {
        "complexity": "medium"
      },
      "unified-update-pipeline-coordinator": {
        "complexity": "high"
      },
      "archive-creator": {
        "complexity": "medium"
      },
      "author-voice-signature-specialist": {
        "complexity": "high"
      },
      "bible-architect": {
        "complexity": "high"
      },
      "bible-cache-updater": {
        "complexity": "medium"
      },
      "bible-compliance-validator": {
        "complexity": "medium"
      },
      "bible-reviewer": {
        "complexity": "medium"
      },
      "bible-viewer": {
        "complexity": "medium"
      },
      "book-outline-architect": {
        "complexity": "medium"
      },
      "book-outline-reviewer": {
        "complexity": "medium"
      },
      "book-pacing-analyzer": {
        "complexity": "low"
      },
      "brainstorming-completeness-validator": {
        "complexity": "high"
      },
      "chapter-meta-updater": {
        "complexity": "high"
      },
      "chapter-scanner": {
        "complexity": "low"
      },
      "character-voice-cross-validator": {
        "complexity": "high"
      },
      "characters-context-updater": {
        "complexity": "medium"
      },
      "claude-code-expert": {
        "preferred_model": "claude-opus-4-1",
        "reason": "High quality/critical operations",
        "complexity": "high"
      },
      "clue-integration-specialist": {
        "complexity": "high"
      },
      "completion-certifier": {
        "complexity": "medium"
      },
      "completion-validator": {
        "complexity": "medium"
      },
      "context-validator": {
        "complexity": "medium"
      },
      "continuity-final-checker": {
        "complexity": "high"
      },
      "continuity-guard-specialist": {
        "complexity": "medium"
      },
      "cozy-mystery-specialist": {
        "complexity": "medium"
      },
      "cross-chapter-flow-validator": {
        "complexity": "medium"
      },
      "current-project-updater": {
        "complexity": "low"
      },
      "dialogue-character-specialist": {
        "complexity": "medium"
      },
      "emotion-specialist": {
        "complexity": "medium"
      },
      "emotion-weaver-specialist": {
        "complexity": "high"
      },
      "emotional-trigger-specialist": {
        "complexity": "medium"
      },
      "entity-dictionary-creator": {
        "complexity": "medium"
      },
      "entity-dictionary-updater": {
        "complexity": "medium"
      },
      "entity-validator": {
        "complexity": "low"
      },
      "fantasy-specialist": {
        "complexity": "high"
      },
      "final-quality-validator": {
        "complexity": "medium"
      },
      "foreshadowing-payoff-mapper": {
        "complexity": "medium"
      },
      "foreshadowing-specialist": {
        "complexity": "low"
      },
      "humanization-specialist": {
        "complexity": "medium"
      },
      "humor-injection-specialist": {
        "complexity": "medium"
      },
      "knowledge-base-updater": {
        "complexity": "medium"
      },
      "manuscript-assembler": {
        "complexity": "medium"
      },
      "metadata-generator": {
        "complexity": "medium"
      },
      "novel-quality-process-analyzer": {
        "complexity": "high"
      },
      "outline-generator": {
        "complexity": "medium"
      },
      "plot-context-updater": {
        "complexity": "high"
      },
      "plot-hole-validator": {
        "complexity": "medium"
      },
      "prerequisites-validator": {
        "complexity": "medium"
      },
      "project-initializer": {
        "complexity": "medium"
      },
      "project-stats-updater": {
        "complexity": "low"
      },
      "prose-craft-specialist": {
        "complexity": "high"
      },
      "quality-gate-validator": {
        "complexity": "medium"
      },
      "quality-report-generator": {
        "complexity": "medium"
      },
      "quality-scorer": {
        "complexity": "high"
      },
      "report-deduplication-specialist": {
        "complexity": "high"
      },
      "romance-specialist": {
        "complexity": "low"
      },
      "scene-generator": {
        "complexity": "medium"
      },
      "series-bible-architect": {
        "complexity": "medium"
      },
      "series-bible-reviewer": {
        "complexity": "high"
      },
      "series-brainstormer": {
        "complexity": "medium"
      },
      "series-progress-updater": {
        "complexity": "medium"
      },
      "status-report-generator": {
        "complexity": "high"
      },
      "story-thread-tracker": {
        "complexity": "high"
      },
      "system-analyzer": {
        "complexity": "high"
      },
      "system-reporter": {
        "complexity": "medium"
      },
      "system-scanner": {
        "complexity": "medium"
      },
      "test-cleanup-agent": {
        "complexity": "medium"
      },
      "test-content-draft-agent": {
        "complexity": "low"
      },
      "test-content-enhancer-agent": {
        "complexity": "medium"
      },
      "test-content-finalizer-agent": {
        "complexity": "medium"
      },
      "test-data-analyzer-agent": {
        "complexity": "low"
      },
      "test-data-parser-agent": {
        "complexity": "high"
      },
      "test-environment-setup-agent": {
        "complexity": "medium"
      },
      "test-execution-agent": {
        "complexity": "medium"
      },
      "test-io-patterns-agent": {
        "complexity": "high"
      },
      "test-parallel-agent-a": {
        "complexity": "medium"
      },
      "test-parallel-agent-b": {
        "complexity": "medium"
      },
      "test-parallel-agent-c": {
        "complexity": "medium"
      },
      "test-python-analyzer-agent": {
        "complexity": "medium"
      },
      "test-python-generator-agent": {
        "complexity": "medium"
      },
      "test-python-transformer-agent": {
        "complexity": "medium"
      },
      "test-rejection-logger-agent": {
        "complexity": "medium"
      },
      "test-report-generator-agent": {
        "complexity": "high"
      },
      "test-result-collector-agent": {
        "complexity": "medium"
      },
      "test-state-updater-agent": {
        "complexity": "medium"
      },
      "test-summary-generator-agent": {
        "complexity": "high"
      },
      "test-validation-agent": {
        "preferred_model": "claude-opus-4-1",
        "reason": "High quality/critical operations",
        "complexity": "medium"
      },
      "test-workflow-initializer-agent": {
        "complexity": "high"
      },
      "thriller-specialist": {
        "complexity": "high"
      },
      "transition-continuity-reviewer": {
        "complexity": "low"
      },
      "transition-planner": {
        "complexity": "medium"
      },
      "world-building-specialist": {
        "complexity": "medium"
      },
      "world-clue-specialist": {
        "complexity": "high"
      },
      "world-context-updater": {
        "complexity": "medium"
      }
    },
    "complete_flows": {
      "multi-coordinator-test": {
        "coordinator": "test-data-analysis-coordinator",
        "agents": []
      },
      "parallel-test": {
        "coordinator": "test-parallel-coordinator",
        "agents": []
      },
      "bible-view": {
        "coordinator": "bible-view-coordinator",
        "agents": [
          "bible-viewer"
        ]
      },
      "book-complete": {
        "coordinator": "book-complete-coordinator",
        "agents": [
          "completion-validator",
          "series-progress-updater",
          "transition-planner",
          "metadata-generator",
          "manuscript-assembler",
          "continuity-final-checker",
          "archive-creator",
          "final-quality-validator",
          "completion-certifier"
        ]
      },
      "chapter-start": {
        "coordinator": "chapter-start-coordinator",
        "agents": [
          "entity-validator",
          "bible-compliance-validator",
          "quality-scorer",
          "scene-generator",
          "outline-generator"
        ]
      },
      "context-sync": {
        "coordinator": "context-sync-coordinator",
        "agents": [
          "world-context-updater",
          "characters-context-updater",
          "sync-reporter",
          "quality-gate-validator",
          "entity-dictionary-updater",
          "plot-context-updater"
        ]
      },
      "extend-series": {
        "coordinator": "extend-series-coordinator",
        "agents": [
          "thread-expansion-planner",
          "world-expansion-architect",
          "extension-validator",
          "character-arc-extender",
          "requirements-gatherer",
          "bible-updater",
          "plot-thread-architect",
          "implementation-planner"
        ]
      },
      "github-sync": {
        "coordinator": "github-sync-coordinator",
        "agents": [
          "sync-verifier",
          "mapping-updater",
          "github-validator",
          "chapter-formatter",
          "bible-formatter",
          "sync-scope-analyzer",
          "issue-synchronizer"
        ]
      },
      "next-book": {
        "coordinator": "next-book-coordinator",
        "agents": [
          "book-outline-architect",
          "bible-architect",
          "series-state-validator",
          "transition-documenter",
          "book-end-state-analyzer",
          "transition-continuity-reviewer",
          "book-structure-initializer"
        ]
      },
      "next-chapter": {
        "coordinator": "next-chapter-coordinator",
        "agents": [
          "post-generation-validator",
          "chapter-scanner",
          "chapter-start-coordinator",
          "previous-chapter-validator",
          "delegation-planner",
          "progress-tracker"
        ]
      },
      "next": {
        "coordinator": "next-recommendation-coordinator",
        "agents": [
          "recommendation-generator",
          "priority-calculator",
          "project-analyzer"
        ]
      },
      "project-new": {
        "coordinator": "project-new-coordinator",
        "agents": [
          "project-name-resolver",
          "bible-architect",
          "series-brainstormer",
          "project-finalizer",
          "bible-reviewer",
          "series-bible-reviewer",
          "project-initializer"
        ]
      },
      "project-switch": {
        "coordinator": "project-switch-coordinator",
        "agents": [
          "project-validator",
          "context-preserver",
          "project-activator",
          "project-transition-manager"
        ]
      },
      "quality-check-cross": {
        "coordinator": "quality-check-cross-coordinator",
        "agents": [
          "cross-chapter-aggregator",
          "range-validator",
          "character-arc-validator",
          "pacing-analyzer",
          "cross-chapter-reporter",
          "world-consistency-checker",
          "cross-chapter-flow-validator",
          "plot-thread-tracker"
        ]
      },
      "quality-check-individual": {
        "coordinator": "quality-check-individual-coordinator",
        "agents": [
          "quality-report-generator",
          "character-voice-cross-validator",
          "bible-compliance-validator",
          "plot-hole-validator",
          "prerequisites-validator",
          "quality-scorer",
          "continuity-guard-specialist"
        ]
      },
      "smart-fix-cross": {
        "coordinator": "smart-fix-cross-coordinator",
        "agents": [
          "character-voice-cross-validator",
          "foreshadowing-specialist",
          "quality-scorer",
          "story-thread-tracker",
          "continuity-guard-specialist",
          "prose-craft-specialist",
          "dialogue-character-specialist",
          "foreshadowing-payoff-mapper",
          "cross-chapter-flow-validator"
        ]
      },
      "smart-fix": {
        "coordinator": "smart-fix-coordinator",
        "agents": [
          "emotion-specialist",
          "quality-scorer",
          "continuity-guard-specialist",
          "prose-craft-specialist",
          "dialogue-character-specialist"
        ]
      },
      "standup": {
        "coordinator": "standup-coordinator",
        "agents": [
          "system-health-monitor",
          "quality-metrics-analyzer",
          "progress-metrics-collector",
          "insight-generator",
          "report-formatter",
          "context-learning-assessor",
          "data-aggregator",
          "issue-risk-detector"
        ]
      },
      "status": {
        "coordinator": "status-coordinator",
        "agents": [
          "status-report-generator"
        ]
      },
      "system-check": {
        "coordinator": "system-check-coordinator",
        "agents": [
          "system-scanner",
          "system-reporter",
          "system-analyzer"
        ]
      },
      "unified-update-pipeline": {
        "coordinator": "unified-update-pipeline-coordinator",
        "agents": [
          "world-context-updater",
          "characters-context-updater",
          "chapter-meta-updater",
          "quality-validator",
          "update-report-generator",
          "project-stats-updater",
          "entity-dictionary-updater",
          "plot-context-updater"
        ]
      }
    }
  },
  "usage_patterns": {
    "coordinator_usage": {
      "bible-view-coordinator": [
        "bible-view"
      ],
      "book-complete-coordinator": [
        "book-complete"
      ],
      "chapter-planning-coordinator": [],
      "chapter-start-coordinator": [
        "next-chapter",
        "chapter-start"
      ],
      "context-sync-coordinator": [
        "context-sync"
      ],
      "extend-series-coordinator": [
        "extend-series"
      ],
      "github-sync-coordinator": [
        "github-sync"
      ],
      "next-book-coordinator": [
        "next-book"
      ],
      "next-chapter-coordinator": [
        "next-chapter"
      ],
      "next-recommendation-coordinator": [
        "next"
      ],
      "project-new-coordinator": [
        "project-new"
      ],
      "project-switch-coordinator": [
        "project-switch"
      ],
      "quality-check-cross-coordinator": [
        "quality-check-cross"
      ],
      "quality-check-individual-coordinator": [
        "quality-check-individual"
      ],
      "smart-fix-coordinator": [
        "smart-fix"
      ],
      "smart-fix-cross-coordinator": [
        "smart-fix-cross"
      ],
      "standup-coordinator": [
        "standup"
      ],
      "status-coordinator": [
        "status"
      ],
      "system-check-coordinator": [
        "system-check"
      ],
      "test-architecture-coordinator": [
        "architecture-test"
      ],
      "test-content-generation-coordinator": [
        "multi-coordinator-test"
      ],
      "test-data-analysis-coordinator": [
        "multi-coordinator-test"
      ],
      "test-human-in-loop-coordinator": [
        "human-in-loop-test"
      ],
      "test-parallel-coordinator": [
        "architecture-test",
        "parallel-test"
      ],
      "test-python-pipeline-coordinator": [
        "python-pipeline-test"
      ],
      "unified-update-pipeline-coordinator": [
        "unified-update-pipeline"
      ]
    },
    "agent_usage": {
      "archive-creator": [
        "book-complete-coordinator"
      ],
      "author-voice-signature-specialist": [],
      "bible-architect": [
        "project-new-coordinator",
        "next-book-coordinator",
        "series-brainstormer"
      ],
      "bible-cache-updater": [
        "bible-compliance-validator",
        "plot-hole-validator",
        "quality-scorer",
        "continuity-guard-specialist",
        "cross-chapter-flow-validator"
      ],
      "bible-compliance-validator": [
        "quality-check-individual-coordinator",
        "chapter-start-coordinator"
      ],
      "bible-reviewer": [
        "project-new-coordinator",
        "bible-viewer"
      ],
      "bible-viewer": [
        "bible-view-coordinator"
      ],
      "book-outline-architect": [
        "next-book-coordinator",
        "outline-generator"
      ],
      "book-outline-reviewer": [],
      "book-pacing-analyzer": [
        "smart-fix-cross-coordinator"
      ],
      "brainstorming-completeness-validator": [],
      "chapter-meta-updater": [
        "world-context-updater",
        "unified-update-pipeline-coordinator",
        "characters-context-updater",
        "project-stats-updater",
        "entity-dictionary-updater",
        "plot-context-updater"
      ],
      "chapter-scanner": [
        "next-chapter-coordinator"
      ],
      "character-voice-cross-validator": [
        "smart-fix-cross-coordinator",
        "quality-check-individual-coordinator"
      ],
      "characters-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ],
      "claude-code-expert": [
        "knowledge-base-updater"
      ],
      "clue-integration-specialist": [],
      "completion-certifier": [
        "book-complete-coordinator"
      ],
      "completion-validator": [
        "book-complete-coordinator"
      ],
      "context-validator": [],
      "continuity-final-checker": [
        "book-complete-coordinator"
      ],
      "continuity-guard-specialist": [
        "smart-fix-cross-coordinator",
        "cross-chapter-flow-validator",
        "quality-check-individual-coordinator",
        "smart-fix-coordinator"
      ],
      "cozy-mystery-specialist": [
        "bible-architect"
      ],
      "cross-chapter-flow-validator": [
        "smart-fix-cross-coordinator",
        "quality-check-cross-coordinator",
        "book-pacing-analyzer"
      ],
      "current-project-updater": [],
      "dialogue-character-specialist": [
        "smart-fix-cross-coordinator",
        "quality-report-generator",
        "world-clue-specialist",
        "smart-fix-coordinator"
      ],
      "emotion-specialist": [
        "smart-fix-coordinator"
      ],
      "emotion-weaver-specialist": [
        "book-pacing-analyzer"
      ],
      "emotional-trigger-specialist": [],
      "entity-dictionary-creator": [
        "entity-dictionary-updater",
        "chapter-start-coordinator"
      ],
      "entity-dictionary-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator",
        "entity-dictionary-creator"
      ],
      "entity-validator": [
        "chapter-start-coordinator"
      ],
      "fantasy-specialist": [
        "bible-architect"
      ],
      "final-quality-validator": [
        "claude-code-expert",
        "book-complete-coordinator"
      ],
      "foreshadowing-payoff-mapper": [
        "smart-fix-cross-coordinator"
      ],
      "foreshadowing-specialist": [
        "smart-fix-cross-coordinator",
        "foreshadowing-payoff-mapper",
        "story-thread-tracker"
      ],
      "humanization-specialist": [],
      "humor-injection-specialist": [],
      "knowledge-base-updater": [],
      "manuscript-assembler": [
        "book-complete-coordinator"
      ],
      "metadata-generator": [
        "book-complete-coordinator"
      ],
      "novel-quality-process-analyzer": [],
      "outline-generator": [
        "chapter-planning-coordinator",
        "chapter-start-coordinator"
      ],
      "plot-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ],
      "plot-hole-validator": [
        "quality-check-individual-coordinator"
      ],
      "prerequisites-validator": [
        "quality-check-individual-coordinator"
      ],
      "project-initializer": [
        "project-new-coordinator"
      ],
      "project-stats-updater": [
        "unified-update-pipeline-coordinator"
      ],
      "prose-craft-specialist": [
        "smart-fix-cross-coordinator",
        "smart-fix-coordinator"
      ],
      "quality-gate-validator": [
        "context-sync-coordinator"
      ],
      "quality-report-generator": [
        "quality-check-individual-coordinator"
      ],
      "quality-scorer": [
        "quality-report-generator",
        "novel-quality-process-analyzer",
        "smart-fix-coordinator",
        "chapter-start-coordinator",
        "chapter-meta-updater",
        "smart-fix-cross-coordinator",
        "quality-check-individual-coordinator",
        "claude-code-expert"
      ],
      "report-deduplication-specialist": [],
      "romance-specialist": [
        "bible-architect"
      ],
      "scene-generator": [
        "dialogue-character-specialist",
        "system-reporter",
        "chapter-start-coordinator",
        "novel-quality-process-analyzer"
      ],
      "series-bible-architect": [],
      "series-bible-reviewer": [
        "project-new-coordinator"
      ],
      "series-brainstormer": [
        "project-new-coordinator",
        "project-initializer"
      ],
      "series-progress-updater": [
        "book-complete-coordinator"
      ],
      "status-report-generator": [
        "status-coordinator"
      ],
      "story-thread-tracker": [
        "smart-fix-cross-coordinator"
      ],
      "system-analyzer": [
        "system-check-coordinator"
      ],
      "system-reporter": [
        "system-check-coordinator"
      ],
      "system-scanner": [
        "system-check-coordinator"
      ],
      "test-cleanup-agent": [
        "test-architecture-coordinator"
      ],
      "test-content-draft-agent": [
        "test-human-in-loop-coordinator"
      ],
      "test-content-enhancer-agent": [
        "test-rejection-logger-agent",
        "test-human-in-loop-coordinator"
      ],
      "test-content-finalizer-agent": [
        "test-human-in-loop-coordinator"
      ],
      "test-data-analyzer-agent": [
        "test-data-analysis-coordinator"
      ],
      "test-data-parser-agent": [
        "test-data-analysis-coordinator"
      ],
      "test-environment-setup-agent": [
        "test-architecture-coordinator"
      ],
      "test-execution-agent": [
        "test-architecture-coordinator",
        "test-environment-setup-agent"
      ],
      "test-io-patterns-agent": [
        "test-architecture-coordinator"
      ],
      "test-parallel-agent-a": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-parallel-agent-b": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-parallel-agent-c": [
        "test-parallel-coordinator",
        "test-environment-setup-agent"
      ],
      "test-python-analyzer-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-python-generator-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-python-transformer-agent": [
        "test-python-pipeline-coordinator"
      ],
      "test-rejection-logger-agent": [],
      "test-report-generator-agent": [
        "test-content-generation-coordinator"
      ],
      "test-result-collector-agent": [
        "test-architecture-coordinator"
      ],
      "test-state-updater-agent": [],
      "test-summary-generator-agent": [
        "test-content-generation-coordinator"
      ],
      "test-validation-agent": [
        "test-architecture-coordinator"
      ],
      "test-workflow-initializer-agent": [
        "test-human-in-loop-coordinator"
      ],
      "thriller-specialist": [
        "bible-architect"
      ],
      "transition-continuity-reviewer": [
        "next-book-coordinator"
      ],
      "transition-planner": [
        "book-complete-coordinator"
      ],
      "world-building-specialist": [],
      "world-clue-specialist": [],
      "world-context-updater": [
        "unified-update-pipeline-coordinator",
        "context-sync-coordinator"
      ]
    }
  }
}