{
  "scan_metadata": {
    "timestamp": "20250922_141339",
    "scan_version": "v5.0_ENHANCED",
    "completion_status": "complete",
    "semantic_modules": 10,
    "extraction_fields": 17,
    "enhancement_level": "comprehensive",
    "new_features": [
      "25+ orphan detection patterns",
      "15+ CLAUDE.md violation checks",
      "Cross-reference analysis",
      "Dependency graph building",
      "Component count validation",
      "Architecture compliance scoring",
      "Workflow pattern analysis",
      "Enhanced trigger word detection"
    ]
  },
  "statistics": {
    "total_components": 69,
    "commands": 12,
    "coordinators": 10,
    "agents": 47,
    "critical_violations": 21,
    "major_violations": 70,
    "minor_violations": 27,
    "orphan_patterns": 266,
    "expected_counts": {
      "commands": 12,
      "coordinators": 10,
      "agents": 15
    },
    "count_discrepancies": {
      "agents": {
        "expected": 15,
        "actual": 47,
        "severity": "unexpected_growth"
      }
    },
    "workflow_analysis": {
      "command_to_coordinator_chains": 11,
      "coordinator_to_agent_patterns": 0,
      "orphaned_coordinators": 0,
      "orphaned_agents": 0
    },
    "architecture_violations": [],
    "violation_breakdown": {
      "major": 70,
      "critical": 21,
      "minor": 27
    }
  },
  "cross_references": {
    "art-article-initiator": [
      "art-brainstorm",
      "art",
      "brainstorm",
      "art-brainstorm",
      "art",
      "brainstorm",
      "art-article-initiator",
      "art-registry-updater"
    ],
    "art-article-writer": [
      "art",
      "art",
      "art-article-writer"
    ],
    "art-audience-analyst": [
      "art",
      "art",
      "art-audience-analyst"
    ],
    "art-competitor-scanner": [
      "art",
      "art",
      "art-competitor-scanner",
      "competitor-scanner"
    ],
    "art-fact-checker": [
      "art",
      "art",
      "art-fact-checker"
    ],
    "art-materials-processor": [
      "art",
      "art",
      "art-materials-processor"
    ],
    "art-platform-optimizer": [
      "art",
      "art",
      "art-platform-optimizer"
    ],
    "art-quality-scorer": [
      "art",
      "art",
      "art-quality-scorer"
    ],
    "art-registry-updater": [
      "art",
      "art",
      "art-registry-updater"
    ],
    "art-topic-explorer": [
      "art",
      "art",
      "art-topic-explorer",
      "topic-explorer"
    ],
    "art-trend-researcher": [
      "art",
      "art",
      "art-trend-researcher"
    ],
    "art-visual-designer": [
      "art",
      "art",
      "art-visual-designer"
    ],
    "art-workflow-coordinator": [
      "art",
      "brainstorm",
      "continue",
      "art",
      "brainstorm",
      "continue",
      "art-workflow-coordinator",
      "art-article-initiator",
      "art-article-writer",
      "art-audience-analyst",
      "art-competitor-scanner",
      "art-fact-checker",
      "art-materials-processor",
      "art-platform-optimizer",
      "art-quality-scorer",
      "art-registry-updater",
      "art-topic-explorer",
      "art-trend-researcher",
      "art-visual-designer",
      "competitor-scanner",
      "topic-explorer"
    ],
    "audience-profiler": [
      "art",
      "art",
      "audience-profiler"
    ],
    "bible-generator": [
      "art",
      "art",
      "bible-generator",
      "voice-analyzer"
    ],
    "brainstorm-coordinator": [
      "art",
      "brainstorm",
      "continue",
      "art",
      "brainstorm",
      "continue",
      "brainstorm-coordinator",
      "research-coordinator",
      "audience-profiler",
      "trend-analyzer",
      "voice-analyzer"
    ],
    "claude-code-expert": [
      "art",
      "continue",
      "system-check",
      "art",
      "continue",
      "system-check",
      "claude-code-expert"
    ],
    "gemini-auditor": [
      "art",
      "art",
      "gemini-auditor"
    ],
    "project-manager": [
      "art",
      "brainstorm",
      "continue",
      "art",
      "brainstorm",
      "continue",
      "brainstorm-coordinator",
      "project-manager"
    ],
    "research-coordinator": [
      "art",
      "art",
      "research-coordinator",
      "topic-explorer",
      "trend-analyzer"
    ],
    "system-analyzer": [
      "art",
      "continue",
      "art",
      "continue",
      "system-analyzer"
    ],
    "system-check-coordinator": [
      "art",
      "continue",
      "system-check",
      "art",
      "continue",
      "system-check",
      "system-check-coordinator",
      "system-analyzer",
      "system-reporter",
      "system-scanner"
    ],
    "system-reporter": [
      "art",
      "system-check",
      "art",
      "system-check",
      "system-reporter"
    ],
    "system-scanner": [
      "art",
      "art",
      "system-scanner"
    ],
    "test-architecture-coordinator": [
      "art",
      "art",
      "test-architecture-coordinator",
      "test-parallel-coordinator",
      "test-cleanup-agent",
      "test-environment-setup-agent",
      "test-execution-agent",
      "test-io-patterns-agent",
      "test-result-collector-agent",
      "test-validation-agent"
    ],
    "test-cleanup-agent": [
      "architecture-test",
      "art",
      "multi-coordinator-test",
      "architecture-test",
      "art",
      "multi-coordinator-test",
      "test-cleanup-agent"
    ],
    "test-content-enhancer-agent": [
      "continue",
      "continue",
      "test-content-enhancer-agent"
    ],
    "test-data-analysis-coordinator": [
      "art",
      "art",
      "test-content-generation-coordinator",
      "test-data-analysis-coordinator",
      "test-data-analyzer-agent",
      "test-data-parser-agent"
    ],
    "test-data-analyzer-agent": [
      "art",
      "continue",
      "art",
      "continue",
      "test-data-analyzer-agent"
    ],
    "test-data-parser-agent": [
      "art",
      "art",
      "test-data-parser-agent"
    ],
    "test-human-in-loop-coordinator": [
      "art",
      "continue",
      "art",
      "continue",
      "test-human-in-loop-coordinator",
      "test-content-draft-agent",
      "test-content-enhancer-agent",
      "test-content-finalizer-agent",
      "test-workflow-initializer-agent"
    ],
    "test-io-patterns-agent": [
      "art",
      "art",
      "test-io-patterns-agent"
    ],
    "test-parallel-agent-a": [
      "art",
      "art",
      "test-parallel-agent-a"
    ],
    "test-parallel-agent-b": [
      "art",
      "art",
      "test-parallel-agent-b"
    ],
    "test-parallel-agent-c": [
      "art",
      "art",
      "test-parallel-agent-c"
    ],
    "test-parallel-coordinator": [
      "art",
      "art",
      "test-parallel-coordinator",
      "test-parallel-agent-a",
      "test-parallel-agent-b",
      "test-parallel-agent-c"
    ],
    "test-rejection-logger-agent": [
      "art",
      "art",
      "test-content-enhancer-agent",
      "test-rejection-logger-agent"
    ],
    "test-report-generator-agent": [
      "art",
      "art",
      "test-report-generator-agent"
    ],
    "test-state-updater-agent": [
      "continue",
      "continue",
      "test-state-updater-agent"
    ],
    "test-summary-generator-agent": [
      "art",
      "art",
      "test-summary-generator-agent"
    ],
    "test-workflow-initializer-agent": [
      "art",
      "art",
      "test-workflow-initializer-agent"
    ],
    "topic-explorer": [
      "art",
      "art",
      "topic-explorer"
    ],
    "visual-creator": [
      "art",
      "continue",
      "art",
      "continue",
      "visual-creator"
    ],
    "voice-analyzer": [
      "art",
      "art",
      "voice-analyzer"
    ],
    "architecture-test": [
      "architecture-test",
      "multi-coordinator-test",
      "test-architecture-coordinator",
      "test-parallel-coordinator",
      "test-cleanup-agent",
      "test-environment-setup-agent",
      "test-execution-agent",
      "test-io-patterns-agent",
      "test-parallel-agent-a",
      "test-parallel-agent-b",
      "test-parallel-agent-c",
      "test-result-collector-agent",
      "test-validation-agent"
    ],
    "art-brainstorm": [
      "art-brainstorm",
      "art",
      "brainstorm",
      "art-workflow-coordinator"
    ],
    "art": [
      "art",
      "brainstorm",
      "continue",
      "art-workflow-coordinator"
    ],
    "brainstorm": [
      "art",
      "brainstorm",
      "continue",
      "brainstorm-coordinator",
      "project-manager"
    ],
    "continue": [
      "art",
      "brainstorm",
      "continue",
      "brainstorm-coordinator",
      "project-manager"
    ],
    "human-in-loop-test": [
      "continue",
      "test-human-in-loop-coordinator"
    ],
    "multi-coordinator-test": [
      "architecture-test",
      "test-content-generation-coordinator",
      "test-data-analysis-coordinator",
      "test-data-analyzer-agent",
      "test-data-parser-agent",
      "test-report-generator-agent",
      "test-summary-generator-agent"
    ],
    "parallel-test": [
      "test-parallel-coordinator",
      "test-parallel-agent-a",
      "test-parallel-agent-b",
      "test-parallel-agent-c"
    ],
    "python-pipeline-test": [
      "test-python-pipeline-coordinator"
    ],
    "test-auto-registry": [
      "art",
      "art-workflow-coordinator",
      "art-registry-updater"
    ],
    "system-check": [
      "system-check",
      "system-check-coordinator"
    ],
    "test-content-generation-coordinator": [
      "test-content-generation-coordinator",
      "test-data-analysis-coordinator",
      "test-report-generator-agent",
      "test-summary-generator-agent"
    ],
    "test-python-pipeline-coordinator": [
      "test-python-pipeline-coordinator",
      "test-python-analyzer-agent",
      "test-python-generator-agent",
      "test-python-transformer-agent"
    ],
    "competitor-scanner": [
      "competitor-scanner"
    ],
    "test-content-draft-agent": [
      "test-content-draft-agent"
    ],
    "test-content-finalizer-agent": [
      "test-content-finalizer-agent"
    ],
    "test-environment-setup-agent": [
      "test-environment-setup-agent",
      "test-execution-agent",
      "test-parallel-agent-a",
      "test-parallel-agent-b",
      "test-parallel-agent-c"
    ],
    "test-execution-agent": [
      "test-execution-agent"
    ],
    "test-python-analyzer-agent": [
      "test-python-analyzer-agent"
    ],
    "test-python-generator-agent": [
      "test-python-generator-agent"
    ],
    "test-python-transformer-agent": [
      "test-python-transformer-agent"
    ],
    "test-result-collector-agent": [
      "test-result-collector-agent"
    ],
    "test-validation-agent": [
      "test-validation-agent"
    ],
    "trend-analyzer": [
      "trend-analyzer"
    ]
  },
  "dependency_graph": {
    "art-article-initiator": [
      "art-article-initiator",
      "art-brainstorm",
      "brainstorm",
      "art",
      "art-registry-updater"
    ],
    "art-article-writer": [
      "art",
      "art-article-writer"
    ],
    "art-audience-analyst": [
      "art-audience-analyst",
      "art"
    ],
    "art-competitor-scanner": [
      "art",
      "competitor-scanner",
      "art-competitor-scanner"
    ],
    "art-fact-checker": [
      "art",
      "art-fact-checker"
    ],
    "art-materials-processor": [
      "art",
      "art-materials-processor"
    ],
    "art-platform-optimizer": [
      "art",
      "art-platform-optimizer"
    ],
    "art-quality-scorer": [
      "art",
      "art-quality-scorer"
    ],
    "art-registry-updater": [
      "art",
      "art-registry-updater"
    ],
    "art-topic-explorer": [
      "art",
      "topic-explorer",
      "art-topic-explorer"
    ],
    "art-trend-researcher": [
      "art-trend-researcher",
      "art"
    ],
    "art-visual-designer": [
      "art",
      "art-visual-designer"
    ],
    "art-workflow-coordinator": [
      "art-topic-explorer",
      "art-article-initiator",
      "art-materials-processor",
      "art-fact-checker",
      "art-visual-designer",
      "art-audience-analyst",
      "art-article-writer",
      "art-workflow-coordinator",
      "competitor-scanner",
      "art-quality-scorer",
      "brainstorm",
      "art-platform-optimizer",
      "topic-explorer",
      "art-trend-researcher",
      "art",
      "art-registry-updater",
      "continue",
      "art-competitor-scanner"
    ],
    "audience-profiler": [
      "art",
      "audience-profiler"
    ],
    "bible-generator": [
      "voice-analyzer",
      "art",
      "bible-generator"
    ],
    "brainstorm-coordinator": [
      "trend-analyzer",
      "voice-analyzer",
      "brainstorm-coordinator",
      "brainstorm",
      "audience-profiler",
      "art",
      "research-coordinator",
      "continue"
    ],
    "claude-code-expert": [
      "system-check",
      "art",
      "continue",
      "claude-code-expert"
    ],
    "gemini-auditor": [
      "art",
      "gemini-auditor"
    ],
    "project-manager": [
      "brainstorm-coordinator",
      "brainstorm",
      "project-manager",
      "art",
      "continue"
    ],
    "research-coordinator": [
      "art",
      "research-coordinator",
      "topic-explorer",
      "trend-analyzer"
    ],
    "system-analyzer": [
      "art",
      "continue",
      "system-analyzer"
    ],
    "system-check-coordinator": [
      "system-check",
      "system-check-coordinator",
      "system-reporter",
      "art",
      "system-scanner",
      "continue",
      "system-analyzer"
    ],
    "system-reporter": [
      "system-check",
      "art",
      "system-reporter"
    ],
    "system-scanner": [
      "art",
      "system-scanner"
    ],
    "test-architecture-coordinator": [
      "test-result-collector-agent",
      "test-execution-agent",
      "test-architecture-coordinator",
      "test-io-patterns-agent",
      "test-cleanup-agent",
      "test-validation-agent",
      "test-environment-setup-agent",
      "art",
      "test-parallel-coordinator"
    ],
    "test-cleanup-agent": [
      "architecture-test",
      "art",
      "multi-coordinator-test",
      "test-cleanup-agent"
    ],
    "test-content-enhancer-agent": [
      "test-content-enhancer-agent",
      "continue"
    ],
    "test-data-analysis-coordinator": [
      "test-data-analysis-coordinator",
      "test-content-generation-coordinator",
      "test-data-parser-agent",
      "test-data-analyzer-agent",
      "art"
    ],
    "test-data-analyzer-agent": [
      "art",
      "continue",
      "test-data-analyzer-agent"
    ],
    "test-data-parser-agent": [
      "art",
      "test-data-parser-agent"
    ],
    "test-human-in-loop-coordinator": [
      "test-human-in-loop-coordinator",
      "test-workflow-initializer-agent",
      "test-content-enhancer-agent",
      "test-content-finalizer-agent",
      "test-content-draft-agent",
      "art",
      "continue"
    ],
    "test-io-patterns-agent": [
      "test-io-patterns-agent",
      "art"
    ],
    "test-parallel-agent-a": [
      "art",
      "test-parallel-agent-a"
    ],
    "test-parallel-agent-b": [
      "art",
      "test-parallel-agent-b"
    ],
    "test-parallel-agent-c": [
      "art",
      "test-parallel-agent-c"
    ],
    "test-parallel-coordinator": [
      "test-parallel-agent-a",
      "art",
      "test-parallel-agent-c",
      "test-parallel-coordinator",
      "test-parallel-agent-b"
    ],
    "test-rejection-logger-agent": [
      "test-rejection-logger-agent",
      "art",
      "test-content-enhancer-agent"
    ],
    "test-report-generator-agent": [
      "art",
      "test-report-generator-agent"
    ],
    "test-state-updater-agent": [
      "continue",
      "test-state-updater-agent"
    ],
    "test-summary-generator-agent": [
      "art",
      "test-summary-generator-agent"
    ],
    "test-workflow-initializer-agent": [
      "art",
      "test-workflow-initializer-agent"
    ],
    "topic-explorer": [
      "art",
      "topic-explorer"
    ],
    "visual-creator": [
      "art",
      "continue",
      "visual-creator"
    ],
    "voice-analyzer": [
      "voice-analyzer",
      "art"
    ],
    "architecture-test": [
      "test-result-collector-agent",
      "test-execution-agent",
      "test-architecture-coordinator",
      "test-io-patterns-agent",
      "test-cleanup-agent",
      "test-parallel-agent-a",
      "test-validation-agent",
      "test-environment-setup-agent",
      "multi-coordinator-test",
      "architecture-test",
      "test-parallel-agent-c",
      "test-parallel-coordinator",
      "test-parallel-agent-b"
    ],
    "art-brainstorm": [
      "art",
      "art-brainstorm",
      "art-workflow-coordinator",
      "brainstorm"
    ],
    "art": [
      "continue",
      "art",
      "brainstorm",
      "art-workflow-coordinator"
    ],
    "brainstorm": [
      "brainstorm-coordinator",
      "brainstorm",
      "project-manager",
      "art",
      "continue"
    ],
    "continue": [
      "brainstorm-coordinator",
      "brainstorm",
      "project-manager",
      "art",
      "continue"
    ],
    "human-in-loop-test": [
      "test-human-in-loop-coordinator",
      "continue"
    ],
    "multi-coordinator-test": [
      "test-data-analysis-coordinator",
      "test-content-generation-coordinator",
      "test-data-parser-agent",
      "test-data-analyzer-agent",
      "architecture-test",
      "test-report-generator-agent",
      "test-summary-generator-agent"
    ],
    "parallel-test": [
      "test-parallel-agent-c",
      "test-parallel-agent-b",
      "test-parallel-coordinator",
      "test-parallel-agent-a"
    ],
    "python-pipeline-test": [
      "test-python-pipeline-coordinator"
    ],
    "test-auto-registry": [
      "art",
      "art-registry-updater",
      "art-workflow-coordinator"
    ],
    "system-check": [
      "system-check",
      "system-check-coordinator"
    ],
    "test-content-generation-coordinator": [
      "test-data-analysis-coordinator",
      "test-content-generation-coordinator",
      "test-report-generator-agent",
      "test-summary-generator-agent"
    ],
    "test-python-pipeline-coordinator": [
      "test-python-analyzer-agent",
      "test-python-generator-agent",
      "test-python-pipeline-coordinator",
      "test-python-transformer-agent"
    ],
    "competitor-scanner": [
      "competitor-scanner"
    ],
    "test-content-draft-agent": [
      "test-content-draft-agent"
    ],
    "test-content-finalizer-agent": [
      "test-content-finalizer-agent"
    ],
    "test-environment-setup-agent": [
      "test-execution-agent",
      "test-parallel-agent-a",
      "test-environment-setup-agent",
      "test-parallel-agent-c",
      "test-parallel-agent-b"
    ],
    "test-execution-agent": [
      "test-execution-agent"
    ],
    "test-python-analyzer-agent": [
      "test-python-analyzer-agent"
    ],
    "test-python-generator-agent": [
      "test-python-generator-agent"
    ],
    "test-python-transformer-agent": [
      "test-python-transformer-agent"
    ],
    "test-result-collector-agent": [
      "test-result-collector-agent"
    ],
    "test-validation-agent": [
      "test-validation-agent"
    ],
    "trend-analyzer": [
      "trend-analyzer"
    ]
  },
  "components": [
    {
      "name": "architecture-test",
      "description": "Execute Claude Code architecture standardization validation tests for system stability and compliance",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\architecture-test.md",
      "component_type": "command",
      "line_count": 163,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Execute Claude Code architecture standardization validation tests for system stability and compliance",
        "argument-hint": "<test-type>"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: description: Execute Claude Code architecture standardization validation tests for system stability and compliance",
        "validation_rules: Execute comprehensive Claude Code architecture validation tests to verify recursion protection, architecture patterns, I/O flows, and standardization ",
        "workflow_logic: This command executes a comprehensive architecture test suite through a coordinator-managed workflow. The process involves two phases: first getting a",
        "validation_rules: 3. Complete all phases for full architecture validation",
        "quality_standards: The test suite contains 17+ test scenarios to validate the NOVELSYS-SWARM system's Claude Code architecture implementation against 2024-2025 standards",
        "quality_standards: - `compliance` - Standardization compliance tests only",
        "validation_rules: ### Architecture Validation Test Execution",
        "workflow_logic: Execute comprehensive Claude Code architecture validation testing through coordinator-managed workflow.",
        "workflow_logic: **CRITICAL**: Main Claude must execute the complete workflow as follows:",
        "validation_rules: - Execute phases sequentially: Environment Setup -> Core Tests -> I/O Tests -> Validation -> Results -> Cleanup"
      ],
      "violations": [
        "MAJOR: Command exceeds 120 lines (163)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-brainstorm",
      "description": "Setup new article type with strategy development",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\art-brainstorm.md",
      "component_type": "command",
      "line_count": 76,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Setup new article type with strategy development",
        "argument-hint": "[type_name] or no arguments to see available types"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "data_transformation: This command initiates the strategic brainstorming process for new article types or manages existing type configurations.",
        "workflow_logic: Use the art-workflow-coordinator subagent to orchestrate the interactive brainstorming workflow.",
        "decision_logic: - Routing decision: Direct to article creation if ready",
        "workflow_logic: ## Brainstorming Workflow Components",
        "data_transformation: **Strategic Development Process (Phase 1):**",
        "quality_standards: **Quality Assurance:**",
        "data_transformation: The coordinator will manage the interactive Q&A process and generate the complete strategic foundation before marking the type as ready for article pr"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art",
      "description": "Smart article creation with type routing",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\art.md",
      "component_type": "command",
      "line_count": 85,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Smart article creation with type routing",
        "argument-hint": "[topic] or no arguments to continue current work"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "parallel_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: 4. Routes to appropriate workflow phase",
        "workflow_logic: For new article creation, use the art-workflow-coordinator subagent to orchestrate the complete 9-phase workflow process.",
        "quality_standards: - Quality threshold: 85/100 minimum",
        "workflow_logic: **Critical workflow elements:**",
        "approval_process: - Human-in-loop quality control (Phase 5-6: review and revision cycles)",
        "quality_standards: - Systematic quality assurance (fact-checking and scoring)",
        "quality_standards: **Quality standards maintained:**",
        "quality_standards: - 85/100 quality score threshold",
        "compliance_rules: - Platform compliance across all 3 channels",
        "workflow_logic: The workflow coordinator automatically includes registry update tasks in every execution plan. When executing the coordinator's plan:"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "brainstorm",
      "description": "Interactive brainstorming system for writing projects",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\brainstorm.md",
      "component_type": "command",
      "line_count": 89,
      "has_unicode": true,
      "yaml_frontmatter": {
        "name": "brainstorm",
        "description": "Interactive brainstorming system for writing projects"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "materials_integration"
      ],
      "business_logic": [
        "decision_logic: ### Step 2: Route Based on Choice",
        "decision_logic: - Current input (start/continue/user choice)",
        "user_interaction: 5. Wait for user input",
        "data_transformation: 4. Process user input",
        "workflow_logic: This ensures existing workflows continue to work while adding project management as an optional enhancement."
      ],
      "violations": [
        "CRITICAL: Contains Unicode characters at position 1630"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "continue",
      "description": "Quickly resume work on the most recent project",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\continue.md",
      "component_type": "command",
      "line_count": 124,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "continue",
        "description": "Quickly resume work on the most recent project"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "workflow_logic: ### Step 3: Route to Appropriate Workflow",
        "error_recovery: ## Fallback Behavior",
        "workflow_logic: 2. Correct workflow routing: 100%"
      ],
      "violations": [
        "MAJOR: Command exceeds 120 lines (124)"
      ],
      "division_of_labor": {
        "responsibility_score": 15,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 15,
        "semantic_analysis": {},
        "architecture_compliance": "non_compliant"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "human-in-loop-test",
      "description": "Test human-in-the-loop workflow with sequential agent execution and approval points",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\human-in-loop-test.md",
      "component_type": "command",
      "line_count": 82,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Test human-in-the-loop workflow with sequential agent execution and approval points",
        "argument-hint": "<test-scenario>"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Test human-in-the-loop workflow with sequential agent execution and approval points",
        "approval_process: Test the 5-layer architecture with human approval points in sequential agent execution.",
        "workflow_logic: This command tests human-in-the-loop workflows where:",
        "decision_logic: - Human approval required at key decision points",
        "approval_process: - `simple` - Single approval point",
        "approval_process: - `complex` - Multiple approval points with revisions",
        "approval_process: - `iterative` - Revision loops until approval",
        "workflow_logic: ### Human-in-the-Loop Workflow Test",
        "workflow_logic: Use Task tool to call test-human-in-loop-coordinator to orchestrate the interactive workflow:",
        "approval_process: - Human review point inserted"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 70,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 70,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling",
        "undefined_template_variables"
      ]
    },
    {
      "name": "multi-coordinator-test",
      "description": "Test multi-coordinator collaboration in complex scenarios",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\multi-coordinator-test.md",
      "component_type": "command",
      "line_count": 117,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Test multi-coordinator collaboration in complex scenarios",
        "argument-hint": "<complexity> <data-size>"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration",
        "multi_coordinator",
        "quality_gates"
      ],
      "business_logic": [
        "data_transformation: Test a Command calling multiple Coordinators in collaboration, validating complex multi-phase task processing.",
        "validation_rules: - Analyzes requirements and creates execution plan",
        "integration_logic: - Main Claude integrates both coordinator outputs",
        "data_transformation: - Task -> test-data-parser-agent (process input data)",
        "data_transformation: - Task -> test-data-analyzer-agent (analyze processed data)",
        "validation_rules: **Phase 3: Collaboration Validation**",
        "validation_rules: **Phase 1 Success Criteria:**",
        "data_transformation: - [ ] test-data-parser-agent successfully processes input data",
        "validation_rules: **Phase 2 Success Criteria:**",
        "validation_rules: **Multi-Coordinator Collaboration Validation:**"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 70,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 70,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling",
        "undefined_template_variables",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "parallel-test",
      "description": "Execute real parallel execution test to validate Claude Code concurrent capabilities",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\parallel-test.md",
      "component_type": "command",
      "line_count": 70,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Execute real parallel execution test to validate Claude Code concurrent capabilities",
        "argument-hint": "<test-mode>"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: - **Architecture Validation**: Claude Code supports real parallel execution",
        "data_transformation: This test validates the core Claude Code architecture principle that agents can execute independently and concurrently through file-based communicatio"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "empty_tools_config",
        "missing_error_handling",
        "undefined_template_variables"
      ]
    },
    {
      "name": "python-pipeline-test",
      "description": "Test Python script pipeline through multiple agents with data transformation",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\python-pipeline-test.md",
      "component_type": "command",
      "line_count": 86,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Test Python script pipeline through multiple agents with data transformation",
        "argument-hint": "<data-size>"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "sequential_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "data_transformation: description: Test Python script pipeline through multiple agents with data transformation",
        "data_transformation: Test sequential Python script execution through multiple agents with data transformation.",
        "data_transformation: This command tests a data processing pipeline where:",
        "data_transformation: - Agent 2 transforms the data using Python",
        "data_transformation: - Agent 3 analyzes the transformed data using Python",
        "workflow_logic: ### Python Pipeline Test Workflow",
        "data_transformation: 2. **Phase 2: Data Transformation**",
        "data_transformation: - Applies transformations using Python",
        "data_transformation: - [ ] Agent 2 Python script reads and transforms data",
        "data_transformation: - [ ] Agent 3 Python script analyzes transformed data"
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 70,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 70,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-auto-registry",
      "description": "Test automatic registry update integration",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\test-auto-registry.md",
      "component_type": "command",
      "line_count": 62,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Test automatic registry update integration",
        "argument-hint": "no arguments needed"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "workflow_logic: Use the art-workflow-coordinator subagent to generate a sample execution plan and verify:",
        "validation_rules: ## Validation Criteria",
        "user_interaction: - [ ] No registry_update in plan (old manual system)",
        "validation_rules: This test confirms the automatic registry update system eliminates manual intervention requirements."
      ],
      "violations": [],
      "division_of_labor": {
        "responsibility_score": 45,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 45,
        "semantic_analysis": {},
        "architecture_compliance": "needs_improvement"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "validate-trigger-words",
      "description": "Scan all components for potential trigger word issues",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\validate-trigger-words.md",
      "component_type": "command",
      "line_count": 30,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Scan all components for potential trigger word issues"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ## Validation Checks"
      ],
      "violations": [
        "MINOR: Command under 50 lines (30) - may lack context",
        "CRITICAL: Contains trigger word pattern 'system_scan.json' that may cause Task tool failures"
      ],
      "division_of_labor": {
        "responsibility_score": 90,
        "delegation_pattern": "implementation_heavy",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 90,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "empty_tools_config"
      ]
    },
    {
      "name": "system-check",
      "description": "Run comprehensive system health check and architecture analysis",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/commands\\novel\\system-check.md",
      "component_type": "command",
      "line_count": 49,
      "has_unicode": false,
      "yaml_frontmatter": {
        "description": "Run comprehensive system health check and architecture analysis"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: Performs complete system architecture analysis, compliance validation, and health assessment.",
        "validation_rules: - Comprehensive CLAUDE.md compliance validation",
        "integration_logic: This command initiates a deep system analysis using V5 scanner that combines V3's complete semantic extraction (7 extractors) with V4's enhanced orpha",
        "validation_rules: Analyze system health requirements and create execution plan for three-phase analysis:",
        "validation_rules: - Phase 2: Architecture analysis with full ComponentMetadata - I/O patterns, prompts, execution context, business logic, and compliance validation",
        "compliance_rules: - **Analysis file**: Comprehensive analysis with relationships, compliance, and health metrics",
        "approval_process: - Review system_report.md for complete findings"
      ],
      "violations": [
        "MINOR: Command under 50 lines (49) - may lack context"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "proper_delegation",
        "coordination_role": "",
        "execution_role": "",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "empty_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-workflow-coordinator",
      "description": "Orchestrates the complete 9-phase article production workflow",
      "tools": "Read, Write, Bash, Grep",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Central workflow orchestration without execution - planning only",
      "file_path": ".claude/agents\\art-workflow-coordinator.md",
      "component_type": "coordinator",
      "line_count": 903,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-workflow-coordinator",
        "description": "Orchestrates the complete 9-phase article production workflow",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Central workflow orchestration without execution - planning only",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- Orchestration request: article creation, brainstorming, or status check",
          "- Article topic: user-provided subject or \"continue current work\"",
          "- Registry context: current system state and work progress",
          "- Action type: new_article, continue_work, setup_type, or status_check",
          "- Working directory context: base path for relative path resolution"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Orchestration request: article creation, brainstorming, or status check",
          "- Article topic: user-provided subject or \"continue current work\"",
          "- Registry context: current system state and work progress",
          "- Action type: new_article, continue_work, setup_type, or status_check",
          "- Working directory context: base path for relative path resolution"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "parallel_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "human_in_loop",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "workflow_logic: name: art-workflow-coordinator",
        "workflow_logic: description: Orchestrates the complete 9-phase article production workflow",
        "workflow_logic: thinking: Central workflow orchestration without execution - planning only",
        "validation_rules: ### Input Requirements",
        "workflow_logic: - `.claude/data/articles/ARTICLE_WORKFLOW_DETAIL.md` - Phase specifications and requirements",
        "validation_rules: - Phase-specific agent tasks and requirements",
        "validation_rules: - Quality checkpoints and success criteria",
        "workflow_logic: I orchestrate the complete 9-phase article production workflow by analyzing current state and returning appropriate execution plans with proper path c",
        "approval_process: - **Phase 5**: Quality review (fact-checking + scoring)",
        "decision_logic: - **Phase 6**: Revision cycle (human-in-loop decisions)"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Agent exceeds 500 lines (903)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "brainstorm-coordinator",
      "description": "Interactive brainstorming coordinator that guides users through type-specific writing exploration",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Manage interactive brainstorming sessions, present choices, save state, route to appropriate workflows based on content type selection",
      "file_path": ".claude/agents\\brainstorm-coordinator.md",
      "component_type": "coordinator",
      "line_count": 547,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "brainstorm-coordinator",
        "description": "Interactive brainstorming coordinator that guides users through type-specific writing exploration",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Manage interactive brainstorming sessions, present choices, save state, route to appropriate workflows based on content type selection"
      },
      "io_spec": {
        "input_requirements": [
          "- \"Guide brainstorming session. Current input: start. Session state: new. Project ID: none\"",
          "- \"Guide brainstorming session. Current input: start. Session state: new. Project ID: 20250117_143022_mystery\"",
          "- \"Guide brainstorming session. Current input: 4. Session state: exists. Project ID: 20250117_143022_mystery\"",
          "- \"Guide brainstorming session. Current input: continue. Session state: exists. Project ID: 20250117_143022_mystery\""
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- \"Guide brainstorming session. Current input: start. Session state: new. Project ID: none\"",
          "- \"Guide brainstorming session. Current input: start. Session state: new. Project ID: 20250117_143022_mystery\"",
          "- \"Guide brainstorming session. Current input: 4. Session state: exists. Project ID: 20250117_143022_mystery\"",
          "- \"Guide brainstorming session. Current input: continue. Session state: exists. Project ID: 20250117_143022_mystery\""
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "workflow_logic: thinking: Manage interactive brainstorming sessions, present choices, save state, route to appropriate workflows based on content type selection",
        "validation_rules: ### Input Requirements",
        "decision_logic: Current input: {user_choice or 'start'}",
        "decision_logic: \"interaction_type\": \"choice_prompt\" | \"text_input\" | \"confirmation\",",
        "decision_logic: \"interaction_type\": \"choice_prompt\",",
        "decision_logic: \"display_text\": \"Welcome to Interactive Brainstorming!\\n\\nPlease select your content type:\\n1) Blog Post (500-3,000 words) - Quick thoughts, tips, upd",
        "decision_logic: \"interaction_type\": \"choice_prompt\",",
        "decision_logic: - If types exist and are active, offer choice",
        "decision_logic: \"interaction_type\": \"choice_prompt\",",
        "decision_logic: \"interaction_type\": \"choice_prompt\","
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Agent exceeds 500 lines (547)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "research-coordinator",
      "description": "Use PROACTIVELY when conversation mentions writing project, story ideas, book planning, novel development, or \"I want to write\" - orchestrates PROGRESSIVE research workflow by analyzing current state and suggesting next logical steps",
      "tools": "Read, Write, Bash, Grep",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Analyze conversation context and research progress to suggest 1-2 most relevant next steps, not comprehensive plans. Support user-guided exploration with clear rationale for suggestions. Enable back-tracking and direction changes.",
      "file_path": ".claude/agents\\research-coordinator.md",
      "component_type": "coordinator",
      "line_count": 440,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "research-coordinator",
        "description": "Use PROACTIVELY when conversation mentions writing project, story ideas, book planning, novel development, or \"I want to write\" - orchestrates PROGRESSIVE research workflow by analyzing current state and suggesting next logical steps",
        "thinking": "Analyze conversation context and research progress to suggest 1-2 most relevant next steps, not comprehensive plans. Support user-guided exploration with clear rationale for suggestions. Enable back-tracking and direction changes.",
        "tools": "Read, Write, Bash, Grep",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- What user has mentioned about their project",
          "- Any research already completed",
          "- User's apparent interests and preferences",
          "- Signals about direction (broad vs focused)",
          "- Questions or uncertainties expressed"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- What user has mentioned about their project",
          "- Any research already completed",
          "- User's apparent interests and preferences",
          "- Signals about direction (broad vs focused)",
          "- Questions or uncertainties expressed"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "batch_processing",
        "error_handling",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "workflow_logic: description: Use PROACTIVELY when conversation mentions writing project, story ideas, book planning, novel development, or \"I want to write\" - orchest",
        "decision_logic: - **Decision Point Recognition** - Know when user needs to choose direction",
        "validation_rules: ### Input Requirements",
        "decision_logic: \"user_benefit\": \"Make informed decisions about genre viability\"",
        "decision_logic: \"decision_guidance\": {",
        "decision_logic: \"decision_readiness\": assess_commitment_signals()",
        "decision_logic: \"focusing_direction\": \"Narrowing down choices\",",
        "decision_logic: \"decision_point\": \"Choosing between options\",",
        "decision_logic: \"decision_enabling\": what_helps_user_choose_direction(),",
        "decision_logic: - What decision will it enable?"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (440)"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "system-check-coordinator",
      "description": "Orchestrates comprehensive system health check with complete architecture analysis",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Plan comprehensive system health check execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute",
      "file_path": ".claude/agents\\system-check-coordinator.md",
      "component_type": "coordinator",
      "line_count": 311,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "system-check-coordinator",
        "description": "Orchestrates comprehensive system health check with complete architecture analysis",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Plan comprehensive system health check execution - determine timestamp and report paths, validate environment setup, design three-phase execution plan for scanning analysis and reporting, ensure proper data flow between agents, handle error cases gracefully, and return detailed JSON plan for Main Claude to execute"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- **From Main Claude**:",
          "- Request for system health check",
          "- Optional: specific focus areas or components"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: **PLANNING ONLY** - Analyze system health check requirements and return a comprehensive execution plan for complete system architecture analysis and c",
        "validation_rules: ### Input Requirements",
        "validation_rules: - **Plan includes**: Agent tasks, sequencing, paths, success criteria",
        "validation_rules: When invoked, analyze requirements and return a structured execution plan for comprehensive system health checking.",
        "compliance_rules: - system-analyzer: Relationship and compliance analysis",
        "integration_logic: \"note\": \"system_check_v5.py combines V3 completeness (7 extractors) + V4 accuracy (8-pattern orphan detection)\"",
        "validation_rules: \"success_criteria\": \"Complete scan data file created (~1MB) with full semantic extraction\"",
        "compliance_rules: \"description\": \"Analyze relationships and validate compliance\",",
        "compliance_rules: \"compliance\": \"All CLAUDE.md violations identified\",",
        "validation_rules: \"success_criteria\": \"Analysis file created with health score\""
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (311)",
        "CRITICAL: Contains trigger word pattern 'system_analysis.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/report/.*/.*\\.json' that may cause Task tool failures",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "role_terminology_confusion",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "test-architecture-coordinator",
      "description": "Orchestrates comprehensive Claude Code architecture validation testing",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Analyze architecture requirements, design validation tests for recursion safety and tool configurations, coordinate test execution sequence, verify compliance criteria, return structured JSON plan",
      "file_path": ".claude/agents\\test-architecture-coordinator.md",
      "component_type": "coordinator",
      "line_count": 237,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-architecture-coordinator",
        "description": "Orchestrates comprehensive Claude Code architecture validation testing",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Analyze architecture requirements, design validation tests for recursion safety and tool configurations, coordinate test execution sequence, verify compliance criteria, return structured JSON plan"
      },
      "io_spec": {
        "input_requirements": [
          "- Test type parameter (full/quick/recursion/architecture/io/compliance)",
          "- Expected test coverage requirements",
          "- Safety and cleanup requirements"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test type parameter (full/quick/recursion/architecture/io/compliance)",
          "- Expected test coverage requirements",
          "- Safety and cleanup requirements"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: description: Orchestrates comprehensive Claude Code architecture validation testing",
        "validation_rules: thinking: Analyze architecture requirements, design validation tests for recursion safety and tool configurations, coordinate test execution sequence,",
        "validation_rules: ### Input Requirements",
        "compliance_rules: - Test type parameter (full/quick/recursion/architecture/io/compliance)",
        "validation_rules: - Expected test coverage requirements",
        "validation_rules: - Safety and cleanup requirements",
        "validation_rules: \"plan_name\": \"Claude Code Architecture Validation Plan\",",
        "validation_rules: \"name\": \"Format and Standards Validation\",",
        "validation_rules: \"agents\": [\"test-validation-agent\"],",
        "validation_rules: When planning environment setup, I analyze requirements to:"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (237)"
      ],
      "division_of_labor": {
        "responsibility_score": 40,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 40,
        "semantic_analysis": {},
        "architecture_compliance": "needs_improvement"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "test-content-generation-coordinator",
      "description": "Creates content generation plan based on Phase 1 analysis for multi-coordinator testing",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Analyze Phase 1 requirements, design content generation workflow, coordinate agent tasks and dependencies, handle validation and quality gates",
      "file_path": ".claude/agents\\test-content-generation-coordinator.md",
      "component_type": "coordinator",
      "line_count": 226,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-content-generation-coordinator",
        "description": "Creates content generation plan based on Phase 1 analysis for multi-coordinator testing",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Analyze Phase 1 requirements, design content generation workflow, coordinate agent tasks and dependencies, handle validation and quality gates"
      },
      "io_spec": {
        "input_requirements": [
          "- Phase 1 analysis results",
          "- Content generation requirements"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 20
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Phase 1 analysis results",
          "- Content generation requirements",
          "- Output format specifications"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "workflow_logic: thinking: Analyze Phase 1 requirements, design content generation workflow, coordinate agent tasks and dependencies, handle validation and quality gat",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Content generation requirements",
        "validation_rules: \"dependency_validation\": {",
        "validation_rules: \"validation_status\": \"verified\",",
        "validation_rules: \"success_criteria\": {",
        "validation_rules: \"collaboration_validation\": [",
        "compliance_rules: \"architecture_compliance\": \"confirmed\"",
        "validation_rules: 2. Structuring content requirements",
        "validation_rules: ### Phase Dependency Validation"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (226)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "test-data-analysis-coordinator",
      "description": "Analyzes test requirements and creates data processing plan for multi-coordinator testing",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Analyze test data requirements, design processing workflows for multiple phases, coordinate agent task dependencies, handle error conditions and validation, return structured execution plan",
      "file_path": ".claude/agents\\test-data-analysis-coordinator.md",
      "component_type": "coordinator",
      "line_count": 221,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-data-analysis-coordinator",
        "description": "Analyzes test requirements and creates data processing plan for multi-coordinator testing",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Analyze test data requirements, design processing workflows for multiple phases, coordinate agent task dependencies, handle error conditions and validation, return structured execution plan"
      },
      "io_spec": {
        "input_requirements": [
          "- Task complexity level (simple/complex/advanced)",
          "- Data size parameters (50-500)",
          "- Test context and requirements"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Task complexity level (simple/complex/advanced)",
          "- Data size parameters (50-500)",
          "- Test context and requirements"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "batch_processing",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: description: Analyzes test requirements and creates data processing plan for multi-coordinator testing",
        "workflow_logic: thinking: Analyze test data requirements, design processing workflows for multiple phases, coordinate agent task dependencies, handle error conditions",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Test context and requirements",
        "data_transformation: \"content\": {\"complexity\": \"complex\", \"processing_mode\": \"comprehensive\"}",
        "data_transformation: \"task\": \"Parse and process the test data file\",",
        "data_transformation: \"task\": \"Analyze processed data and generate insights\",",
        "validation_rules: \"success_criteria\": {",
        "data_transformation: \"parsed_data.json with processed items\",",
        "data_transformation: \"analysis logs documenting processing\""
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (221)"
      ],
      "division_of_labor": {
        "responsibility_score": 40,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 40,
        "semantic_analysis": {},
        "architecture_compliance": "needs_improvement"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "test-human-in-loop-coordinator",
      "description": "Orchestrates human-in-the-loop test workflows with approval points and conditional execution",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Design sequential test workflows with human decision points, handle approval/rejection/revision responses through conditional execution planning",
      "file_path": ".claude/agents\\test-human-in-loop-coordinator.md",
      "component_type": "coordinator",
      "line_count": 211,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-human-in-loop-coordinator",
        "description": "Orchestrates human-in-the-loop test workflows with approval points and conditional execution",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Design sequential test workflows with human decision points, handle approval/rejection/revision responses through conditional execution planning"
      },
      "io_spec": {
        "input_requirements": [
          "- Test scenario type (simple/complex/iterative)",
          "- Workflow requirements",
          "- Human interaction preferences"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test scenario type (simple/complex/iterative)",
          "- Workflow requirements",
          "- Human interaction preferences"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Orchestrates human-in-the-loop test workflows with approval points and conditional execution",
        "workflow_logic: thinking: Design sequential test workflows with human decision points, handle approval/rejection/revision responses through conditional execution plan",
        "validation_rules: ### Input Requirements",
        "workflow_logic: - Workflow requirements",
        "user_interaction: - Human interaction preferences",
        "workflow_logic: - Previous workflow state if exists",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (if continuing)",
        "workflow_logic: \"plan_name\": \"Human-in-the-Loop Test Workflow Execution Plan\",",
        "workflow_logic: \"workflow_type\": \"interactive_sequential_test\",",
        "workflow_logic: \"description\": \"Initialize test workflow state\","
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (211)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "test-parallel-coordinator",
      "description": "Orchestrates real parallel execution testing with multiple agents",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-parallel-coordinator.md",
      "component_type": "coordinator",
      "line_count": 189,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-parallel-coordinator",
        "description": "Orchestrates real parallel execution testing with multiple agents",
        "tools": "Read, Write, Bash, Grep"
      },
      "io_spec": {
        "input_requirements": [
          "- Parallel test execution request",
          "- Performance threshold requirements (default: >50% efficiency gain)",
          "- Test duration parameters"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Parallel test execution request",
          "- Performance threshold requirements (default: >50% efficiency gain)",
          "- Test duration parameters"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Performance threshold requirements (default: >50% efficiency gain)",
        "validation_rules: \"success_criteria\": {",
        "validation_rules: 4. Planning performance analysis and validation",
        "validation_rules: 4. **Concurrency Validation**: Verify agents ran simultaneously, not sequentially",
        "validation_rules: ## Success Validation"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "CRITICAL: Contains trigger word pattern '.claude/agents/.*\\.md' that may cause Task tool failures"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "test-python-pipeline-coordinator",
      "description": "Orchestrates Python script pipeline test with sequential data processing",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Plan sequential Python script execution through multiple agents with data transformation",
      "file_path": ".claude/agents\\test-python-pipeline-coordinator.md",
      "component_type": "coordinator",
      "line_count": 82,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-python-pipeline-coordinator",
        "description": "Orchestrates Python script pipeline test with sequential data processing",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Plan sequential Python script execution through multiple agents with data transformation"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "sequential_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "state_management"
      ],
      "business_logic": [
        "data_transformation: description: Orchestrates Python script pipeline test with sequential data processing",
        "data_transformation: thinking: Plan sequential Python script execution through multiple agents with data transformation",
        "data_transformation: \"pipeline_type\": \"sequential_data_processing\",",
        "data_transformation: \"phase_id\": \"phase_2_transformation\",",
        "data_transformation: \"description\": \"Transform data using Python\",",
        "data_transformation: \"agent\": \"test-python-transformer-agent\",",
        "data_transformation: \"task\": \"Execute Python script to transform stage1 data. The script data_transformer.py will read stage1_data.json and create stage2_data.json and sta",
        "data_transformation: \"description\": \"Analyze transformed data using Python\",",
        "validation_rules: \"success_criteria\": {"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling",
        "role_terminology_confusion"
      ]
    },
    {
      "name": "art-article-initiator",
      "description": "Creates article folder structure and initializes metadata for new articles",
      "tools": "Read, Write, Bash",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "",
      "file_path": ".claude/agents\\art-article-initiator.md",
      "component_type": "agent",
      "line_count": 451,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-article-initiator",
        "description": "Creates article folder structure and initializes metadata for new articles",
        "tools": "Read, Write, Bash",
        "model": "claude-haiku-3-5-20241022"
      },
      "io_spec": {
        "input_requirements": [
          "- Topic: User-provided article subject",
          "- Article type: Target article category (e.g., \"ai_realist\")",
          "- Working directory: Base path for article creation",
          "- Strategy context: Reference to completed strategy files"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Topic: User-provided article subject",
          "- Article type: Target article category (e.g., \"ai_realist\")",
          "- Working directory: Base path for article creation",
          "- Strategy context: Reference to completed strategy files"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "validation_rules: **Creates complete article folder structure and initializes metadata.json for new articles with proper tracking and citation requirements.**",
        "quality_standards: - **Folder Structure Creation** - Creates standardized folder structure with user materials support",
        "validation_rules: - **Metadata Initialization** - Populates metadata.json with all required fields including citation requirements",
        "workflow_logic: - **Article Workflow Standards** - Understands complete 9-phase workflow structure",
        "quality_standards: - **Metadata Schema** - Implements standardized metadata format with citation compliance",
        "data_transformation: ### Step 1: Input Processing (with Defensive Handling)",
        "validation_rules: - Read `strategy/voice_guide.md` for voice requirements",
        "data_transformation: # Convert topic to URL-safe slug (lowercase, underscores)",
        "quality_standards: # Create standard output directories (system-generated content)",
        "data_transformation: # Create processed materials directory (analyzed user content)"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (451)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-article-writer",
      "description": "Create complete article draft integrating user materials and comprehensive research findings",
      "tools": "Read, Write",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Comprehensive article writing, research synthesis, user materials integration, voice consistency, statistical foundation, citation compliance",
      "file_path": ".claude/agents\\art-article-writer.md",
      "component_type": "agent",
      "line_count": 422,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-article-writer",
        "description": "Create complete article draft integrating user materials and comprehensive research findings",
        "tools": "Read, Write",
        "model": "claude-sonnet-4-20250514",
        "thinking": "Comprehensive article writing, research synthesis, user materials integration, voice consistency, statistical foundation, citation compliance"
      },
      "io_spec": {
        "input_requirements": [
          "- Article topic and target specifications",
          "- Research integration requirements: synthesize all research findings",
          "- Voice consistency mandate: strict adherence to voice guide",
          "- Quality standards: word count (2000 +/-10%), structure, data integration",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: prioritize user materials insights throughout article"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 60
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Article topic and target specifications",
          "- Research integration requirements: synthesize all research findings",
          "- Voice consistency mandate: strict adherence to voice guide",
          "- Quality standards: word count (2000 +/-10%), structure, data integration",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: prioritize user materials insights throughout article"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "compliance_rules: thinking: Comprehensive article writing, research synthesis, user materials integration, voice consistency, statistical foundation, citation complianc",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Research integration requirements: synthesize all research findings",
        "quality_standards: - Quality standards: word count (2000 +/-10%), structure, data integration",
        "data_transformation: - `processed/materials_insights.md` - User materials analysis (when available) **NEW**",
        "quality_standards: - `../../../strategy/voice_guide.md` - voice, tone, and style specifications (STANDARD LOCATION)",
        "validation_rules: - `metadata.json` - article type, topic, and production requirements",
        "quality_standards: - Content quality evaluation and areas for potential enhancement",
        "validation_rules: ### Language & Citation Requirements",
        "quality_standards: ### Voice Guide Path Standard (v2.0)"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (422)"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "art-audience-analyst",
      "description": "Analyze target audience psychology and information needs with user materials integration",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Deep audience psychology analysis, demographic research, pain point identification, engagement patterns, user materials integration, behavioral insights",
      "file_path": ".claude/agents\\art-audience-analyst.md",
      "component_type": "agent",
      "line_count": 383,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-audience-analyst",
        "description": "Analyze target audience psychology and information needs with user materials integration",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Deep audience psychology analysis, demographic research, pain point identification, engagement patterns, user materials integration, behavioral insights"
      },
      "io_spec": {
        "input_requirements": [
          "- Target audience focus: specific demographic or psychographic segments",
          "- Article topic context: subject matter for audience relevance",
          "- Audience analysis scope: broad demographic or focused behavioral analysis",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Target audience focus: specific demographic or psychographic segments",
          "- Article topic context: subject matter for audience relevance",
          "- Audience analysis scope: broad demographic or focused behavioral analysis",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "materials_integration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: - **Materials integration**: process user materials insights when available",
        "data_transformation: - `processed/materials_insights.md` - User materials analysis (when available)",
        "validation_rules: ### Language & Citation Requirements",
        "decision_logic: - **Behavioral Psychology** - Understanding decision-making and motivation patterns",
        "integration_logic: You are a specialized agent focused on **audience analysis and psychology**. Deliver comprehensive audience insights that seamlessly integrate user ma",
        "data_transformation: # First priority: Check if user materials were processed",
        "data_transformation: if [ -f \"processed/materials_insights.md\" ]; then",
        "quality_standards: echo \"No user materials - proceeding with standard audience research\"",
        "data_transformation: 2. **Process User Materials (when available)**:"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (383)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-competitor-scanner",
      "description": "Scan competitive content landscape for gaps and opportunities with user materials integration",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Competitive content analysis, market gap identification, differentiation opportunities, user materials integration, strategic positioning research",
      "file_path": ".claude/agents\\art-competitor-scanner.md",
      "component_type": "agent",
      "line_count": 388,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-competitor-scanner",
        "description": "Scan competitive content landscape for gaps and opportunities with user materials integration",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Competitive content analysis, market gap identification, differentiation opportunities, user materials integration, strategic positioning research"
      },
      "io_spec": {
        "input_requirements": [
          "- Topic area: specific competitive landscape to analyze",
          "- Content type focus: articles, videos, research, whitepapers",
          "- Competitive scope: direct competitors, adjacent markets, or comprehensive analysis",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Topic area: specific competitive landscape to analyze",
          "- Content type focus: articles, videos, research, whitepapers",
          "- Competitive scope: direct competitors, adjacent markets, or comprehensive analysis",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "materials_integration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: - **Materials integration**: process user materials insights when available",
        "data_transformation: - `processed/materials_insights.md` - User materials analysis (when available)",
        "validation_rules: ### Language & Citation Requirements",
        "integration_logic: You are a specialized agent focused on **competitive content analysis**. Deliver comprehensive competitive intelligence that seamlessly integrates use",
        "data_transformation: # First priority: Check if user materials were processed",
        "data_transformation: if [ -f \"processed/materials_insights.md\" ]; then",
        "quality_standards: echo \"No user materials - proceeding with standard competitive analysis\"",
        "data_transformation: 2. **Process User Materials (when available)**:",
        "data_transformation: # Read processed/materials_insights.md to understand:"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (388)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-fact-checker",
      "description": "Verify all factual claims, data accuracy, and logical consistency in articles",
      "tools": "Read, Write, WebSearch",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Verify factual claims systematically, validate sources and statistics, cross-reference data points including user materials, identify potential inaccuracies, generate pass fail assessments",
      "file_path": ".claude/agents\\art-fact-checker.md",
      "component_type": "agent",
      "line_count": 261,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-fact-checker",
        "description": "Verify all factual claims, data accuracy, and logical consistency in articles",
        "tools": "Read, Write, WebSearch",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Verify factual claims systematically, validate sources and statistics, cross-reference data points including user materials, identify potential inaccuracies, generate pass fail assessments"
      },
      "io_spec": {
        "input_requirements": [
          "- Article draft: path to content requiring fact verification",
          "- Research files: supporting materials for cross-reference validation",
          "- Validation level: basic, standard, or rigorous checking depth",
          "- Critical focus areas: specific claims or sections requiring extra attention",
          "- Source priorities: trusted sources for verification preference",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 60
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Article draft: path to content requiring fact verification",
          "- Research files: supporting materials for cross-reference validation",
          "- Validation level: basic, standard, or rigorous checking depth",
          "- Critical focus areas: specific claims or sections requiring extra attention",
          "- Source priorities: trusted sources for verification preference",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "pipeline_pattern",
        "coordinator_delegation",
        "file_communication",
        "human_in_loop",
        "state_management",
        "quality_gates",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Research files: supporting materials for cross-reference validation",
        "validation_rules: - Validation level: basic, standard, or rigorous checking depth",
        "validation_rules: - `processed/materials_insights.md` - user materials for additional validation (if available)",
        "validation_rules: - User materials validation status when applicable",
        "validation_rules: ### Language & Citation Requirements",
        "data_transformation: - User materials insights accessed in local `processed/` folder",
        "validation_rules: **2. Factual Claim Validation**",
        "quality_standards: - Assess methodology and research quality",
        "data_transformation: ### Fact-Checking Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (261)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-materials-processor",
      "description": "Processes PDF art materials using enhanced PyMuPDF + PDFPlumber script",
      "tools": "Read, Write, Bash",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Call enhanced Python script for robust PDF processing with proper path handling",
      "file_path": ".claude/agents\\art-materials-processor.md",
      "component_type": "agent",
      "line_count": 234,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-materials-processor",
        "description": "Processes PDF art materials using enhanced PyMuPDF + PDFPlumber script",
        "tools": "Read, Write, Bash",
        "model": "claude-sonnet-4-20250514",
        "thinking": "Call enhanced Python script for robust PDF processing with proper path handling"
      },
      "io_spec": {
        "input_requirements": [
          "- PDF file path: absolute path to PDF file to process",
          "- Processing request: extract text, images, and tables from PDF",
          "- Output directory: where to save processing results",
          "- Optional timeout: processing timeout in minutes (default 30)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- PDF file path: absolute path to PDF file to process",
          "- Processing request: extract text, images, and tables from PDF",
          "- Output directory: where to save processing results",
          "- Optional timeout: processing timeout in minutes (default 30)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "data_transformation: name: art-materials-processor",
        "data_transformation: description: Processes PDF art materials using enhanced PyMuPDF + PDFPlumber script",
        "data_transformation: thinking: Call enhanced Python script for robust PDF processing with proper path handling",
        "validation_rules: ### Input Requirements",
        "data_transformation: - PDF file path: absolute path to PDF file to process",
        "data_transformation: - Processing request: extract text, images, and tables from PDF",
        "data_transformation: - Output directory: where to save processing results",
        "data_transformation: - Optional timeout: processing timeout in minutes (default 30)",
        "data_transformation: - Enhanced Python script: `.claude/scripts/art-materials-processor-enhanced.py`",
        "data_transformation: - `{pdf_name}/metadata.json` - Processing metadata and statistics"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (234)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "art-platform-optimizer",
      "description": "Optimize article content for specific publishing platforms and their unique requirements",
      "tools": "Read, Write",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Analyze platform requirements for Medium Substack ElevenReader, optimize content for each channel with PROPER Medium subtitle and strategic tags, ensure compliance while maintaining message integrity, balance platform constraints with content quality",
      "file_path": ".claude/agents\\art-platform-optimizer.md",
      "component_type": "agent",
      "line_count": 325,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-platform-optimizer",
        "description": "Optimize article content for specific publishing platforms and their unique requirements",
        "tools": "Read, Write",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Analyze platform requirements for Medium Substack ElevenReader, optimize content for each channel with PROPER Medium subtitle and strategic tags, ensure compliance while maintaining message integrity, balance platform constraints with content quality"
      },
      "io_spec": {
        "input_requirements": [
          "- Final article: path to approved, ready-to-publish article content",
          "- Platform targets: specific platforms requiring optimization (Medium, Substack, ElevenReader)",
          "- Language requirement: All content must be in English",
          "- Citation requirement: All sources must use inline hyperlink format",
          "- Optimization level: standard or enhanced platform customization",
          "- Performance goals: specific engagement or reach objectives",
          "- Brand consistency: voice and style requirements to maintain",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 80
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Final article: path to approved, ready-to-publish article content",
          "- Platform targets: specific platforms requiring optimization (Medium, Substack, ElevenReader)",
          "- Language requirement: All content must be in English",
          "- Citation requirement: All sources must use inline hyperlink format",
          "- Optimization level: standard or enhanced platform customization",
          "- Performance goals: specific engagement or reach objectives",
          "- Brand consistency: voice and style requirements to maintain",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "state_management",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: description: Optimize article content for specific publishing platforms and their unique requirements",
        "validation_rules: thinking: Analyze platform requirements for Medium Substack ElevenReader, optimize content for each channel with PROPER Medium subtitle and strategic ",
        "validation_rules: ### Input Requirements",
        "quality_standards: - Optimization level: standard or enhanced platform customization",
        "validation_rules: - Brand consistency: voice and style requirements to maintain",
        "validation_rules: - `strategy/voice_guide.md` - brand voice consistency requirements (may be in parent directory)",
        "validation_rules: - Compliance verification for platform-specific requirements",
        "validation_rules: ### Language & Citation Requirements",
        "data_transformation: I transform approved article content into platform-specific versions that maximize engagement, visibility, and performance on each target platform whi",
        "validation_rules: **CRITICAL: MEDIUM OPTIMIZATION REQUIREMENTS**"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (325)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "art-quality-scorer",
      "description": "Multi-dimensional quality assessment and scoring for article content",
      "tools": "Read, Write",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Evaluate content across 5 dimensions with REALISTIC 95+ scoring standards, calculate weighted scores, analyze strategic alignment with BALANCED voice compliance, identify improvement opportunities, prioritize recommendations by impact including user materials integration assessment",
      "file_path": ".claude/agents\\art-quality-scorer.md",
      "component_type": "agent",
      "line_count": 419,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-quality-scorer",
        "description": "Multi-dimensional quality assessment and scoring for article content",
        "tools": "Read, Write",
        "model": "claude-sonnet-4-20250514",
        "thinking": "Evaluate content across 5 dimensions with REALISTIC 95+ scoring standards, calculate weighted scores, analyze strategic alignment with BALANCED voice compliance, identify improvement opportunities, prioritize recommendations by impact including user materials integration assessment"
      },
      "io_spec": {
        "input_requirements": [
          "- Article draft: path to content requiring quality assessment",
          "- Strategy documents: content strategy and voice guide for alignment checking",
          "- Target metrics: REALISTIC quality thresholds and scoring expectations (95+ target)",
          "- Assessment focus: specific quality dimensions to emphasize",
          "- Comparison baseline: industry standards or previous article benchmarks",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 60
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Article draft: path to content requiring quality assessment",
          "- Strategy documents: content strategy and voice guide for alignment checking",
          "- Target metrics: REALISTIC quality thresholds and scoring expectations (95+ target)",
          "- Assessment focus: specific quality dimensions to emphasize",
          "- Comparison baseline: industry standards or previous article benchmarks",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "quality_standards: name: art-quality-scorer",
        "quality_standards: description: Multi-dimensional quality assessment and scoring for article content",
        "quality_standards: thinking: Evaluate content across 5 dimensions with REALISTIC 95+ scoring standards, calculate weighted scores, analyze strategic alignment with BALAN",
        "validation_rules: ### Input Requirements",
        "quality_standards: - Article draft: path to content requiring quality assessment",
        "quality_standards: - Target metrics: REALISTIC quality thresholds and scoring expectations (95+ target)",
        "quality_standards: - Assessment focus: specific quality dimensions to emphasize",
        "quality_standards: - Comparison baseline: industry standards or previous article benchmarks",
        "quality_standards: - `../../../strategy/voice_guide.md` - voice, tone, and style specifications (STANDARD LOCATION)",
        "data_transformation: - `processed/materials_insights.md` - user materials insights for integration assessment (if available)"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (419)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-registry-updater",
      "description": "Updates article registry.json during phase transitions",
      "tools": "Read, Write",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "This agent handles registry updates after phase completions - updating current_work status, clearing completed articles, and maintaining statistics. It reads both registry and article metadata to determine appropriate updates.",
      "file_path": ".claude/agents\\art-registry-updater.md",
      "component_type": "agent",
      "line_count": 176,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-registry-updater",
        "description": "Updates article registry.json during phase transitions",
        "tools": "Read, Write",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "This agent handles registry updates after phase completions - updating current_work status, clearing completed articles, and maintaining statistics. It reads both registry and article metadata to determine appropriate updates."
      },
      "io_spec": {
        "input_requirements": [
          "- Article directory path (e.g., \".claude/data/articles/ai_realist/content/20250920_mit_ai_failure_study\")",
          "- Phase completion context (e.g., \"research_completed\", \"article_published\", \"article_failed\")",
          "- Optional: Specific update data (word counts, image counts, platform info)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Article directory path (e.g., \".claude/data/articles/ai_realist/content/20250920_mit_ai_failure_study\")",
          "- Phase completion context (e.g., \"research_completed\", \"article_published\", \"article_failed\")",
          "- Optional: Specific update data (word counts, image counts, platform info)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "file_communication",
        "error_handling",
        "state_management",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "approval_process: | drafted | drafted | quality_review | Update current_work |",
        "decision_logic: | reviewed | reviewed | revision_decision | Update current_work |",
        "approval_process: | revised | revised | final_approval | Update current_work |",
        "data_transformation: ## Implementation Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "art-topic-explorer",
      "description": "Deep dive exploration of topic subtopics and expert perspectives with user materials integration",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Comprehensive topic exploration, subtopic identification, expert perspective analysis, user materials integration, knowledge synthesis",
      "file_path": ".claude/agents\\art-topic-explorer.md",
      "component_type": "agent",
      "line_count": 387,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-topic-explorer",
        "description": "Deep dive exploration of topic subtopics and expert perspectives with user materials integration",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Comprehensive topic exploration, subtopic identification, expert perspective analysis, user materials integration, knowledge synthesis"
      },
      "io_spec": {
        "input_requirements": [
          "- Main topic: primary subject area for deep exploration",
          "- Exploration scope: breadth vs depth focus for subtopic analysis",
          "- Expert perspective requirements: academic, industry, thought leadership",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Main topic: primary subject area for deep exploration",
          "- Exploration scope: breadth vs depth focus for subtopic analysis",
          "- Expert perspective requirements: academic, industry, thought leadership",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "materials_integration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Expert perspective requirements: academic, industry, thought leadership",
        "data_transformation: - **Materials integration**: process user materials insights when available",
        "data_transformation: - `processed/materials_insights.md` - User materials analysis (when available)",
        "validation_rules: ### Language & Citation Requirements",
        "integration_logic: You are a specialized agent focused on **comprehensive topic exploration**. Deliver deep knowledge synthesis that seamlessly integrates user materials",
        "data_transformation: # First priority: Check if user materials were processed",
        "data_transformation: if [ -f \"processed/materials_insights.md\" ]; then",
        "quality_standards: echo \"No user materials - proceeding with standard topic exploration\"",
        "data_transformation: 2. **Process User Materials (when available)**:"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (387)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-trend-researcher",
      "description": "Research market trends and emerging patterns for article topics with user materials integration",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Research current market trends and emerging patterns, integrate user materials insights, validate data recency and reliability, identify statistical foundations, synthesize insights for content strategy",
      "file_path": ".claude/agents\\art-trend-researcher.md",
      "component_type": "agent",
      "line_count": 382,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-trend-researcher",
        "description": "Research market trends and emerging patterns for article topics with user materials integration",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Research current market trends and emerging patterns, integrate user materials insights, validate data recency and reliability, identify statistical foundations, synthesize insights for content strategy"
      },
      "io_spec": {
        "input_requirements": [
          "- Topic focus: specific subject area for trend analysis",
          "- Target audience context: from strategy documents",
          "- Research scope: broad, focused, or deep analysis level",
          "- Time frame: analysis period (default: last 12 months)",
          "- Industry context: relevant sectors or markets",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 70
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Topic focus: specific subject area for trend analysis",
          "- Target audience context: from strategy documents",
          "- Research scope: broad, focused, or deep analysis level",
          "- Time frame: analysis period (default: last 12 months)",
          "- Industry context: relevant sectors or markets",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)",
          "- **Materials integration**: process user materials insights when available"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "materials_integration"
      ],
      "business_logic": [
        "integration_logic: thinking: Research current market trends and emerging patterns, integrate user materials insights, validate data recency and reliability, identify sta",
        "validation_rules: ### Input Requirements",
        "data_transformation: - **Materials integration**: process user materials insights when available",
        "data_transformation: - `processed/materials_insights.md` - User materials analysis (when available)",
        "quality_standards: - Self-assessment of coverage completeness and quality",
        "validation_rules: ### Language & Citation Requirements",
        "validation_rules: - **Data Validation** - Verify recency and reliability of trend information",
        "validation_rules: - **Source Validation** - Ensuring data quality and reliability",
        "integration_logic: You are a specialized agent focused on **market trends research**. Deliver comprehensive trend analysis that seamlessly integrates user materials with",
        "data_transformation: # First priority: Check if user materials were processed"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (382)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "art-visual-designer",
      "description": "Design visual elements and create AI generation prompts for article imagery",
      "tools": "Read, Write",
      "model": "claude-haiku-3-5-20241022",
      "thinking": "Analyze content for visual opportunities, design platform-specific requirements, generate optimized AI prompts, plan post-processing workflows",
      "file_path": ".claude/agents\\art-visual-designer.md",
      "component_type": "agent",
      "line_count": 234,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "art-visual-designer",
        "description": "Design visual elements and create AI generation prompts for article imagery",
        "tools": "Read, Write",
        "model": "claude-haiku-3-5-20241022",
        "thinking": "Analyze content for visual opportunities, design platform-specific requirements, generate optimized AI prompts, plan post-processing workflows"
      },
      "io_spec": {
        "input_requirements": [
          "- Final article: path to approved article content",
          "- Platform requirements: target platforms and their image specifications",
          "- Visual style guidance: brand guidelines and aesthetic preferences",
          "- Image quantity: number and types of visuals needed",
          "- Special requirements: specific visual elements or constraints",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 60
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Final article: path to approved article content",
          "- Platform requirements: target platforms and their image specifications",
          "- Visual style guidance: brand guidelines and aesthetic preferences",
          "- Image quantity: number and types of visuals needed",
          "- Special requirements: specific visual elements or constraints",
          "- **Working directory**: absolute path to article folder (provided by Main Claude)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "workflow_logic: thinking: Analyze content for visual opportunities, design platform-specific requirements, generate optimized AI prompts, plan post-processing workflo",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Platform requirements: target platforms and their image specifications",
        "validation_rules: - Special requirements: specific visual elements or constraints",
        "compliance_rules: - Platform compliance verification for all target platforms",
        "quality_standards: - AI generation prompt quality assessment",
        "compliance_rules: - Ensure platform compliance for image specifications",
        "quality_standards: - Maintain professional quality standards",
        "data_transformation: ### Visual Design Process",
        "approval_process: 1. **Article Content Review:**"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (234)"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "audience-profiler",
      "description": "PROACTIVE - Use PROACTIVELY when discussion mentions readers, audience, target market, who will read. Research and profile target audience demographics, preferences, and behaviors for specified genre/niche",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Research agent that analyzes target audience demographics, reading habits, purchase patterns, and content preferences. Combines web research with market analysis to create comprehensive audience profiles. Outputs single consolidated file with confidence scoring for marketing and content strategy decisions.",
      "file_path": ".claude/agents\\audience-profiler.md",
      "component_type": "agent",
      "line_count": 185,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "audience-profiler",
        "description": "PROACTIVE - Use PROACTIVELY when discussion mentions readers, audience, target market, who will read. Research and profile target audience demographics, preferences, and behaviors for specified genre/niche",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-sonnet-4-20250514",
        "thinking": "Research agent that analyzes target audience demographics, reading habits, purchase patterns, and content preferences. Combines web research with market analysis to create comprehensive audience profiles. Outputs single consolidated file with confidence scoring for marketing and content strategy decisions."
      },
      "io_spec": {
        "input_requirements": [
          "- Genre/niche specification for audience research",
          "- Conversation context for research focus",
          "- Search scope parameters (demographic filters, geographic regions)",
          "- Output directory path for knowledge base storage",
          "- Format: \"Research audience for [genre/niche] and save to knowledge base. Context: [context] Search scope: [parameters] Output directory: [path]\""
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Genre/niche specification for audience research",
          "- Conversation context for research focus",
          "- Search scope parameters (demographic filters, geographic regions)",
          "- Output directory path for knowledge base storage",
          "- Format: \"Research audience for [genre/niche] and save to knowledge base. Context: [context] Search scope: [parameters] Output directory: [path]\""
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "decision_logic: thinking: Research agent that analyzes target audience demographics, reading habits, purchase patterns, and content preferences. Combines web research",
        "validation_rules: ### Input Requirements",
        "decision_logic: - Influence of reviews and ratings on purchase decisions",
        "approval_process: - Genre review analysis and sentiment tracking",
        "approval_process: - Review and recommendation behaviors",
        "quality_standards: - research_notes (methodology, limitations, source quality assessment)",
        "decision_logic: Execute thorough audience research combining multiple data sources for actionable insights that inform content strategy and marketing decisions."
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "bible-generator",
      "description": "Generate comprehensive project bible by synthesizing all research data from knowledge_base subdirectories into production-ready documentation suite with 7 output files including series planning and cultural authenticity guides",
      "tools": "Read, Write, Bash",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Enhanced synthesis agent that reads all research files from knowledge_base subdirectories (trends, competition, audience, voice, topics), analyzes relationships and patterns, creates comprehensive project bible with all decisions, generates 7 production-ready files - series_bible.yaml, voice style guide, consistency checklist, cultural authenticity guide, environmental accuracy standards, 10-book series plan, and character development framework",
      "file_path": ".claude/agents\\bible-generator.md",
      "component_type": "agent",
      "line_count": 586,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "bible-generator",
        "description": "Generate comprehensive project bible by synthesizing all research data from knowledge_base subdirectories into production-ready documentation suite with 7 output files including series planning and cultural authenticity guides",
        "tools": "Read, Write, Bash",
        "model": "claude-sonnet-4-20250514",
        "thinking": "Enhanced synthesis agent that reads all research files from knowledge_base subdirectories (trends, competition, audience, voice, topics), analyzes relationships and patterns, creates comprehensive project bible with all decisions, generates 7 production-ready files - series_bible.yaml, voice style guide, consistency checklist, cultural authenticity guide, environmental accuracy standards, 10-book series plan, and character development framework"
      },
      "io_spec": {
        "input_requirements": [
          "- Project directory path containing knowledge_base with research subdirectories",
          "- Target output directory for comprehensive bible documentation suite",
          "- Optional project name and metadata context",
          "- Format: \"Generate comprehensive project bible suite from research data. Project: [path] Output: [directory] Context: [optional project details]\""
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Project directory path containing knowledge_base with research subdirectories",
          "- Target output directory for comprehensive bible documentation suite",
          "- Optional project name and metadata context",
          "- Format: \"Generate comprehensive project bible suite from research data. Project: [path] Output: [directory] Context: [optional project details]\""
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "decision_logic: thinking: Enhanced synthesis agent that reads all research files from knowledge_base subdirectories (trends, competition, audience, voice, topics), an",
        "validation_rules: ### Input Requirements",
        "decision_logic: - `series_bible.yaml` - Comprehensive project bible with all synthesized decisions",
        "quality_standards: - `CARIBBEAN_CULTURAL_AUTHENTICITY_GUIDE.md` - Cultural authenticity guidelines and standards",
        "validation_rules: - `ENVIRONMENTAL_ACCURACY_STANDARDS.md` - Environmental and setting accuracy requirements",
        "quality_standards: - Comprehensive bible generation completion status with synthesis quality metrics",
        "data_transformation: 2. **Load and Validate Research Files with Enhanced Processing**:",
        "data_transformation: # Enhanced processing for voice data extraction",
        "validation_rules: environmental_data = extract_environmental_accuracy_requirements(research_data)",
        "validation_rules: environmental_accuracy_requirements = extract_environmental_standards()"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Agent exceeds 500 lines (586)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling"
      ]
    },
    {
      "name": "claude-code-expert",
      "description": "MUST BE USED PROACTIVELY for \"claude code\", \"official\", \"best practice\", \"recursion\", \"coordinator\", \"Task tool\", \"subagent\", \"parallel execution\", \"create new agent\", \"create new command\", \"large file\", \"chunked reading\", \"trigger words\", \"prompt too long\", architecture questions, or preventing Claude Code crashes. Expert on official specifications, recursion prevention, trigger word patterns, and large file handling.",
      "tools": "Read, Write, Grep, WebSearch, WebFetch",
      "model": "",
      "thinking": "Analyze Claude Code architecture deeply - focus on recursion prevention, proper tool delegation, coordinator patterns, trigger word avoidance, and Main Claude's orchestration role. Expert in Task tool trigger word patterns that cause false \"Prompt too long\" errors. Expert in large file handling with chunked reading patterns (2000-line chunks) and Python script integration. Stay updated with latest official documentation and community best practices. Remember - coordinators are subagents that CANNOT call other subagents. Also remember - certain file names in Task prompts trigger automatic loading causing failures.",
      "file_path": ".claude/agents\\claude-code-expert.md",
      "component_type": "agent",
      "line_count": 807,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "claude-code-expert",
        "description": "MUST BE USED PROACTIVELY for \"claude code\", \"official\", \"best practice\", \"recursion\", \"coordinator\", \"Task tool\", \"subagent\", \"parallel execution\", \"create new agent\", \"create new command\", \"large file\", \"chunked reading\", \"trigger words\", \"prompt too long\", architecture questions, or preventing Claude Code crashes. Expert on official specifications, recursion prevention, trigger word patterns, and large file handling.",
        "tools": "Read, Write, Grep, WebSearch, WebFetch",
        "thinking": "Analyze Claude Code architecture deeply - focus on recursion prevention, proper tool delegation, coordinator patterns, trigger word avoidance, and Main Claude's orchestration role. Expert in Task tool trigger word patterns that cause false \"Prompt too long\" errors. Expert in large file handling with chunked reading patterns (2000-line chunks) and Python script integration. Stay updated with latest official documentation and community best practices. Remember - coordinators are subagents that CANNOT call other subagents. Also remember - certain file names in Task prompts trigger automatic loading causing failures."
      },
      "io_spec": {
        "input_requirements": [
          "- Expected format and parameters",
          "- Required file paths",
          "- Optional context",
          "- Orchestration request format",
          "- Required context for planning"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 50
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 20
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "human_in_loop",
        "batch_processing",
        "error_handling",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control",
        "materials_integration"
      ],
      "business_logic": [
        "user_interaction: User Input -> Command File (<100 lines target, 50-120 acceptable)",
        "validation_rules: **Requirements (2024-2025 Standards):**",
        "workflow_logic: - **Content**: Declarative instructions with workflow context, NOT implementation code",
        "validation_rules: **Requirements (2024-2025 Standards):**",
        "validation_rules: ### Input Requirements",
        "quality_standards: ### 3. Agent Files (2024-2025 Standards)",
        "quality_standards: # model: claude-opus-4-1-20250805      # Optional: for critical quality",
        "validation_rules: ### Input Requirements",
        "validation_rules: ## Validation Checklist",
        "integration_logic: - Coordinators as planning layer emerged as best practice"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Agent exceeds 500 lines (807)",
        "CRITICAL: Contains trigger word pattern 'system_scan.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern 'system_analysis.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/report/.*/.*\\.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/agents/.*\\.md' that may cause Task tool failures",
        "MAJOR: Windows backslash paths found: ['\"D:\\\\folder\\\\file.txt\"', '\"D:\\\\\\\\folder\\\\\\\\file.txt\"'] (use forward slashes)"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "hardcoded_absolute_paths",
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "competitor-scanner",
      "description": "Analyze competition in specific market niches, find gaps and opportunities. Use PROACTIVELY when discussion mentions competitors, competition, market saturation",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Execute strategic competitor research through multi-phase analysis, identify market gaps and opportunities, calculate confidence scores, save structured competitive intelligence to knowledge_base with atomic operations",
      "file_path": ".claude/agents\\competitor-scanner.md",
      "component_type": "agent",
      "line_count": 272,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "competitor-scanner",
        "description": "Analyze competition in specific market niches, find gaps and opportunities. Use PROACTIVELY when discussion mentions competitors, competition, market saturation",
        "thinking": "Execute strategic competitor research through multi-phase analysis, identify market gaps and opportunities, calculate confidence scores, save structured competitive intelligence to knowledge_base with atomic operations",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- Target niche or market segment for analysis",
          "- Conversation context (optional for better targeting)",
          "- Search scope specification (geographic, demographic, etc.)",
          "- Output directory path in knowledge_base/competitors/"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Target niche or market segment for analysis",
          "- Conversation context (optional for better targeting)",
          "- Search scope specification (geographic, demographic, etc.)",
          "- Output directory path in knowledge_base/competitors/"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "file_communication",
        "error_handling",
        "state_management"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "quality_standards: - Confidence score (0.0-1.0 based on data quality)",
        "approval_process: - \"[niche] customer complaints reviews\"",
        "quality_standards: - Product/service quality indicators",
        "quality_standards: - Product quality (1-10)",
        "quality_standards: ### Data Quality Assessment",
        "quality_standards: - 0.0-0.2: Poor data quality, analysis uncertain",
        "quality_standards: \"data_quality_notes\": \"assessment details\"",
        "quality_standards: \"product_quality_score\": 7,",
        "decision_logic: ### Error Handling and User Decision Points"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (272)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "gemini-auditor",
      "description": "PROACTIVE - Gemini CLI interface with intelligent 2.5 model selection. Use PROACTIVELY when user mentions \"gemini\", \"Gemini\", \"call gemini\", \"use gemini\", \"analyze with gemini\", or needs Gemini's 1M token context capabilities.",
      "tools": "Bash",
      "model": "sonnet",
      "thinking": "Determine optimal Gemini model for task requirements, construct appropriate prompts for 1M context window, handle error conditions and retry logic, format results appropriately for user consumption",
      "file_path": ".claude/agents\\gemini-auditor.md",
      "component_type": "agent",
      "line_count": 598,
      "has_unicode": true,
      "yaml_frontmatter": {
        "name": "gemini-auditor",
        "description": "PROACTIVE - Gemini CLI interface with intelligent 2.5 model selection. Use PROACTIVELY when user mentions \"gemini\", \"Gemini\", \"call gemini\", \"use gemini\", \"analyze with gemini\", or needs Gemini's 1M token context capabilities.",
        "tools": "Bash",
        "model": "sonnet",
        "thinking": "Determine optimal Gemini model for task requirements, construct appropriate prompts for 1M context window, handle error conditions and retry logic, format results appropriately for user consumption"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [],
        "optional_context": [],
        "prompt_documentation_present": false,
        "prompt_clarity_score": 0
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "batch_processing",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: thinking: Determine optimal Gemini model for task requirements, construct appropriate prompts for 1M context window, handle error conditions and retry",
        "approval_process: - \"代码质量评估\" → `gemini -m gemini-2.5-pro -p \"Code quality review @code.py\"`",
        "quality_standards: - Pro triggers: 审核/audit, 深度/deep, 安全/security, 代码质量/quality, 调试/debug",
        "error_recovery: local fallback_model=\"gemini-2.5-pro\"",
        "error_recovery: fallback_model=\"gemini-2.5-pro\"  # Reverse fallback for edge cases",
        "error_recovery: # Switch to fallback model after first failure",
        "error_recovery: current_model=\"$fallback_model\"",
        "error_recovery: echo \"Attempt $attempt: Switching to fallback model: $current_model\"",
        "quality_standards: echo \"All standard attempts failed. Trying ultra-simple fallback with gemini-2.5-flash...\"",
        "error_recovery: echo \"Success with ultra-simple fallback\""
      ],
      "violations": [
        "CRITICAL: Contains Unicode characters at position 833",
        "MAJOR: Tools should be a list, not string",
        "MAJOR: Agent exceeds 500 lines (598)",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling"
      ]
    },
    {
      "name": "project-manager",
      "description": "Manages writing projects lifecycle, tracks status, and handles project organization",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Scan project directories, manage index.json, track project status, return JSON plans for project operations",
      "file_path": ".claude/agents\\project-manager.md",
      "component_type": "agent",
      "line_count": 358,
      "has_unicode": true,
      "yaml_frontmatter": {
        "name": "project-manager",
        "description": "Manages writing projects lifecycle, tracks status, and handles project organization",
        "tools": "Read, Write, Bash, Grep",
        "thinking": "Scan project directories, manage index.json, track project status, return JSON plans for project operations"
      },
      "io_spec": {
        "input_requirements": [
          "- \"initialize\" - Create data structure if not exists (ALWAYS RUN FIRST)",
          "- \"scan projects\" - List all projects with status",
          "- \"create project {type} {name}\" - Initialize new project",
          "- \"get project {id}\" - Retrieve specific project details",
          "- \"update status {id} {status}\" - Update project status",
          "- \"get recent\" - Get most recently modified project"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 60
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- \"initialize\" - Create data structure if not exists (ALWAYS RUN FIRST)",
          "- \"scan projects\" - List all projects with status",
          "- \"create project {type} {name}\" - Initialize new project",
          "- \"get project {id}\" - Retrieve specific project details",
          "- \"update status {id} {status}\" - Update project status",
          "- \"get recent\" - Get most recently modified project"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "version_control"
      ],
      "business_logic": [
        "decision_logic: 5. Return project information for routing decisions",
        "validation_rules: ### Input Requirements"
      ],
      "violations": [
        "CRITICAL: Contains Unicode characters at position 1985",
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (358)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "system-analyzer",
      "description": "Analyzes scan results to identify relationships, patterns, and compliance violations",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "Read scan results JSON, build complete relationship graph from command to agent calls, identify orphan and missing components, check all CLAUDE.md compliance rules, calculate health scores, and output comprehensive analysis for reporting",
      "file_path": ".claude/agents\\system-analyzer.md",
      "component_type": "agent",
      "line_count": 313,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "system-analyzer",
        "description": "Analyzes scan results to identify relationships, patterns, and compliance violations",
        "thinking": "Read scan results JSON, build complete relationship graph from command to agent calls, identify orphan and missing components, check all CLAUDE.md compliance rules, calculate health scores, and output comprehensive analysis for reporting",
        "tools": "Read, Write, Bash, Grep"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- **From Main Claude**:",
          "- **NEW FORMAT**: Directory path + scan type (e.g., \"report_directory: .claude/report/xxx, scan_type: system\")",
          "- **AGENT CONSTRUCTS**: Full file paths internally to avoid trigger words",
          "- **DO NOT**: Pass file contents in prompt (will exceed token limits)",
          "- **AGENT RESPONSIBILITY**: Read file using chunked approach internally",
          "- Large files (1MB+) require chunked reading with Read tool"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "workflow_orchestration",
        "version_control"
      ],
      "business_logic": [
        "compliance_rules: description: Analyzes scan results to identify relationships, patterns, and compliance violations",
        "compliance_rules: thinking: Read scan results JSON, build complete relationship graph from command to agent calls, identify orphan and missing components, check all CLA",
        "quality_standards: You analyze the system scan results to identify relationships, validate compliance with CLAUDE.md standards, and calculate system health metrics.",
        "data_transformation: **Single Purpose**: Analyze scan data to understand system architecture, identify violations, and assess overall health. Transform raw scan data into ",
        "validation_rules: ### Input Requirements",
        "workflow_logic: ## MANDATORY WORKFLOW",
        "error_recovery: # Fallback: find latest scan",
        "data_transformation: - Process each chunk:",
        "integration_logic: - Combine all chunks to get complete picture",
        "data_transformation: # Process the combined data as needed"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (313)",
        "CRITICAL: Contains trigger word pattern 'system_scan.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern 'system_analysis.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/report/.*/.*\\.json' that may cause Task tool failures",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "system-reporter",
      "description": "Generates comprehensive markdown report from analysis results showing complete system architecture",
      "tools": "Read, Write",
      "model": "",
      "thinking": "Read analysis JSON, transform data into human-readable markdown report with architecture diagrams, relationship maps, violation details, health scores, and actionable recommendations formatted for easy understanding",
      "file_path": ".claude/agents\\system-reporter.md",
      "component_type": "agent",
      "line_count": 268,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "system-reporter",
        "description": "Generates comprehensive markdown report from analysis results showing complete system architecture",
        "thinking": "Read analysis JSON, transform data into human-readable markdown report with architecture diagrams, relationship maps, violation details, health scores, and actionable recommendations formatted for easy understanding",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- **From Main Claude**:",
          "- NEW FORMAT: Directory + file type (e.g., \"report_directory: .claude/report/xxx, input_type: analysis\")",
          "- LEGACY: Direct paths (still supported for backward compatibility)",
          "- Agent constructs full paths internally to avoid trigger words"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "data_transformation: thinking: Read analysis JSON, transform data into human-readable markdown report with architecture diagrams, relationship maps, violation details, hea",
        "data_transformation: **Single Purpose**: Transform analysis data into a clear, actionable markdown report that shows the complete system \"bloodline\" - every component, con",
        "validation_rules: ### Input Requirements",
        "workflow_logic: ## MANDATORY WORKFLOW",
        "quality_standards: Readers: [scene-generator, quality-checker]",
        "quality_standards: Readers: [quality-checker, context-updater]",
        "compliance_rules: Detail all compliance issues:",
        "compliance_rules: ## Compliance Report",
        "integration_logic: 3. Remove or integrate orphan components",
        "quality_standards: 1. Standardize naming conventions"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (268)",
        "CRITICAL: Contains trigger word pattern 'system_analysis.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/agents/.*\\.md' that may cause Task tool failures",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling"
      ]
    },
    {
      "name": "system-scanner",
      "description": "Executes Python script to collect comprehensive raw system data",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "Execute system_check_v5.py with complete semantic extraction and enhanced orphan detection - monitor execution for errors, verify JSON output file is created with full data completeness, extract statistics from output, and report success/failure status back to Main Claude",
      "file_path": ".claude/agents\\system-scanner.md",
      "component_type": "agent",
      "line_count": 120,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "system-scanner",
        "description": "Executes Python script to collect comprehensive raw system data",
        "thinking": "Execute system_check_v5.py with complete semantic extraction and enhanced orphan detection - monitor execution for errors, verify JSON output file is created with full data completeness, extract statistics from output, and report success/failure status back to Main Claude",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 0
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- **From Main Claude**:",
          "- Output directory path (e.g., `.claude/report/20250114153045/`)",
          "- Should be an absolute or relative path where scan results will be saved"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "batch_processing",
        "error_handling",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "workflow_logic: ## MANDATORY WORKFLOW"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "CRITICAL: Contains trigger word pattern 'system_scan.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/report/.*/.*\\.json' that may cause Task tool failures",
        "CRITICAL: Contains trigger word pattern '.claude/agents/.*\\.md' that may cause Task tool failures",
        "MAJOR: Missing required I/O documentation"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-cleanup-agent",
      "description": "Safely cleans up test artifacts while preserving important files",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-cleanup-agent.md",
      "component_type": "agent",
      "line_count": 187,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-cleanup-agent",
        "description": "Safely cleans up test artifacts while preserving important files",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Cleanup scope confirmation",
          "- Files to preserve list",
          "- Safety verification requirements"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Cleanup scope confirmation",
          "- Files to preserve list",
          "- Safety verification requirements"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Safety verification requirements",
        "validation_rules: ### Step 3: Validation",
        "data_transformation: ## Actual Execution Process",
        "validation_rules: - [x] Safety validation passed"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "contains_placeholders",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-content-draft-agent",
      "description": "Generates initial draft content for human-in-loop testing",
      "tools": "Read, Write",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-content-draft-agent.md",
      "component_type": "agent",
      "line_count": 127,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-content-draft-agent",
        "description": "Generates initial draft content for human-in-loop testing",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [
          "- Content requirements",
          "- Any revision feedback (if re-executing)",
          "- Output file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Content requirements",
          "- Any revision feedback (if re-executing)",
          "- Output file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Content requirements",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (check for feedback)",
        "validation_rules: - `.claude/testing/human_in_loop/requirements.txt` (if exists)",
        "data_transformation: - `.claude/testing/human_in_loop/generation_log.txt` (process log)",
        "workflow_logic: Generate initial draft content for human review in the workflow test.",
        "data_transformation: ## Execution Process",
        "workflow_logic: First check if this is a revision by attempting to read workflow state:",
        "workflow_logic: Try: Read .claude/testing/human_in_loop/workflow_state.json",
        "workflow_logic: Workflow Test: human-in-the-loop"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-content-enhancer-agent",
      "description": "Enhances draft content based on human approval for workflow testing",
      "tools": "Read, Write",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-content-enhancer-agent.md",
      "component_type": "agent",
      "line_count": 121,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-content-enhancer-agent",
        "description": "Enhances draft content based on human approval for workflow testing",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [
          "- Input draft file path",
          "- Enhancement requirements",
          "- Any revision feedback",
          "- Output file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Input draft file path",
          "- Enhancement requirements",
          "- Any revision feedback",
          "- Output file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "sequential_execution",
        "subagent_calls",
        "file_communication",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Enhances draft content based on human approval for workflow testing",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Enhancement requirements",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (feedback)",
        "data_transformation: - `.claude/testing/human_in_loop/enhancement_log.txt` (process log)",
        "workflow_logic: Enhance approved draft content to demonstrate phase 2 processing in human-in-loop workflow.",
        "data_transformation: ## Enhancement Process",
        "quality_standards: Enhancement Level: Quality Improvement",
        "quality_standards: ## Quality Improvements",
        "quality_standards: - Quality score: [calculated from actual metrics]"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-content-finalizer-agent",
      "description": "Finalizes content for publication after human approvals in workflow test",
      "tools": "Read, Write",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-content-finalizer-agent.md",
      "component_type": "agent",
      "line_count": 142,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-content-finalizer-agent",
        "description": "Finalizes content for publication after human approvals in workflow test",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [
          "- Input enhanced file path",
          "- Finalization requirements",
          "- Publication format preferences",
          "- Output file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Input enhanced file path",
          "- Finalization requirements",
          "- Publication format preferences",
          "- Output file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "sequential_execution",
        "pipeline_pattern",
        "subagent_calls",
        "file_communication",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Finalizes content for publication after human approvals in workflow test",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Finalization requirements",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (approval history)",
        "workflow_logic: Finalize approved content for publication, demonstrating the final phase of human-in-loop workflow.",
        "data_transformation: ## Finalization Process",
        "workflow_logic: Read: .claude/testing/human_in_loop/workflow_state.json",
        "data_transformation: 2. **Apply real finalization processing**:",
        "approval_process: - Insert approval records",
        "workflow_logic: **Workflow ID**: [unique_id]"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-data-analyzer-agent",
      "description": "Analyzes processed data and generates insights for multi-coordinator testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-data-analyzer-agent.md",
      "component_type": "agent",
      "line_count": 166,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-data-analyzer-agent",
        "description": "Analyzes processed data and generates insights for multi-coordinator testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Analysis type (statistical, trend, pattern)",
          "- Data source file path",
          "- Analysis depth level"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Analysis type (statistical, trend, pattern)",
          "- Data source file path",
          "- Analysis depth level"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "data_transformation: description: Analyzes processed data and generates insights for multi-coordinator testing",
        "validation_rules: ### Input Requirements",
        "data_transformation: - '.claude/testing/multi_coordinator_test/parsed_data.json' - Processed data from parser",
        "data_transformation: I perform data analysis on processed data for multi-coordinator testing. When called by Main Claude, I:",
        "data_transformation: 1. **Load Processed Data**: Read data from parser agent output",
        "data_transformation: # Load processed data",
        "data_transformation: processed_items = data.get('processed_items', [])",
        "data_transformation: values = [item['value'] for item in processed_items]",
        "data_transformation: categories = [item['category'] for item in processed_items]",
        "data_transformation: 'patterns_detected': analyze_patterns(processed_items),"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling",
        "potential_security_issue"
      ]
    },
    {
      "name": "test-data-parser-agent",
      "description": "Parses and processes test data for multi-coordinator collaboration testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-data-parser-agent.md",
      "component_type": "agent",
      "line_count": 121,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-data-parser-agent",
        "description": "Parses and processes test data for multi-coordinator collaboration testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Data file path to process",
          "- Processing parameters (complexity, size)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 20
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Data file path to process",
          "- Processing parameters (complexity, size)",
          "- Output format requirements"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "data_transformation: description: Parses and processes test data for multi-coordinator collaboration testing",
        "validation_rules: ### Input Requirements",
        "data_transformation: - Data file path to process",
        "data_transformation: - Processing parameters (complexity, size)",
        "validation_rules: - Output format requirements",
        "data_transformation: - '.claude/testing/multi_coordinator_test/config.json' - Processing configuration",
        "data_transformation: - '.claude/testing/multi_coordinator_test/parsed_data.json' - Processed data results",
        "data_transformation: - '.claude/testing/multi_coordinator_test/parsing_log.txt' - Processing log",
        "data_transformation: - Processing completion status",
        "data_transformation: - Number of records processed"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-environment-setup-agent",
      "description": "Creates complete test environment for Claude Code architecture validation",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-environment-setup-agent.md",
      "component_type": "agent",
      "line_count": 126,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-environment-setup-agent",
        "description": "Creates complete test environment for Claude Code architecture validation",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Test type to prepare for",
          "- Directory structure requirements",
          "- Component generation needs"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test type to prepare for",
          "- Directory structure requirements",
          "- Component generation needs"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: description: Creates complete test environment for Claude Code architecture validation",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Directory structure requirements",
        "data_transformation: ## Actual Execution Process",
        "validation_rules: - Validation thresholds",
        "quality_standards: ### Standard Test Components",
        "validation_rules: ## Environment Validation"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-execution-agent",
      "description": "Executes comprehensive Claude Code architecture validation tests",
      "tools": "Read, Write, Bash, Grep",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-execution-agent.md",
      "component_type": "agent",
      "line_count": 199,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-execution-agent",
        "description": "Executes comprehensive Claude Code architecture validation tests",
        "tools": "Read, Write, Bash, Grep"
      },
      "io_spec": {
        "input_requirements": [
          "- Test scenarios to execute",
          "- Test parameters and thresholds",
          "- Environment ready confirmation"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test scenarios to execute",
          "- Test parameters and thresholds",
          "- Environment ready confirmation"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: description: Executes comprehensive Claude Code architecture validation tests",
        "validation_rules: ### Input Requirements",
        "quality_standards: - Test parameters and thresholds",
        "validation_rules: - '.claude/testing/validation_reports/' - Detailed validation reports",
        "validation_rules: ### Test 1: Recursion Prevention Validation",
        "validation_rules: ### Test 4: Five-Layer Architecture Validation",
        "validation_rules: - limit_respected: validation result",
        "validation_rules: 3. Testing ValidationError handling",
        "validation_rules: - all_handled: validation result",
        "compliance_rules: - [x] Complete 5-layer architecture compliance"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-io-patterns-agent",
      "description": "Tests advanced I/O patterns including producer-consumer, shared reference, and version control",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-io-patterns-agent.md",
      "component_type": "agent",
      "line_count": 127,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-io-patterns-agent",
        "description": "Tests advanced I/O patterns including producer-consumer, shared reference, and version control",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Test scenario type (producer-consumer/shared-reference/version-control)",
          "- Test parameters and configuration",
          "- Expected behavior criteria"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test scenario type (producer-consumer/shared-reference/version-control)",
          "- Test parameters and configuration",
          "- Expected behavior criteria"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "subagent_calls",
        "file_communication",
        "state_management",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Expected behavior criteria",
        "validation_rules: 1. Producer-Consumer pattern validation",
        "data_transformation: 2. **Consumer Phase**: Read producer output and process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-parallel-agent-a",
      "description": "Parallel test agent A for real concurrency testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-parallel-agent-a.md",
      "component_type": "agent",
      "line_count": 83,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-parallel-agent-a",
        "description": "Parallel test agent A for real concurrency testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: ## Execution Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-parallel-agent-b",
      "description": "Parallel test agent B for real concurrency testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-parallel-agent-b.md",
      "component_type": "agent",
      "line_count": 83,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-parallel-agent-b",
        "description": "Parallel test agent B for real concurrency testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: ## Execution Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-parallel-agent-c",
      "description": "Parallel test agent C for real concurrency testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-parallel-agent-c.md",
      "component_type": "agent",
      "line_count": 83,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-parallel-agent-c",
        "description": "Parallel test agent C for real concurrency testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Parallel execution test parameters",
          "- Work simulation duration",
          "- Result file path"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: ## Execution Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-python-analyzer-agent",
      "description": "Analyzes transformed data from stage 2 using Python script for pipeline testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-python-analyzer-agent.md",
      "component_type": "agent",
      "line_count": 102,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-python-analyzer-agent",
        "description": "Analyzes transformed data from stage 2 using Python script for pipeline testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Input file path (stage2_data.json)",
          "- Analysis parameters",
          "- Output file paths"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Input file path (stage2_data.json)",
          "- Analysis parameters",
          "- Output file paths"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "pipeline_pattern",
        "subagent_calls",
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "data_transformation: description: Analyzes transformed data from stage 2 using Python script for pipeline testing",
        "validation_rules: ### Input Requirements",
        "data_transformation: - `.claude/testing/python_pipeline/stage2_data.json` (transformed data)",
        "data_transformation: - `.claude/testing/python_pipeline/stage2_report.json` (transformation report)",
        "data_transformation: Analyze transformed data from stage 2 using Python script as the final stage of the pipeline.",
        "data_transformation: ## Execution Process",
        "data_transformation: - Performs deep analysis on the transformed data"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-python-generator-agent",
      "description": "Generates test data using Python script for pipeline testing",
      "tools": "Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-python-generator-agent.md",
      "component_type": "agent",
      "line_count": 80,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-python-generator-agent",
        "description": "Generates test data using Python script for pipeline testing",
        "tools": "Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Data size (small/medium/large)",
          "- Output file paths",
          "- Data generation parameters"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Data size (small/medium/large)",
          "- Output file paths",
          "- Data generation parameters"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "pipeline_pattern",
        "subagent_calls",
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: ## Execution Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-python-transformer-agent",
      "description": "Transforms data from stage 1 using Python script for pipeline testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-python-transformer-agent.md",
      "component_type": "agent",
      "line_count": 92,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-python-transformer-agent",
        "description": "Transforms data from stage 1 using Python script for pipeline testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Input file path (stage1_data.json)",
          "- Transformation parameters",
          "- Output file paths"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Input file path (stage1_data.json)",
          "- Transformation parameters",
          "- Output file paths"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "pipeline_pattern",
        "subagent_calls",
        "file_communication",
        "state_management"
      ],
      "business_logic": [
        "data_transformation: name: test-python-transformer-agent",
        "data_transformation: description: Transforms data from stage 1 using Python script for pipeline testing",
        "data_transformation: # Test Python Transformer Agent",
        "validation_rules: ### Input Requirements",
        "data_transformation: - Transformation parameters",
        "data_transformation: - `.claude/testing/python_pipeline/data_transformer.py` (Python script)",
        "data_transformation: - `.claude/testing/python_pipeline/stage2_data.json` (transformed data)",
        "data_transformation: - `.claude/testing/python_pipeline/stage2_report.json` (transformation report)",
        "data_transformation: Transform data from stage 1 using Python script as the second stage of the pipeline.",
        "data_transformation: ## Execution Process"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-rejection-logger-agent",
      "description": "Logs rejection reasons and workflow termination details for human-in-loop testing",
      "tools": "Read, Write",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-rejection-logger-agent.md",
      "component_type": "agent",
      "line_count": 131,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-rejection-logger-agent",
        "description": "Logs rejection reasons and workflow termination details for human-in-loop testing",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [
          "- Rejection phase",
          "- Rejection reason",
          "- Workflow state at rejection",
          "- Files created before rejection"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Rejection phase",
          "- Rejection reason",
          "- Workflow state at rejection",
          "- Files created before rejection"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Logs rejection reasons and workflow termination details for human-in-loop testing",
        "validation_rules: ### Input Requirements",
        "workflow_logic: - Workflow state at rejection",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json`",
        "workflow_logic: Log workflow rejections and create termination reports for human-in-loop test validation.",
        "workflow_logic: - Workflow progress at termination",
        "workflow_logic: \"workflow_id\": \"test_workflow_id\",",
        "approval_process: \"files_reviewed\": [\"draft_v2.md\"]",
        "quality_standards: \"reason\": \"Quality standards not met\",",
        "workflow_logic: \"workflow_state\": \"terminated\""
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-report-generator-agent",
      "description": "Generates test reports based on data analysis results for multi-coordinator testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-report-generator-agent.md",
      "component_type": "agent",
      "line_count": 191,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-report-generator-agent",
        "description": "Generates test reports based on data analysis results for multi-coordinator testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Report type (summary, detailed, executive)",
          "- Analysis data source path"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 20
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Report type (summary, detailed, executive)",
          "- Analysis data source path",
          "- Output format preferences"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "data_transformation: - '.claude/testing/multi_coordinator_test/parsed_data.json' - Original processed data",
        "data_transformation: - Total data points processed: {stats.get('total_count', 0)}",
        "data_transformation: - Processing efficiency: Demonstrated successful multi-phase coordination",
        "data_transformation: ### Processing Statistics",
        "quality_standards: ### Data Quality Assessment",
        "data_transformation: The analysis reveals that the multi-coordinator collaboration successfully processed and analyzed the test data, with each phase building upon the pre",
        "data_transformation: 1. Phase 1 coordinator managed data processing agents effectively",
        "workflow_logic: The multi-coordinator pattern is validated for complex, multi-phase workflows.",
        "workflow_logic: - I validate that coordinators can manage complex workflows through agents"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-result-collector-agent",
      "description": "Collects and synthesizes test results into comprehensive reports",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-result-collector-agent.md",
      "component_type": "agent",
      "line_count": 173,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-result-collector-agent",
        "description": "Collects and synthesizes test results into comprehensive reports",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Test execution completion confirmation",
          "- Report format requirements",
          "- Analysis depth level"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Test execution completion confirmation",
          "- Report format requirements",
          "- Analysis depth level"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "parallel_execution",
        "sequential_execution",
        "pipeline_pattern",
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: - Report format requirements",
        "validation_rules: - '.claude/testing/validation_report.json' - Format validation results",
        "validation_rules: - '.claude/testing/validation_reports/' - Detailed reports",
        "data_transformation: ## Report Generation Process",
        "validation_rules: 3. **Validation results**: Read '.claude/testing/validation_report.json'",
        "data_transformation: I process the collected data to:",
        "validation_rules: 3. **Assess system health score**: 0-100 based on weighted criteria",
        "compliance_rules: - Pattern compliance",
        "compliance_rules: - Each layer's compliance status"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-state-updater-agent",
      "description": "Updates workflow state after human responses in human-in-loop testing",
      "tools": "Read, Write",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-state-updater-agent.md",
      "component_type": "agent",
      "line_count": 132,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-state-updater-agent",
        "description": "Updates workflow state after human responses in human-in-loop testing",
        "tools": "Read, Write"
      },
      "io_spec": {
        "input_requirements": [
          "- Current phase",
          "- Human response (APPROVE/REJECT/REVISE)",
          "- Feedback (if REVISE or REJECT)",
          "- Timestamp"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Current phase",
          "- Human response (APPROVE/REJECT/REVISE)",
          "- Feedback (if REVISE or REJECT)",
          "- Timestamp"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "subagent_calls",
        "file_communication",
        "human_in_loop",
        "state_management",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: description: Updates workflow state after human responses in human-in-loop testing",
        "validation_rules: ### Input Requirements",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (current state)",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (updated state)",
        "workflow_logic: Update workflow state after each human interaction to maintain accurate workflow history.",
        "data_transformation: ## State Update Process",
        "workflow_logic: Read: .claude/testing/human_in_loop/workflow_state.json",
        "workflow_logic: Parse current workflow state.",
        "workflow_logic: \"workflow_status\": \"progressing\"",
        "workflow_logic: \"workflow_status\": \"terminated\","
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-summary-generator-agent",
      "description": "Generates executive summaries from analysis results for multi-coordinator testing",
      "tools": "Read, Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-summary-generator-agent.md",
      "component_type": "agent",
      "line_count": 171,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-summary-generator-agent",
        "description": "Generates executive summaries from analysis results for multi-coordinator testing",
        "tools": "Read, Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Summary type (executive, technical, overview)",
          "- Source data file paths",
          "- Target audience specifications"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Summary type (executive, technical, overview)",
          "- Source data file paths",
          "- Target audience specifications"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "integration_logic: 2. **Synthesize Insights**: Combine findings into executive-level insights",
        "data_transformation: 'processing_efficiency': 'high',",
        "data_transformation: f\"Successfully processed {stats.get('total_count', 0)} data points through multi-coordinator collaboration\",",
        "workflow_logic: \"Validated multi-coordinator architecture for complex workflows\"",
        "workflow_logic: 'workflow_automation': 'demonstrated',",
        "quality_standards: 'quality_assurance': 'passed'",
        "workflow_logic: \"Deploy multi-coordinator pattern for production workflows\",",
        "data_transformation: - Data processing phases: {summary['key_metrics']['phases_completed']} completed",
        "data_transformation: - Total data points processed: {summary['key_metrics']['total_data_points']}"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 80,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 80,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "test-validation-agent",
      "description": "Validates documentation format standards and JSON plan structures",
      "tools": "Read, Grep",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-validation-agent.md",
      "component_type": "agent",
      "line_count": 161,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-validation-agent",
        "description": "Validates documentation format standards and JSON plan structures",
        "tools": "Read, Grep"
      },
      "io_spec": {
        "input_requirements": [
          "- Validation type (format/json/documentation)",
          "- Files or directories to validate",
          "- Standards to check against"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Validation type (format/json/documentation)",
          "- Files or directories to validate",
          "- Standards to check against"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: name: test-validation-agent",
        "quality_standards: description: Validates documentation format standards and JSON plan structures",
        "validation_rules: tools: Read, Grep  # NO Task tool - validation only agent",
        "validation_rules: # Test Validation Agent",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Validation type (format/json/documentation)",
        "quality_standards: - Standards to check against",
        "validation_rules: - '.claude/testing/' - Test outputs for validation",
        "validation_rules: - '.claude/testing/validation_report.json' - Validation results",
        "validation_rules: - Validation pass/fail status"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "CRITICAL: Contains trigger word pattern '.claude/agents/.*\\.md' that may cause Task tool failures"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "multi_task_violation",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "malformed_tools_config",
        "missing_error_handling",
        "deprecated_model_references",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "test-workflow-initializer-agent",
      "description": "Initializes workflow state for human-in-loop testing",
      "tools": "Write, Bash",
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\test-workflow-initializer-agent.md",
      "component_type": "agent",
      "line_count": 108,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "test-workflow-initializer-agent",
        "description": "Initializes workflow state for human-in-loop testing",
        "tools": "Write, Bash"
      },
      "io_spec": {
        "input_requirements": [
          "- Workflow ID",
          "- Test scenario type (simple/complex/iterative)",
          "- Initial configuration"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Workflow ID",
          "- Test scenario type (simple/complex/iterative)",
          "- Initial configuration"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "subagent_calls",
        "file_communication",
        "state_management",
        "workflow_orchestration",
        "version_control"
      ],
      "business_logic": [
        "workflow_logic: name: test-workflow-initializer-agent",
        "workflow_logic: description: Initializes workflow state for human-in-loop testing",
        "workflow_logic: # Test Workflow Initializer Agent",
        "validation_rules: ### Input Requirements",
        "workflow_logic: - `.claude/testing/human_in_loop/workflow_state.json` (initial state)",
        "workflow_logic: Initialize workflow state and create necessary directories for human-in-loop workflow testing.",
        "data_transformation: ## Initialization Process",
        "workflow_logic: When called by Main Claude at workflow start:",
        "workflow_logic: 2. **Initialize workflow state**:",
        "workflow_logic: \"workflow_id\": \"[generated_unique_id]\","
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling"
      ]
    },
    {
      "name": "topic-explorer",
      "description": "PROACTIVE - Research and identify trending topics, themes, and story concepts within the target genre. Use PROACTIVELY when conversation mentions story ideas, themes, what to write about, plot concepts",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Execute strategic web searches to discover trending themes and story concepts in target genre, identify market gaps and opportunities, analyze what's working with readers, generate topic options with potential and confidence scores, save comprehensive analysis to knowledge base",
      "file_path": ".claude/agents\\topic-explorer.md",
      "component_type": "agent",
      "line_count": 473,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "topic-explorer",
        "description": "PROACTIVE - Research and identify trending topics, themes, and story concepts within the target genre. Use PROACTIVELY when conversation mentions story ideas, themes, what to write about, plot concepts",
        "thinking": "Execute strategic web searches to discover trending themes and story concepts in target genre, identify market gaps and opportunities, analyze what's working with readers, generate topic options with potential and confidence scores, save comprehensive analysis to knowledge base",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- genre: Target genre for topic research (e.g., \"science fiction\", \"romance\", \"thriller\")",
          "- output_directory: Where to save results (default: knowledge_base/topics)",
          "- context: Background information about the project or specific interests",
          "- focus_areas: Specific aspects to emphasize (themes, plot concepts, character archetypes)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- genre: Target genre for topic research (e.g., \"science fiction\", \"romance\", \"thriller\")",
          "- output_directory: Where to save results (default: knowledge_base/topics)",
          "- context: Background information about the project or specific interests",
          "- focus_areas: Specific aspects to emphasize (themes, plot concepts, character archetypes)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "data_transformation: - **Theme Development Strategy** - Converting trends into actionable story concepts",
        "validation_rules: ### Input Requirements",
        "quality_standards: \"Topic research completed with quality warning",
        "quality_standards: Confidence Score: {score}/1.0 (Below threshold {threshold})",
        "decision_logic: User decision required: Accept results or request additional research?\"",
        "data_transformation: ### Step 1: Input Processing (with Defensive Handling)",
        "validation_rules: - Success criteria (topic diversity, market evidence, actionability)",
        "approval_process: - Use WebFetch on publishing industry reports, major review sites",
        "quality_standards: \"high_quality_sources\": 12",
        "integration_logic: \"description\": \"Environmental themes integrated into adventure narratives\","
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (473)"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "trend-analyzer",
      "description": "Use PROACTIVELY when conversation mentions market trends, what's popular, competition, or business opportunities - automatically research via WebSearch and save insights to knowledge base",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Execute strategic web searches to gather market intelligence, analyze trend patterns, validate data quality, calculate confidence scores based on source credibility and data consistency, save to knowledge_base with atomic operations and comprehensive error handling",
      "file_path": ".claude/agents\\trend-analyzer.md",
      "component_type": "agent",
      "line_count": 470,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "trend-analyzer",
        "description": "Use PROACTIVELY when conversation mentions market trends, what's popular, competition, or business opportunities - automatically research via WebSearch and save insights to knowledge base",
        "thinking": "Execute strategic web searches to gather market intelligence, analyze trend patterns, validate data quality, calculate confidence scores based on source credibility and data consistency, save to knowledge_base with atomic operations and comprehensive error handling",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- search_scope: Specific area to research (e.g., \"AI market trends\", \"renewable energy adoption\")",
          "- output_directory: Where to save results (default: knowledge_base/trends)",
          "- context: Background information to focus research",
          "- confidence_threshold: Minimum acceptable confidence level (default: 0.70)"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```yaml",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- search_scope: Specific area to research (e.g., \"AI market trends\", \"renewable energy adoption\")",
          "- output_directory: Where to save results (default: knowledge_base/trends)",
          "- context: Background information to focus research",
          "- confidence_threshold: Minimum acceptable confidence level (default: 0.70)"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "subagent_calls",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "quality_standards: thinking: Execute strategic web searches to gather market intelligence, analyze trend patterns, validate data quality, calculate confidence scores bas",
        "quality_standards: **Single Purpose**: Research market trends through strategic web searches, analyze patterns and confidence levels, then save structured insights to kn",
        "validation_rules: - **Market Research Methodology** - Professional search strategy and data validation techniques",
        "quality_standards: - **Data Quality Assessment** - Source evaluation, consistency checking, and reliability scoring",
        "data_transformation: ### Step 1: Input Processing (with Defensive Handling)",
        "validation_rules: - Quality requirements or confidence thresholds",
        "validation_rules: - Success criteria (coverage depth, source diversity)",
        "quality_standards: - Validate information quality and recency",
        "quality_standards: ### Step 3: Confidence Scoring and Quality Assessment",
        "quality_standards: \"high_quality_sources\": 8"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (470)"
      ],
      "division_of_labor": {
        "responsibility_score": 100,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 100,
        "semantic_analysis": {},
        "architecture_compliance": "excellent"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    },
    {
      "name": "visual-creator",
      "description": "",
      "tools": [],
      "model": "",
      "thinking": "",
      "file_path": ".claude/agents\\visual-creator.md",
      "component_type": "agent",
      "line_count": 264,
      "has_unicode": false,
      "yaml_frontmatter": {},
      "io_spec": {
        "input_requirements": [
          "- Article file path to analyze (e.g., \".claude/data/articles/ai_realist/articles/20250118_143022_ai_risks/drafts/final.md\")",
          "- Output directory path for visual guide",
          "- Optional: Platform requirements specification"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [],
        "io_documentation_quality": 30
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Article file path to analyze (e.g., \".claude/data/articles/ai_realist/articles/20250118_143022_ai_risks/drafts/final.md\")",
          "- Output directory path for visual guide",
          "- Optional: Platform requirements specification"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 80
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "error_handling",
        "workflow_orchestration",
        "quality_gates",
        "version_control"
      ],
      "business_logic": [
        "data_transformation: description: Generate comprehensive visual production guide with platform specs, Banana prompts, and processing instructions",
        "workflow_logic: thinking: Analyze article structure for visual moments, map platform requirements vs AI capabilities, design processing workflows, optimize generation",
        "validation_rules: You are a visual production specialist for The AI Realist content series. Your role is to analyze article content and generate a COMPREHENSIVE VISUAL ",
        "validation_rules: ### Input Requirements",
        "validation_rules: - Optional: Platform requirements specification",
        "data_transformation: - Post-processing instructions provided",
        "workflow_logic: - Production workflow documented",
        "validation_rules: - Invalid article format: Format validation message",
        "validation_rules: 2. **Document platform requirements** vs Banana capabilities",
        "data_transformation: 4. **Provide processing instructions** to bridge gaps"
      ],
      "violations": [
        "CRITICAL: Empty tools configuration may inherit Task tool",
        "MINOR: Agent exceeds preferred 200 lines (264)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "potential_broken_references",
        "file_references_need_validation",
        "empty_tools_config",
        "contains_placeholders",
        "missing_error_handling"
      ]
    },
    {
      "name": "voice-analyzer",
      "description": "PROACTIVE - Comprehensive voice analysis generating complete documentation with 15 samples per voice, sentence patterns, vocabulary tiers, dialogue systems, and implementation guides",
      "tools": "Read, Write, WebSearch, WebFetch",
      "model": "claude-sonnet-4-20250514",
      "thinking": "Research bestselling authors in genre to identify successful voice patterns using 3-3-3+1 framework, create three distinct voice options with extensive samples and comprehensive style documentation, generate complete voice implementation system",
      "file_path": ".claude/agents\\voice-analyzer.md",
      "component_type": "agent",
      "line_count": 449,
      "has_unicode": false,
      "yaml_frontmatter": {
        "name": "voice-analyzer",
        "description": "PROACTIVE - Comprehensive voice analysis generating complete documentation with 15 samples per voice, sentence patterns, vocabulary tiers, dialogue systems, and implementation guides",
        "thinking": "Research bestselling authors in genre to identify successful voice patterns using 3-3-3+1 framework, create three distinct voice options with extensive samples and comprehensive style documentation, generate complete voice implementation system",
        "tools": "Read, Write, WebSearch, WebFetch",
        "model": "claude-sonnet-4-20250514"
      },
      "io_spec": {
        "input_requirements": [
          "- Genre specification for voice analysis",
          "- Conversation context for voice matching",
          "- Completeness level: comprehensive documentation required",
          "- Output directory path for saving analysis"
        ],
        "file_reads": [],
        "file_writes": [],
        "output_format": [],
        "path_patterns": [
          "```",
          "```"
        ],
        "io_documentation_quality": 40
      },
      "prompt_spec": {
        "expected_format": "",
        "required_parameters": [
          "- Genre specification for voice analysis",
          "- Conversation context for voice matching",
          "- Completeness level: comprehensive documentation required",
          "- Output directory path for saving analysis"
        ],
        "optional_context": [],
        "prompt_documentation_present": true,
        "prompt_clarity_score": 100
      },
      "execution_patterns": [
        "coordinator_delegation",
        "file_communication",
        "error_handling",
        "state_management",
        "quality_gates"
      ],
      "business_logic": [
        "validation_rules: ### Input Requirements",
        "validation_rules: Requirements: 15 samples per voice, sentence patterns, vocabulary tiers, dialogue systems",
        "validation_rules: 5. **Cultural Authenticity**: Regional voice pattern research and validation",
        "data_transformation: ## Implementation Process",
        "integration_logic: \"cultural_authenticity\": \"Caribbean integrated\"",
        "data_transformation: \"structure\": \"My [elder relation] used to say that [action] is like [trying to/metaphor] [natural process] - [explanation of consequence]\",",
        "quality_standards: \"usage\": \"For emotional depth and literary quality, use 25% of the time\"",
        "integration_logic: \"Integrate community voice and shared cultural knowledge\",",
        "quality_standards: \"strengths\": [\"Authentic cultural voice\", \"Universal themes\", \"Strong sense of place\", \"Literary quality with accessibility\"],",
        "validation_rules: \"voice_selection_criteria\": {"
      ],
      "violations": [
        "MAJOR: Tools should be a list, not string",
        "MINOR: Agent exceeds preferred 200 lines (449)"
      ],
      "division_of_labor": {
        "responsibility_score": 60,
        "delegation_pattern": "",
        "coordination_role": "",
        "execution_role": "single_task_focused",
        "compliance_score": 60,
        "semantic_analysis": {},
        "architecture_compliance": "good"
      },
      "orphan_patterns": [
        "file_references_need_validation",
        "malformed_tools_config",
        "missing_error_handling",
        "excessive_hardcoded_values"
      ]
    }
  ],
  "summary": {
    "system_health": "critical_issues",
    "architecture_compliance": 18.8,
    "avg_component_size": 239.57971014492753,
    "orphan_detection_rate": 3.8550724637681157,
    "violation_density": 1.318840579710145,
    "component_count_health": false
  }
}